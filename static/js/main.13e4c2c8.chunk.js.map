{"version":3,"sources":["game-modules/game/config.ts","game-modules/game/create/character/index.ts","game-modules/game/create/enemy/index.ts","game-modules/game/create/player/index.ts","game-modules/game/create/world.ts","game-modules/game/create/inventory/allItemList.ts","game-modules/game/create/inventory/createCell.ts","game-modules/game/create/inventory/createItems.ts","game-modules/game/create/inventory/createButton.ts","game-modules/game/create/inventory/clearParamsName.ts","game-modules/game/create/inventory/itemCallBack.ts","game-modules/game/consts.ts","game-modules/game/create/inventory/changeUserParams.ts","game-modules/game/create/inventory/index.ts","game-modules/game/create/animation.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/load/preload.ts","game-modules/game/update/checkCharacterZIndex.ts","game-modules/game/create/layers/index.ts","game-modules/game/create/layers/addCharacters.ts","game-modules/game/create/layers/addUi.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations/settings.ts","game-modules/service/scenes/DefaultScene/configs/animations/index.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/preloadSettings.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/index.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/scenes/DefaultScene/configs/boxCreator.ts","game-modules/service/scenes/DefaultScene/configs/enemy.ts","game-modules/service/scenes/DefaultScene/configs/addToLayers/index.ts","game-modules/service/scenes/DefaultScene/configs/addToLayers/config.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["baseGameConfig","health","width","height","CreateCharacter","scene","x","y","spriteSheet","textureFrame","params","actor","animations","armor","attack","speed","coolDown","elements","healthLine","mortal","sword","enemy","target","fight","collision","top","calc","blocked","bottom","left","right","this","physics","add","sprite","origin","setOrigin","destroy","isFight","active","setDepth","depth","originX","originY","play","healthPercent","scaleX","damage","setDeath","world","optional","key","value","valueLine","coordinates","worldIndex","getTileAtWorldXY","index","id","indexOf","characters","forEach","character","checkCoordinates","Object","entries","direction","accuracy","xSide","ySide","setVelocityX","setVelocityY","graphics","lineStyle","healthLineY","beginPath","moveTo","lineTo","closePath","strokePath","side","movement","anims","isPaused","currentAnim","pause","frames","createEnemy","CreateEnemy","visionDistance","vision","char","createHealth","enemies","undefined","find","xDifference","Math","abs","yDifference","Infinity","checkCollision","createCollision","movementAnimation","enemyOnAttackDistance","mortalAnimationPlay","mortalCalculate","createPlayer","CreatePlayer","animation","inventory","skills","portrait","engine","create","img","setScrollFactor","layers","ui","uiButton","cursor","creator","showWorld","gridName","imgName","size","gridTileMap","make","tilemap","tileHeight","tileWidth","gridTileSet","addTilesetImage","createStaticLayer","World","objects","call","configs","config","name","image","createWorld","items","slot","picked","price","defence","hp","message","createCell","cell","strokeRect","createItems","cells","itemList","callback","console","log","length","itemUnit","cellData","body","setInteractive","setTint","on","push","clearItems","item","createButton","type","position","xPosition","Number","game","yPosition","buttonId","clearParams","values","text","setText","itemCallBack","checkedItem","frame","setPosition","showItemParamElements","paramsArray","counter","unit","paramName","element","setUserParams","player","itemParams","operation","createInventory","Inventory","list","inventoryStatus","allItems","map","inventoryContainer","displayedItems","pickButton","barterButton","barterMoveButton","container","sceneSizes","w","h","createShowItemParamElements","shape","mask","createGeometryMask","background","yAmount","rowWidth","createCells","fillRect","margin","paramsElements","setMask","setAlpha","openInventory","closeInventory","bind","selectedSlot","clearTint","newUserParams","paramValue","changeList","setTexture","barterShowedElements","setTimeout","boxList","updatedList","filter","i","random","search","PhaserMath","Between","inventoryImg","openBarter","newList","createAnimation","generateFrameNumbers","ways","frameRate","repeat","createCamera","camera","cameras","main","setBounds","startFollow","createCursor","scale","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","pointer","fehlerX","fehlerY","scrollX","scrollY","restart","preloadData","data","method","content","load","checkCharacterZIndex","sort","charA","charB","createLayers","layer","gameElements","addCharactersToLayer","addSpriteToLayer","elementList","Array","isArray","el","Game","update","preload","addToLayer","sprites","check","characterZIndex","event","callBack","goingFrames","start","end","fightFrames","animationList","collisionCellIds","enemyList","characterData","frameWidth","frameHeight","startFrame","endFrame","zombie","fightEffects","path","claws","sword_1","assets","DefaultScene","state","addSimpleObjects","createBox","enemyUnit","addListeners","addList","result","addUIListToLayers","move","watching","enemyMovement","Scene","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","useLayoutEffect","useEffect","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.13e4c2c8.chunk.js","sourcesContent":["export const baseGameConfig = {\r\n  colors: {\r\n    health: 0xff0000,\r\n  },\r\n  sizes: {\r\n    health: {\r\n      width: 30,\r\n      height: 5,\r\n    },\r\n  },\r\n};\r\n","import { Scene } from \"phaser\";\r\nimport { baseGameConfig } from \"../../config\";\r\nimport {\r\n  AnimationsListType,\r\n  CharacterAnimationsList,\r\n  CharactersPosterity,\r\n  MortalTypes,\r\n  Sides,\r\n  CharacterElements,\r\n  OptionalCollisionParams,\r\n} from \"../../types\";\r\n\r\nexport default class CreateCharacter {\r\n  actor;\r\n  scene: Scene;\r\n  animations?: CharacterAnimationsList;\r\n  params = {\r\n    health: 100,\r\n    armor: 10,\r\n    attack: 10,\r\n\r\n    speed: 100,\r\n    coolDown: 5,\r\n  };\r\n  elements: CharacterElements = {\r\n    healthLine: null,\r\n  };\r\n  mortal: MortalTypes = {\r\n    sword: null,\r\n    enemy: null,\r\n    target: {},\r\n\r\n    fight: {\r\n      health: 100,\r\n      coolDown: 50,\r\n    },\r\n  };\r\n  collision = {\r\n    top: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    bottom: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n    left: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    right: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    params: {\r\n      origin?: number[];\r\n      animations?: CharacterAnimationsList;\r\n    }\r\n  ) {\r\n    this.scene = scene;\r\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\r\n\r\n    if (params.origin) {\r\n      this.actor.setOrigin(...params.origin);\r\n    }\r\n  }\r\n\r\n  setDeath() {\r\n    this.mortal.sword?.destroy();\r\n    this.actor.x = -1000;\r\n    this.actor.destroy();\r\n    this.elements.healthLine?.destroy();\r\n    if (this.mortal.enemy) {\r\n      this.mortal.enemy.mortal.enemy = null;\r\n    }\r\n  }\r\n\r\n  mortalAnimationPlay(isFight?: boolean) {\r\n    if (!this.animations || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n    if (isFight) {\r\n      if (!this.mortal.sword || !this.mortal.sword.active) {\r\n        this.mortal.sword = this.scene.add\r\n          .sprite(this.actor.x, this.actor.y, \"\")\r\n          .setOrigin(this.actor.originX, this.actor.originY);\r\n\r\n        this.mortal.sword.play(this.animations.sword);\r\n      } else {\r\n        this.mortal.sword.x = this.actor.x;\r\n        this.mortal.sword.y = this.actor.y;\r\n        this.mortal.sword.setDepth(this.actor.depth + 1);\r\n      }\r\n    } else {\r\n      if (this.mortal.sword) {\r\n        this.mortal.sword.destroy();\r\n        this.mortal.sword = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  mortalCalculate(enemy?: CharactersPosterity) {\r\n    if (!enemy || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.elements.healthLine) {\r\n      const healthPercent = this.mortal.fight.health / this.params.health;\r\n      this.elements.healthLine.scaleX = healthPercent;\r\n    }\r\n\r\n    if (this.mortal.fight.coolDown === this.params.coolDown) {\r\n      this.mortal.fight.coolDown--;\r\n      const damage = this.params.attack - enemy.params.armor;\r\n      const minDamage = 0;\r\n      enemy.mortal.fight.health -= damage > 0 ? damage : minDamage;\r\n    } else {\r\n      this.mortal.fight.coolDown--;\r\n      if (this.mortal.fight.coolDown < 0) {\r\n        this.mortal.fight.coolDown = this.params.coolDown;\r\n      }\r\n    }\r\n\r\n    if (enemy.mortal.fight.health <= 0) {\r\n      enemy.setDeath();\r\n      this.mortal.enemy = null;\r\n      this.mortal.sword?.destroy();\r\n      this.mortal.sword = null;\r\n    }\r\n  }\r\n\r\n  checkCollision(\r\n    world: any,\r\n    collision: number[],\r\n    optional?: OptionalCollisionParams\r\n  ) {\r\n    for (const [key, value] of Object.entries(this.collision)) {\r\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\r\n\r\n      const coordinates = {\r\n        x: valueLine === \"x\" ? this.actor.x + value.calc : this.actor.x,\r\n        y: valueLine === \"y\" ? this.actor.y + value.calc : this.actor.y,\r\n      };\r\n\r\n      const worldIndex = world.getTileAtWorldXY(\r\n        coordinates.x,\r\n        coordinates.y,\r\n        false\r\n      )?.index;\r\n\r\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\r\n\r\n      if (!id || id !== -1) {\r\n        value.blocked = true;\r\n      } else {\r\n        value.blocked = false;\r\n      }\r\n\r\n      if (optional) {\r\n        if (optional.characters) {\r\n          optional.characters.forEach((character) => {\r\n            if (character.actor === this.actor || !character.actor.active) {\r\n              return;\r\n            }\r\n            const accuracy = 7;\r\n\r\n            const checkCoordinates = {\r\n              x:\r\n                character.actor.x <= coordinates.x + accuracy &&\r\n                character.actor.x >= coordinates.x - accuracy,\r\n              y:\r\n                character.actor.y <= coordinates.y + accuracy &&\r\n                character.actor.y >= coordinates.y - accuracy,\r\n            };\r\n            if (checkCoordinates.x && checkCoordinates.y) {\r\n              if (!value.blocked) {\r\n                value.blocked = true;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createCollision(params: {\r\n    direction: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    coordinates: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n  }) {\r\n    if (this.collision.right.blocked) {\r\n      if (params.direction.x > 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    } else if (this.collision.left.blocked) {\r\n      if (params.direction.x < 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    }\r\n\r\n    if (this.collision.bottom.blocked) {\r\n      if (params.direction.y > 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    } else if (this.collision.top.blocked) {\r\n      if (params.direction.y < 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    }\r\n  }\r\n\r\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\r\n    if (this.elements.healthLine) {\r\n      this.elements.healthLine.x = this.actor.x;\r\n      this.elements.healthLine.y = this.actor.y;\r\n    }\r\n\r\n    if (this.mortal.fight.health <= 0) {\r\n      return [\"stop\", \"stop\"];\r\n    }\r\n\r\n    const xSide =\r\n      this.actor.x - x < -accuracy\r\n        ? \"right\"\r\n        : this.actor.x - x > accuracy\r\n        ? \"left\"\r\n        : \"stop\";\r\n    const ySide =\r\n      this.actor.y - y < -accuracy\r\n        ? \"bottom\"\r\n        : this.actor.y - y > accuracy\r\n        ? \"top\"\r\n        : \"stop\";\r\n\r\n    if (xSide === \"right\") {\r\n      this.actor.setVelocityX(speed);\r\n    } else if (xSide === \"left\") {\r\n      this.actor.setVelocityX(-speed);\r\n    } else {\r\n      this.actor.setVelocityX(0);\r\n    }\r\n\r\n    if (ySide === \"bottom\") {\r\n      this.actor.setVelocityY(speed);\r\n    } else if (ySide === \"top\") {\r\n      this.actor.setVelocityY(-speed);\r\n    } else {\r\n      this.actor.setVelocityY(0);\r\n    }\r\n\r\n    return [xSide, ySide];\r\n  }\r\n\r\n  createHealth() {\r\n    const graphics = this.scene.add.graphics({\r\n      x: this.actor.x,\r\n      y: this.actor.y,\r\n    });\r\n    graphics.lineStyle(\r\n      baseGameConfig.sizes.health.height,\r\n      baseGameConfig.colors.health\r\n    );\r\n    const healthLineY =\r\n      baseGameConfig.sizes.health.height * -1 -\r\n      this.actor.height * this.actor.originY;\r\n\r\n    graphics.beginPath();\r\n    graphics.moveTo((baseGameConfig.sizes.health.width / 2) * -1, healthLineY);\r\n    graphics.lineTo(baseGameConfig.sizes.health.width / 2, healthLineY);\r\n    graphics.closePath();\r\n    graphics.strokePath();\r\n    graphics.setDepth(this.actor.depth + 2);\r\n\r\n    this.elements.healthLine = graphics;\r\n  }\r\n\r\n  movementAnimation(side: Sides[], movement?: AnimationsListType) {\r\n    if (!movement || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n    try {\r\n      const [xSide, ySide] = side;\r\n\r\n      if (xSide !== \"stop\") {\r\n        if (this.actor.anims.isPaused) {\r\n          this.actor.anims.play(this.actor.anims.currentAnim);\r\n        }\r\n\r\n        if (this.actor.anims.currentAnim?.key !== movement[xSide]) {\r\n          this.actor.anims.play(movement[xSide]);\r\n        }\r\n      } else if (ySide !== \"stop\") {\r\n        if (this.actor.anims.isPaused) {\r\n          this.actor.anims.play(this.actor.anims.currentAnim);\r\n        }\r\n\r\n        if (this.actor.anims.currentAnim?.key !== movement[ySide]) {\r\n          this.actor.anims.play(movement[ySide]);\r\n        }\r\n      } else {\r\n        this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\r\n      }\r\n    } catch {\r\n      this.actor.anims.pause();\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { CharactersPosterity, EnemyAnimationsList } from \"../../types\";\r\n\r\nimport CreateCharacter from \".././character\";\r\n\r\nexport function createEnemy(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  animations: EnemyAnimationsList,\r\n  params?: {\r\n    origin?: number[];\r\n    vision?: number;\r\n    char?: {\r\n      speed: number;\r\n      health: number;\r\n      armor: number;\r\n      attack: number;\r\n      coolDown: number;\r\n    };\r\n  }\r\n) {\r\n  return new CreateEnemy(\r\n    this,\r\n    x,\r\n    y,\r\n    spriteSheet,\r\n    textureFrame,\r\n    animations,\r\n    params\r\n  );\r\n}\r\n\r\nexport default class CreateEnemy extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  visionDistance = 100;\r\n  animations: EnemyAnimationsList;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    animations: EnemyAnimationsList,\r\n\r\n    params?: {\r\n      origin?: number[];\r\n      vision?: number;\r\n      char?: {\r\n        speed: number;\r\n        health: number;\r\n        armor: number;\r\n        attack: number;\r\n        coolDown: number;\r\n      };\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, {\r\n      origin: params?.origin,\r\n      animations: animations,\r\n    });\r\n    this.scene = scene;\r\n    this.visionDistance = params?.vision || this.visionDistance;\r\n\r\n    this.animations = animations;\r\n\r\n    if (params?.char) {\r\n      this.params = params.char;\r\n    }\r\n\r\n    this.createHealth();\r\n  }\r\n\r\n  watching(enemies: CharactersPosterity[], collision?: number[]) {\r\n    let accuracy = 15;\r\n    const fightDistance = 14;\r\n\r\n    let target: CharactersPosterity | undefined = undefined;\r\n\r\n    if (!target) {\r\n      target = enemies.find((enemy) => {\r\n        const xDifference = Math.abs(enemy.actor.x - this.actor.x);\r\n        const yDifference = Math.abs(enemy.actor.y - this.actor.y);\r\n        return (\r\n          xDifference < this.visionDistance && yDifference < this.visionDistance\r\n        );\r\n      });\r\n    }\r\n    if (target) {\r\n      this.visionDistance = Infinity;\r\n      const params = {\r\n        direction: {\r\n          x: target.actor.x - this.actor.x,\r\n          y: target.actor.y - this.actor.y,\r\n        },\r\n        coordinates: {\r\n          x: target.actor.x,\r\n          y: target.actor.y,\r\n        },\r\n      };\r\n\r\n      if (collision) {\r\n        this.checkCollision(this.scene.world.world, collision, {\r\n          characters: this.scene.enemy,\r\n        });\r\n        this.createCollision(params);\r\n      }\r\n      const side = super.move(\r\n        params.coordinates.x,\r\n        params.coordinates.y,\r\n        this.params.speed,\r\n        accuracy\r\n      );\r\n\r\n      if (this.animations.movement) {\r\n        const movement = this.animations.movement;\r\n\r\n        this.movementAnimation(side, movement);\r\n      }\r\n\r\n      const enemyOnAttackDistance =\r\n        Math.abs(params.direction.x) <= fightDistance &&\r\n        Math.abs(params.direction.y) <= fightDistance;\r\n\r\n      this.mortalAnimationPlay(enemyOnAttackDistance);\r\n\r\n      if (enemyOnAttackDistance) {\r\n        this.mortalCalculate(target);\r\n        if (!target.mortal.enemy) {\r\n          target.mortal.enemy = this;\r\n        }\r\n      } else {\r\n        if (target.mortal.enemy?.actor === this.actor) {\r\n          target.mortal.enemy = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Inventory } from \"..\";\r\nimport DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { CharacterAnimationsList, UserSkills } from \"../../types\";\r\nimport CreateCharacter from \"../character\";\r\n\r\nlet test: any;\r\nexport function createPlayer(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  params: {\r\n    animation: CharacterAnimationsList;\r\n    origin?: number[];\r\n    inventory: string;\r\n  }\r\n) {\r\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, params);\r\n}\r\n\r\nexport default class CreatePlayer extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  inventory: Inventory;\r\n  skills: UserSkills = {\r\n    health: 10,\r\n    armor: 0,\r\n    attack: 1,\r\n    coolDown: 20,\r\n    speed: 100,\r\n  };\r\n  portrait: Phaser.GameObjects.Sprite;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    params: {\r\n      origin?: number[];\r\n      animation: CharacterAnimationsList;\r\n      inventory: string;\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, {\r\n      origin: params?.origin,\r\n      animations: params.animation,\r\n    });\r\n    this.scene = scene;\r\n    this.animations = params.animation;\r\n\r\n    this.params = {\r\n      ...this.skills,\r\n    };\r\n\r\n    this.inventory = scene.engine.create.inventory({\r\n      img: \"uiInventory\",\r\n    });\r\n\r\n    this.portrait = scene.add\r\n      .sprite(0, 0, \"playerPortrait\")\r\n      .setOrigin(0, 0)\r\n      .setScrollFactor(0);\r\n\r\n    if (this.scene.engine.layers?.ui && this.inventory.elements.uiButton) {\r\n      this.scene.engine.layers.ui.add(this.inventory.elements.uiButton);\r\n      this.scene.engine.layers.ui.add(this.portrait);\r\n    }\r\n  }\r\n\r\n  //@ts-ignore\r\n  move(cursor: any, world: any, collision: number[]) {\r\n    let accuracy = 5;\r\n\r\n    this.checkCollision(world, collision);\r\n    const params = {\r\n      direction: {\r\n        x: cursor.x - this.actor.x,\r\n        y: cursor.y - this.actor.y,\r\n      },\r\n      coordinates: {\r\n        x: cursor.x,\r\n        y: cursor.y,\r\n      },\r\n    };\r\n\r\n    this.createCollision(params);\r\n\r\n    const side = super.move(\r\n      params.coordinates.x,\r\n      params.coordinates.y,\r\n      this.params.speed,\r\n      accuracy\r\n    );\r\n\r\n    this.movementAnimation(side, this.animations?.movement);\r\n    this.mortalAnimationPlay(!!this.mortal.enemy);\r\n\r\n    if (this.mortal.enemy) {\r\n      this.mortalCalculate(this.mortal.enemy);\r\n    }\r\n\r\n    return side;\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { SimpleObject } from \"../types\";\r\nexport function creator(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  const gridTileMap = this.make.tilemap({\r\n    key: gridName,\r\n    tileHeight: size,\r\n    tileWidth: size,\r\n  });\r\n\r\n  const gridTileSet = showWorld\r\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\r\n    : null;\r\n\r\n  // @ts-ignore\r\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\r\n\r\n  return tileLayer;\r\n}\r\n\r\nexport default class World {\r\n  world: any;\r\n  scene: Scene;\r\n  objects: {\r\n    [key: string]: Phaser.GameObjects.Image;\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    showWorld: boolean,\r\n    gridName: string,\r\n    imgName: string,\r\n    size: number\r\n  ) {\r\n    this.scene = scene;\r\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\r\n    this.objects = {};\r\n  }\r\n\r\n  addSimpleObjects(configs: SimpleObject[]) {\r\n    configs.forEach((config) => {\r\n      const { x, y, imgName, name } = config;\r\n      this.objects[name] = this.scene.add.image(x, y, imgName);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createWorld(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  return new World(this, showWorld, gridName, imgName, size);\r\n}\r\n","import { Item } from \"../../types\";\r\n\r\nexport const itemList = (): Item[] => {\r\n  return items.map((item, index) => {\r\n    return {\r\n      ...item,\r\n      id: index,\r\n    };\r\n  });\r\n};\r\n\r\nconst items: Item[] = [\r\n  {\r\n    img: \"inventoryElement_1\",\r\n    name: \"item\",\r\n    slot: \"body\",\r\n    picked: false,\r\n    price: 10,\r\n    params: {\r\n      defence: 20,\r\n      attack: 10,\r\n      hp: 5,\r\n      speed: 50,\r\n    },\r\n    message: \"test\",\r\n  },\r\n  {\r\n    img: \"inventoryElement_2\",\r\n    name: \"item2\",\r\n    slot: \"arm\",\r\n    picked: false,\r\n    price: 10,\r\n    params: {\r\n      defence: 0,\r\n      attack: 150,\r\n      hp: 0,\r\n      speed: 510,\r\n    },\r\n  },\r\n];\r\n","import { Scene } from \"phaser\";\r\n\r\nexport function createCells(scene: Scene) {\r\n  const rowWidth = 5,\r\n    rowHeight = 8;\r\n  const cells: Phaser.GameObjects.Graphics[] = [];\r\n  let yAmount = 0;\r\n\r\n  for (let index = 1; index <= rowWidth * rowHeight; index++) {\r\n    let x = 50;\r\n\r\n    switch (index % rowWidth) {\r\n      case 1:\r\n        x *= 1;\r\n        yAmount++;\r\n        break;\r\n\r\n      case 0:\r\n        x *= rowWidth;\r\n        break;\r\n\r\n      default:\r\n        x *= index % rowWidth;\r\n        break;\r\n    }\r\n\r\n    cells.push(createCell(scene, x, yAmount * 50));\r\n  }\r\n\r\n  return cells;\r\n}\r\nexport function createCell(scene: Scene, x: number, y: number) {\r\n  var cell = scene.add.graphics();\r\n  cell.lineStyle(2, 0x118eb3);\r\n  cell.strokeRect(0, 0, 40, 40);\r\n  cell.x = x;\r\n  cell.y = y;\r\n\r\n  return cell;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { Item, ItemBody } from \"../../types\";\r\n\r\nexport function createItems(\r\n  scene: Scene,\r\n  cells: Phaser.GameObjects.Graphics[],\r\n  itemList: Item[],\r\n  callback: (checkedItem: ItemBody | null) => void\r\n) {\r\n  const items: ItemBody[] = [];\r\n  console.log(\"t>\", items, itemList);\r\n\r\n  for (let index = 0; index < itemList.length; index++) {\r\n    if (index > cells.length - 1) {\r\n      break;\r\n    }\r\n    const itemUnit = itemList[index];\r\n\r\n    const cellData = {\r\n      x: cells[index].x + 3,\r\n      y: cells[index].y + 3,\r\n    };\r\n    const body = scene.add\r\n      .sprite(cellData.x, cellData.y, itemUnit.img)\r\n      .setOrigin(0, 0)\r\n      .setScrollFactor(0)\r\n      .setInteractive();\r\n\r\n    if (itemUnit.picked) {\r\n      body.setTint(0x87ff4b);\r\n    }\r\n\r\n    //@ts-ignore\r\n    body.params = itemUnit;\r\n    body.on(\"pointerdown\", () => {\r\n      //@ts-ignore\r\n      callback(body);\r\n      console.log(\"item click\", index);\r\n    });\r\n\r\n    //@ts-ignore\r\n    items.push(body);\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport const clearItems = (items: ItemBody[]) => {\r\n  items.forEach((item) => {\r\n    item.destroy();\r\n  });\r\n  items.length = 0;\r\n};\r\n","import { Scene } from \"phaser\";\r\n\r\nexport const createButton = (\r\n  scene: Scene,\r\n  type: \"open\" | \"move\" | \"pick\",\r\n  position: number\r\n) => {\r\n  const buttonWidth = 50,\r\n    buttonHeight = 50,\r\n    xPosition = Number(scene.game.config.width) - buttonWidth - 30,\r\n    yPosition = 100 + (buttonHeight + 10) * position;\r\n\r\n  let buttonId = \"\";\r\n\r\n  switch (type) {\r\n    default:\r\n    case \"open\":\r\n      buttonId = \"barterButton\";\r\n      break;\r\n    case \"move\":\r\n      buttonId = \"moveButton\";\r\n      break;\r\n    case \"pick\":\r\n      buttonId = \"pickButton\";\r\n\r\n      break;\r\n  }\r\n  return scene.add\r\n    .sprite(xPosition, yPosition, buttonId)\r\n    .setOrigin(1, 0.5)\r\n    .setInteractive()\r\n    .setScrollFactor(0);\r\n};\r\n","import { ShowItemParamElements } from \"../../types\";\r\n\r\nexport const clearParams = (params: ShowItemParamElements) => {\r\n  //@ts-ignore\r\n  const paramsArray: Phaser.GameObjects.Text[] = Object.values(params);\r\n\r\n  paramsArray.forEach((text) => {\r\n    text.setText(\"\");\r\n  });\r\n};\r\n","import { paramTextYPosition } from \"../../consts\";\r\nimport { ItemBody, ItemParams } from \"../../types\";\r\nimport { clearParams } from \"./clearParamsName\";\r\nimport Inventory from \"./index\";\r\n\r\nconst setText = (paramName: keyof ItemParams, value: number) => {\r\n  switch (paramName) {\r\n    case \"attack\":\r\n      return `attack: ${value}`;\r\n    case \"defence\":\r\n      return `defence: ${value}`;\r\n    case \"hp\":\r\n      return `hp: ${value}`;\r\n    case \"speed\":\r\n      return `speed: ${value}`;\r\n\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport function itemCallBack(this: Inventory, item: ItemBody | null) {\r\n  this.checkedItem = item;\r\n  if (item) {\r\n    this.frame.setPosition(item?.x, item.y);\r\n    const { params } = item.params;\r\n\r\n    if (params) {\r\n      clearParams(this.showItemParamElements);\r\n      //@ts-ignore\r\n      const paramsArray: [keyof ItemParams, number][] = Object.entries(params);\r\n      let counter = 1;\r\n\r\n      paramsArray.forEach((unit) => {\r\n        if (unit && unit[1]) {\r\n          const [name, value] = unit;\r\n          const paramName: keyof ItemParams = name;\r\n          const element = this.showItemParamElements[paramName];\r\n          if (element) {\r\n            element.y = paramTextYPosition + element.height * counter++;\r\n            element.setText(setText(paramName, value));\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","export const paramTextYPosition = 300;\r\n","import { ItemParams } from \"../../types\";\r\nimport CreatePlayer from \"../player\";\r\n\r\nexport function setUserParams(\r\n  player: CreatePlayer,\r\n  itemParams: ItemParams,\r\n  operation: \"clear\" | \"set\"\r\n) {\r\n  for (const key in itemParams) {\r\n    //@ts-ignore\r\n    const value: number = itemParams[key];\r\n\r\n    const { params, skills } = player;\r\n    switch (key) {\r\n      case \"attack\":\r\n        params.attack = operation !== \"clear\" && value ? value : skills.attack;\r\n        break;\r\n\r\n      case \"defence\":\r\n        params.armor = operation !== \"clear\" && value ? value : skills.armor;\r\n        break;\r\n\r\n      case \"hp\":\r\n        params.health = operation !== \"clear\" && value ? value : skills.health;\r\n        break;\r\n\r\n      case \"speed\":\r\n        params.speed = operation !== \"clear\" && value ? value : skills.speed;\r\n        break;\r\n\r\n      case \"coolDown\":\r\n        params.coolDown =\r\n          operation !== \"clear\" && value ? value : skills.coolDown;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { Math as PhaserMath, Scene } from \"phaser\";\r\nimport {\r\n  InventoryParams,\r\n  CreateInventorySettings,\r\n  InventoryStatuses,\r\n  Item,\r\n  ItemBox,\r\n  ItemBody,\r\n  ShowItemParamElements,\r\n  ItemParams,\r\n} from \"../../types\";\r\nimport { itemList } from \"./allItemList\";\r\nimport { createCells } from \"./createCell\";\r\nimport { clearItems, createItems } from \"./createItems\";\r\nimport DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { createButton } from \"./createButton\";\r\nimport { itemCallBack } from \"./itemCallBack\";\r\nimport { paramTextYPosition } from \"../../consts\";\r\nimport { clearParams } from \"./clearParamsName\";\r\nimport { setUserParams } from \"./changeUserParams\";\r\n\r\nexport function createInventory(\r\n  this: DefaultScene,\r\n  params: CreateInventorySettings\r\n): Inventory {\r\n  return new Inventory(this, params);\r\n}\r\n\r\nexport default class Inventory {\r\n  scene: DefaultScene;\r\n  elements: InventoryParams;\r\n  list: Item[] = [];\r\n  checkedItem: ItemBody | null = null;\r\n  showItemParamElements: ShowItemParamElements;\r\n  frame: Phaser.GameObjects.Sprite;\r\n  inventoryStatus: InventoryStatuses = \"close\";\r\n  allItems = itemList();\r\n\r\n  cells: Phaser.GameObjects.Graphics[];\r\n  inventoryContainer: Phaser.GameObjects.Container;\r\n  displayedItems: ItemBody[];\r\n\r\n  pickButton: Phaser.GameObjects.Sprite | null = null;\r\n  barterButton: Phaser.GameObjects.Sprite | null = null;\r\n  barterMoveButton: Phaser.GameObjects.Sprite | null = null;\r\n\r\n  constructor(scene: DefaultScene, params: CreateInventorySettings) {\r\n    const { width, height } = scene.game.config;\r\n    this.scene = scene;\r\n\r\n    this.list[0] =\r\n      { ...this.list[1] } =\r\n      { ...this.list[2] } =\r\n        { ...this.allItems[0] };\r\n    this.inventoryContainer = scene.add.container(0, 0).setScrollFactor(0);\r\n    this.frame = scene.add.sprite(-100, -100, \"frame\").setOrigin(0, 0);\r\n\r\n    const sceneSizes = {\r\n      w: Number(width),\r\n      h: Number(height),\r\n    };\r\n\r\n    const createShowItemParamElements = () => {\r\n      const elementNames: (keyof ShowItemParamElements)[] = [\r\n        \"coolDown\",\r\n        \"defence\",\r\n        \"attack\",\r\n        \"speed\",\r\n        \"hp\",\r\n      ];\r\n      const elements: ShowItemParamElements = {};\r\n\r\n      elementNames.forEach((name) => {\r\n        const element = scene.add\r\n          .text(sceneSizes.w - 30, paramTextYPosition, \"\")\r\n          .setOrigin(1, 0.5);\r\n        elements[name] = element;\r\n      });\r\n\r\n      return elements;\r\n    };\r\n\r\n    this.showItemParamElements = createShowItemParamElements();\r\n\r\n    const margin = 15,\r\n      shape = scene.make.graphics({}),\r\n      mask = shape.createGeometryMask(),\r\n      container = this.inventoryContainer,\r\n      background = scene.add\r\n        .sprite(sceneSizes.w / 2, sceneSizes.h / 2, \"inventoryBG\")\r\n        .setOrigin(0.5)\r\n        .setInteractive()\r\n        .on(\"pointerdown\", () => null);\r\n\r\n    this.cells = createCells(scene);\r\n\r\n    shape\r\n      .fillRect(\r\n        margin, //start x\r\n        margin, //start y\r\n        sceneSizes.w - margin * 2, //width\r\n        sceneSizes.h - margin * 2 //height\r\n      )\r\n      .setScrollFactor(0);\r\n\r\n    const paramsElements: Phaser.GameObjects.Text[] = Object.values(\r\n      this.showItemParamElements\r\n    );\r\n    container\r\n      .add([background, ...this.cells, ...paramsElements, this.frame])\r\n      .setMask(mask)\r\n      .setAlpha(0);\r\n\r\n    this.elements = {\r\n      background,\r\n      container,\r\n      mask,\r\n    };\r\n\r\n    this.elements.uiButton = scene.add.sprite(sceneSizes.w, 0, params.img);\r\n    this.elements.uiButton.setOrigin(1, 0).setScrollFactor(0).setInteractive();\r\n\r\n    this.elements.uiButton.on(\"pointerdown\", () => {\r\n      switch (this.inventoryStatus) {\r\n        case \"close\":\r\n          this.openInventory();\r\n          break;\r\n\r\n        case \"open\":\r\n        case \"barter\":\r\n          this.closeInventory();\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  openInventory() {\r\n    this.inventoryStatus = \"open\";\r\n    this.pickButton = createButton(this.scene, \"pick\", 0).setAlpha(1);\r\n\r\n    this.displayedItems = createItems(\r\n      this.scene,\r\n      this.cells,\r\n      this.list,\r\n      itemCallBack.bind(this)\r\n    );\r\n    this.inventoryContainer.add([...this.displayedItems, this.pickButton]);\r\n\r\n    this.elements.container.setAlpha(1);\r\n    this.pickButton.on(\"pointerup\", () => {\r\n      const player = this.scene.player;\r\n      console.log(\r\n        \"🚀 ~ file: index.ts ~ line 154 ~ Inventory ~ this.pickButton.on ~ player\",\r\n        player\r\n      );\r\n\r\n      if (this.checkedItem) {\r\n        const selectedSlot = this.checkedItem.params.slot;\r\n        this.displayedItems.forEach((item) => {\r\n          if (\r\n            item.params.slot === selectedSlot &&\r\n            item.params !== this.checkedItem?.params\r\n          ) {\r\n            item.params.picked = false;\r\n            item.clearTint();\r\n\r\n            if (item.params.params) {\r\n              setUserParams(player, item.params.params, \"clear\");\r\n            }\r\n          }\r\n        });\r\n\r\n        this.checkedItem.params.picked = !this.checkedItem.params.picked;\r\n        if (this.checkedItem.params.picked) {\r\n          this.checkedItem.setTint(0x87ff4b);\r\n        } else {\r\n          this.checkedItem.clearTint();\r\n        }\r\n\r\n        const newUserParams: ItemParams = {\r\n          attack: player.skills.attack,\r\n          defence: player.skills.armor,\r\n          hp: player.skills.health,\r\n          speed: player.skills.speed,\r\n          coolDown: player.skills.coolDown,\r\n        };\r\n\r\n        this.list.forEach((value) => {\r\n          if (value.picked) {\r\n            for (const key in value.params) {\r\n              //@ts-ignore\r\n              const paramValue: number = value.params[key];\r\n              //@ts-ignore\r\n              if (newUserParams[key]) {\r\n                //@ts-ignore\r\n                newUserParams[key] += paramValue;\r\n              } else {\r\n                //@ts-ignore\r\n                newUserParams[key] = paramValue;\r\n              }\r\n            }\r\n          }\r\n        });\r\n        setUserParams(player, newUserParams, \"set\");\r\n      }\r\n    });\r\n  }\r\n  openBarter(list: Item[], changeList: (newList: Item[]) => void) {\r\n    this.elements.uiButton?.setTexture(\"uiInventoryBox\");\r\n\r\n    let barterShowedElements: \"box\" | \"player\" = \"box\";\r\n    this.inventoryStatus = \"barter\";\r\n    this.displayedItems = createItems(\r\n      this.scene,\r\n      this.cells,\r\n      list,\r\n      itemCallBack.bind(this)\r\n    );\r\n\r\n    this.barterButton = createButton(this.scene, \"open\", 0).setAlpha(1);\r\n    this.barterMoveButton = createButton(this.scene, \"move\", 1).setAlpha(1);\r\n\r\n    this.barterButton.setDepth(this.inventoryContainer.length).on(\r\n      \"pointerup\",\r\n      (this.scene,\r\n      () => {\r\n        this.checkedItem = null;\r\n        clearParams(this.showItemParamElements);\r\n        this.frame.setPosition(-100, -100);\r\n\r\n        switch (barterShowedElements) {\r\n          case \"player\":\r\n            this.elements.uiButton?.setTexture(\"uiInventoryBox\");\r\n\r\n            clearItems(this.displayedItems);\r\n            this.displayedItems = createItems(\r\n              this.scene,\r\n              this.cells,\r\n              list,\r\n              itemCallBack.bind(this)\r\n            );\r\n            this.inventoryContainer.add([...this.displayedItems]);\r\n            barterShowedElements = \"box\";\r\n            break;\r\n\r\n          case \"box\":\r\n            this.elements.uiButton?.setTexture(\"uiInventory\");\r\n\r\n            clearItems(this.displayedItems);\r\n            this.displayedItems = createItems(\r\n              this.scene,\r\n              this.cells,\r\n              this.list,\r\n              itemCallBack.bind(this)\r\n            );\r\n            this.inventoryContainer.add([...this.displayedItems]);\r\n            barterShowedElements = \"player\";\r\n            break;\r\n\r\n          default:\r\n            this.elements.uiButton?.setTexture(\"uiInventory\");\r\n            break;\r\n        }\r\n      })\r\n    );\r\n\r\n    this.barterMoveButton.setDepth(this.inventoryContainer.length).on(\r\n      \"pointerup\",\r\n      (this.scene,\r\n      () => {\r\n        setTimeout(() => {\r\n          switch (barterShowedElements) {\r\n            case \"player\":\r\n              if (this.checkedItem && !this.checkedItem.params.picked) {\r\n                const boxList = [...list];\r\n                const updatedList = this.list.filter((item, i) => {\r\n                  return this.displayedItems[i] !== this.checkedItem;\r\n                });\r\n                clearItems(this.displayedItems);\r\n                this.list = updatedList;\r\n                this.displayedItems = createItems(\r\n                  this.scene,\r\n                  this.cells,\r\n                  updatedList,\r\n                  itemCallBack.bind(this)\r\n                );\r\n                this.inventoryContainer.add([...this.displayedItems]);\r\n                boxList.push(this.checkedItem.params);\r\n                this.checkedItem = null;\r\n                this.frame.setPosition(-100, -100);\r\n                clearParams(this.showItemParamElements);\r\n                changeList(boxList);\r\n              }\r\n              break;\r\n\r\n            case \"box\":\r\n              if (this.checkedItem) {\r\n                const updatedList = list.filter((item, i) => {\r\n                  return this.displayedItems[i] !== this.checkedItem;\r\n                });\r\n                clearItems(this.displayedItems);\r\n                changeList(updatedList);\r\n                this.displayedItems = createItems(\r\n                  this.scene,\r\n                  this.cells,\r\n                  updatedList,\r\n                  itemCallBack.bind(this)\r\n                );\r\n                this.inventoryContainer.add([...this.displayedItems]);\r\n                this.list.push(this.checkedItem.params);\r\n                this.checkedItem = null;\r\n                this.frame.setPosition(-100, -100);\r\n                clearParams(this.showItemParamElements);\r\n              }\r\n\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }, 0);\r\n      })\r\n    );\r\n\r\n    this.inventoryContainer.add([...this.displayedItems]);\r\n    this.elements.container.setAlpha(1);\r\n  }\r\n  closeInventory() {\r\n    this.elements.uiButton?.setTexture(\"uiInventory\");\r\n\r\n    this.inventoryStatus = \"close\";\r\n    clearItems(this.displayedItems);\r\n    this.pickButton?.destroy();\r\n    this.barterButton?.destroy();\r\n    this.barterMoveButton?.destroy();\r\n    this.checkedItem = null;\r\n    this.frame.setPosition(-100, -100);\r\n    clearParams(this.showItemParamElements);\r\n\r\n    this.elements.container.setAlpha(0);\r\n\r\n    console.log(\"plaeyer\", this.scene.player);\r\n  }\r\n\r\n  createBox(\r\n    x: number,\r\n    y: number,\r\n    img: string,\r\n    params?: { random?: number; search?: number[] }\r\n  ): ItemBox {\r\n    const list: Item[] = [];\r\n    if (params) {\r\n      const { random, search } = params;\r\n      if (random) {\r\n        for (let index = 0; index < random; index++) {\r\n          const item =\r\n            this.allItems[PhaserMath.Between(0, this.allItems.length - 1)];\r\n          list.push({ ...item });\r\n        }\r\n      }\r\n\r\n      if (search) {\r\n        search.forEach((id) => {\r\n          const item = this.allItems[id];\r\n          list.push({ ...item });\r\n        });\r\n      }\r\n    }\r\n\r\n    const inventoryImg = this.scene.add\r\n      .sprite(x, y, img)\r\n      .setInteractive()\r\n      .on(\"pointerdown\", () => {\r\n        const pointerDistance = 60;\r\n        const player = this.scene.player;\r\n\r\n        if (\r\n          Math.abs(player.actor.x - inventoryImg.x) < pointerDistance &&\r\n          Math.abs(player.actor.y - inventoryImg.y) < pointerDistance &&\r\n          !player.mortal.enemy\r\n        ) {\r\n          const changeList = (newList: Item[]) => {\r\n            list.length = 0;\r\n            list.push(...newList);\r\n          };\r\n\r\n          this.openBarter(list, changeList);\r\n        }\r\n      });\r\n\r\n    return { img: inventoryImg, list };\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { AnimationConfig } from \"../types\";\r\n\r\nexport default function createAnimation(\r\n  this: Scene,\r\n  configs: AnimationConfig[]\r\n) {\r\n  configs.forEach((config) => {\r\n    const { key, frame } = config;\r\n    this.anims.create({\r\n      key,\r\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\r\n      frameRate: frame.frameRate,\r\n      repeat: frame.repeat,\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\n\r\nexport default function createCamera(\r\n  this: Scene,\r\n  actor: Phaser.GameObjects.GameObject | Object,\r\n  world: any\r\n) {\r\n  const camera = this.cameras.main;\r\n\r\n  camera\r\n    .setBounds(0, 0, Number(world.width), Number(world.height))\r\n    .startFollow(actor, true, 1, 1, 0, 0);\r\n\r\n  return camera;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CursorBorderType } from \"../../../types\";\r\n\r\nexport default function createCursor(\r\n  this: Scene,\r\n  x: number,\r\n  y: number,\r\n  size: number,\r\n  scale: number,\r\n  background: number,\r\n  border?: CursorBorderType | null,\r\n  camera?: Phaser.Cameras.Scene2D.Camera\r\n) {\r\n  const circle = this.add.circle(x, y, size, background);\r\n\r\n  if (border) {\r\n    const { color, size } = border;\r\n    circle.setStrokeStyle(size, color);\r\n  }\r\n\r\n  const tween = this.tweens.add({\r\n    delay: 0.1,\r\n    targets: circle,\r\n    scale: scale,\r\n    yoyo: false,\r\n    repeat: 0,\r\n    alpha: 0,\r\n    ease: \"Sine.easeInOut\",\r\n  });\r\n\r\n  this.input.on(\"pointerdown\", (pointer: any, element: any[]) => {\r\n    if (element.length) {\r\n      return;\r\n    }\r\n\r\n    let fehlerX = 0,\r\n      fehlerY = 0;\r\n\r\n    if (camera) {\r\n      fehlerX = camera.scrollX;\r\n      fehlerY = camera.scrollY;\r\n    }\r\n\r\n    circle.x = this.input.x + fehlerX;\r\n    circle.y = this.input.y + fehlerY;\r\n    tween.restart();\r\n  });\r\n\r\n  return circle;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { PreloadTypes } from \"../types\";\r\n\r\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\r\n  data.forEach((unit) => {\r\n    const { method, data } = unit;\r\n\r\n    data.forEach((content) => {\r\n      // @ts-ignore: Unreachable code error\r\n      const result = this.load[method](...content);\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CharactersPosterity } from \"../types\";\r\n\r\nconst accuracy = 50;\r\nexport function checkCharacterZIndex(\r\n  this: Scene,\r\n  characters: CharactersPosterity[]\r\n) {\r\n  const sortedCharacters = [...characters].sort(\r\n    (charA, charB) => charA.actor.y - charB.actor.y\r\n  );\r\n\r\n  sortedCharacters.forEach((char, i) => {\r\n    char.actor.setDepth(i);\r\n    char.elements.healthLine?.setDepth(i + 1);\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { LayersType } from \"../../types\";\r\n\r\nexport function createLayers(this: Scene): LayersType {\r\n  return {\r\n    ui: this.add.layer().setDepth(2),\r\n    gameElements: {\r\n      characters: this.add.layer().setDepth(1),\r\n    },\r\n  };\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CharactersPosterity } from \"../../types\";\r\n\r\nexport function addCharactersToLayer(\r\n  this: Scene,\r\n  characters: CharactersPosterity[],\r\n  layer: Phaser.GameObjects.Layer\r\n) {\r\n  characters.forEach((character) => {\r\n    const { actor, elements } = character;\r\n    layer.add(actor);\r\n    if (elements?.healthLine) {\r\n      layer.add(elements.healthLine);\r\n    }\r\n  });\r\n}\r\n","import { GameObjects, Scene } from \"phaser\";\r\nimport { LayerElementType } from \"../../types\";\r\n\r\nexport function addSpriteToLayer(\r\n  this: Scene,\r\n  element: LayerElementType[] | LayerElementType,\r\n  layer: GameObjects.Layer\r\n) {\r\n  const elementList: LayerElementType[] = [];\r\n  if (Array.isArray(element)) {\r\n    elementList.push(...element);\r\n  } else {\r\n    elementList.push(element);\r\n  }\r\n\r\n  elementList.forEach((el) => layer.add(el));\r\n}\r\n","import {\r\n  createAnimation,\r\n  createCamera,\r\n  createCursor,\r\n  createEnemy,\r\n  createPlayer,\r\n  createWorld,\r\n} from \"./create\";\r\nimport {\r\n  CreateGameTypes,\r\n  LayersType,\r\n  LoadGameTypes,\r\n  UpdateGameTypes,\r\n} from \"./types\";\r\nimport { preloadData } from \"./load/preload\";\r\nimport DefaultScene from \"../service/scenes/DefaultScene\";\r\nimport { checkCharacterZIndex } from \"./update\";\r\nimport { createInventory } from \"./create/inventory\";\r\nimport { createLayers } from \"./create/layers\";\r\nimport { addCharactersToLayer } from \"./create/layers/addCharacters\";\r\nimport { addSpriteToLayer } from \"./create/layers/addUi\";\r\n\r\nexport default class Game {\r\n  scene: DefaultScene;\r\n  load: LoadGameTypes;\r\n  create: CreateGameTypes;\r\n  update: UpdateGameTypes;\r\n\r\n  layers: LayersType | undefined;\r\n\r\n  constructor(scene: DefaultScene) {\r\n    this.scene = scene;\r\n    this.load = {\r\n      preload: preloadData.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n    };\r\n    this.create = {\r\n      world: createWorld.bind(this.scene),\r\n      player: createPlayer.bind(this.scene),\r\n      enemy: createEnemy.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n      camera: createCamera.bind(this.scene),\r\n      inventory: createInventory.bind(this.scene),\r\n      layers: createLayers.bind(this.scene),\r\n\r\n      addToLayer: {\r\n        characters: addCharactersToLayer.bind(this.scene),\r\n        sprites: addSpriteToLayer.bind(this.scene),\r\n      },\r\n      ui: {\r\n        cursor: createCursor.bind(this.scene),\r\n      },\r\n    };\r\n    this.update = {\r\n      check: {\r\n        characterZIndex: checkCharacterZIndex.bind(this.scene),\r\n      },\r\n    };\r\n  }\r\n\r\n  addListeners(event: string | symbol, callBack: () => void) {\r\n    this.scene.input.on(event, callBack);\r\n  }\r\n}\r\n","export const goingFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 3,\r\n  },\r\n  frameRate: 6,\r\n  repeat: -1,\r\n};\r\n\r\nexport const fightFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 22,\r\n  },\r\n  frameRate: 15,\r\n  repeat: -1,\r\n};\r\n","import { AnimationConfig } from \"../../../../../game/types\";\r\nimport { fightFrames, goingFrames } from \"./settings\";\r\n\r\nexport const animationList: AnimationConfig[] = [\r\n  {\r\n    key: \"playerGoUp\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoDown\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoLeft\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoRight\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieU\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieD\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieL\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieR\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"clawsFight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"claws\",\r\n    },\r\n  },\r\n  {\r\n    key: \"sword_1Fight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"sword_1\",\r\n    },\r\n  },\r\n];\r\n","import { EnemyListConfig } from \"../../../../game/types\";\r\n\r\nexport const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\r\n\r\nexport const enemyList: EnemyListConfig[] = [\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 250,\r\n      y: 510,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n];\r\n","import { SimpleObject } from \"../../../../game/types\";\r\n\r\nexport const objects: SimpleObject[] = [];\r\n","export const characterData = {\r\n  frame: {\r\n    frameWidth: 20,\r\n    frameHeight: 45,\r\n    startFrame: 0,\r\n    endFrame: 3,\r\n  },\r\n  player: \"game/assets/img/DefaultScene/characters/player/\",\r\n  zombie: \"game/assets/img/DefaultScene/characters/enemies/zombie/\",\r\n};\r\n\r\nconst effectsPath = \"game/assets/img/DefaultScene/effects/\";\r\n\r\nexport const fightEffects = {\r\n  path: `${effectsPath}fight/`,\r\n  claws: {\r\n    name: \"claws.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 22,\r\n    },\r\n  },\r\n  sword_1: {\r\n    name: \"sword_1.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 23,\r\n    },\r\n  },\r\n};\r\n","import { PreloadTypes } from \"../../../../../game/types\";\r\nimport { characterData, fightEffects } from \"./preloadSettings\";\r\n\r\nconst assets = \"game/assets/\";\r\n\r\nconst data: PreloadTypes[] = [\r\n  {\r\n    method: \"image\",\r\n    data: [\r\n      // any/worlds:\r\n      [\"exampleGrassTile\", assets + \"img/DefaultScene/grass.png\"],\r\n      [\"frame\", assets + \"img/general/frame.png\"],\r\n      [\"empty\", assets + \"img/general/emptyLayers.png\"],\r\n      [\"inventoryBox\", assets + \"img/general/items/box.png\"],\r\n\r\n      //inventory:\r\n      // > inv elements\r\n      [\"inventoryElement_1\", assets + \"img/general/items/body/1.png\"],\r\n      [\"inventoryElement_2\", assets + \"img/general/items/arm/1.png\"],\r\n      // > inv UI\r\n      [\"inventoryBG\", assets + \"img/general/ui/inventoryBG.png\"],\r\n      // >> inv buttons\r\n      [\"uiInventory\", assets + \"img/general/ui/inventory.png\"],\r\n      [\"uiInventoryBox\", assets + \"img/general/ui/box.png\"],\r\n      [\"barterButton\", assets + \"img/general/b_button.png\"],\r\n      [\"moveButton\", assets + \"img/general/to_button.png\"],\r\n      [\"pickButton\", assets + \"img/general/pick_button.png\"],\r\n\r\n      //portraits:\r\n      [\"playerPortrait\", assets + \"img/DefaultScene/portraits/player.jpg\"],\r\n    ],\r\n  },\r\n  {\r\n    method: \"tilemapCSV\",\r\n    data: [[\"exampleGrid\", assets + \"grids/DefaultScene/grass.csv\"]],\r\n  },\r\n  {\r\n    method: \"spritesheet\",\r\n    data: [\r\n      [\"playerLeft\", `${characterData.player}p_left.png`, characterData.frame],\r\n      [\r\n        \"playerRight\",\r\n        `${characterData.player}p_right.png`,\r\n        characterData.frame,\r\n      ],\r\n      [\r\n        \"playerDown\",\r\n        `${characterData.player}p_down.png`,\r\n        { ...characterData.frame, frameHeight: 44 },\r\n      ],\r\n      [\r\n        \"playerUp\",\r\n        `${characterData.player}p_up.png`,\r\n        { ...characterData.frame, frameHeight: 44, frameWidth: 19 },\r\n      ],\r\n\r\n      [\r\n        \"zombieLeft\",\r\n        `${characterData.zombie}p_left.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\r\n        \"zombieRight\",\r\n        `${characterData.zombie}p_right.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\"zombieUp\", `${characterData.zombie}p_up.png`, characterData.frame],\r\n      [\"zombieDown\", `${characterData.zombie}p_down.png`, characterData.frame],\r\n      [\r\n        \"claws\",\r\n        `${fightEffects.path}${fightEffects.claws.name}`,\r\n        fightEffects.claws.frame,\r\n      ],\r\n      [\r\n        \"sword_1\",\r\n        `${fightEffects.path}${fightEffects.sword_1.name}`,\r\n        fightEffects.sword_1.frame,\r\n      ],\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import { Scene } from \"phaser\";\r\n\r\nimport Game from \"../../../game\";\r\nimport { CreateEnemy } from \"../../../game/create\";\r\nimport CreatePlayer from \"../../../game/create/player\";\r\nimport World from \"../../../game/create/world\";\r\nimport { addToLayer } from \"./configs/addToLayers\";\r\n\r\nimport { animationList } from \"./configs/animations\";\r\nimport { boxCreator } from \"./configs/boxCreator\";\r\nimport { collisionCellIds } from \"./configs/config\";\r\nimport enemyCreator, {\r\n  movementWatching as enemyMovement,\r\n  setDeath,\r\n} from \"./configs/enemy\";\r\nimport { objects } from \"./configs/objects\";\r\nimport preloadData from \"./configs/preloadData\";\r\n\r\nexport default class DefaultScene extends Scene {\r\n  engine: Game;\r\n  player: CreatePlayer;\r\n  world: World;\r\n  enemy: CreateEnemy[] = [];\r\n\r\n  state: {\r\n    cursor?: Phaser.GameObjects.Arc;\r\n    camera?: Phaser.Cameras.Scene2D.Camera;\r\n  };\r\n\r\n  constructor(config: string) {\r\n    super(config);\r\n    this.engine = new Game(this);\r\n    this.state = {};\r\n  }\r\n\r\n  preload() {\r\n    this.engine.load.preload(preloadData);\r\n  }\r\n  create() {\r\n    this.engine.layers = this.engine.create.layers();\r\n    this.engine.load.animation(animationList);\r\n    this.world = this.engine.create.world(\r\n      true,\r\n      \"exampleGrid\",\r\n      \"exampleGrassTile\",\r\n      32\r\n    );\r\n    this.world.addSimpleObjects(objects);\r\n\r\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, {\r\n      origin: [0.5, 0.8],\r\n      animation: {\r\n        movement: {\r\n          left: \"playerGoLeft\",\r\n          right: \"playerGoRight\",\r\n          top: \"playerGoUp\",\r\n          bottom: \"playerGoDown\",\r\n        },\r\n        sword: \"sword_1Fight\",\r\n      },\r\n      inventory: \"uiInventory\",\r\n    });\r\n\r\n    boxCreator(this, this.player.inventory);\r\n    enemyCreator(this);\r\n\r\n    this.state.camera = this.engine.create.camera(\r\n      this.player.actor,\r\n      this.world.world\r\n    );\r\n\r\n    this.state.cursor = this.engine.create.ui.cursor(\r\n      100,\r\n      100,\r\n      1,\r\n      25,\r\n      0xffffff,\r\n      null,\r\n      this.state.camera\r\n    );\r\n\r\n    this.engine.addListeners(\"pointerup\", () => {});\r\n    addToLayer(this);\r\n  }\r\n  update() {\r\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\r\n\r\n    this.engine.update.check.characterZIndex([\r\n      this.player,\r\n      ...Object.values(this.enemy),\r\n    ]);\r\n\r\n    enemyMovement(this);\r\n    setDeath(this);\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { Inventory } from \"../../../../game/create\";\r\n\r\nexport const boxCreator = (scene: Scene, inventory: Inventory) => {\r\n  //create boxes\r\n  const box = inventory.createBox(300, 100, \"inventoryBox\", {\r\n    random: 10,\r\n  });\r\n};\r\n","import DefaultScene from \"..\";\r\nimport { collisionCellIds, enemyList } from \"./config\";\r\n\r\nexport default function create(scene: DefaultScene) {\r\n  enemyList.forEach((enemyUnit) => {\r\n    const { name, config, animations } = enemyUnit;\r\n    scene.enemy.push(\r\n      scene.engine.create.enemy(\r\n        config.x,\r\n        config.y,\r\n        config.spriteSheet,\r\n        config.textureFrame,\r\n        animations,\r\n        {\r\n          origin: config.origin,\r\n          vision: 150,\r\n          speed: 100,\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n\r\nexport function movementWatching(scene: DefaultScene) {\r\n  for (const [name, character] of Object.entries(scene.enemy)) {\r\n    character.watching([scene.player], collisionCellIds);\r\n  }\r\n}\r\n\r\nexport function setDeath(scene: DefaultScene) {\r\n  scene.enemy.filter((enemy) => enemy.mortal.fight.health >= 0);\r\n}\r\n","import DefaultScene from \"../..\";\r\nimport { addUIListToLayers } from \"./config\";\r\n\r\nexport function addToLayer(scene: DefaultScene) {\r\n  const addList = scene.engine.create.addToLayer;\r\n  if (scene.engine.layers) {\r\n    addList.characters(\r\n      [...scene.enemy, scene.player],\r\n      scene.engine.layers.gameElements.characters\r\n    );\r\n\r\n    addList.sprites(addUIListToLayers(scene), scene.engine.layers.ui);\r\n  }\r\n}\r\n","import DefaultScene from \"../..\";\r\nimport { LayerElementType } from \"../../../../../game/types\";\r\n\r\nexport const addUIListToLayers = (scene: DefaultScene) => {\r\n  const result: LayerElementType[] = [\r\n    scene.player.inventory.elements.container,\r\n  ];\r\n\r\n  if (scene.player.inventory.elements.uiButton) {\r\n    result.push(scene.player.inventory.elements.uiButton);\r\n  }\r\n\r\n  for (let i = 0; i < result.length; i++) {\r\n    const element = result[i];\r\n    element.setDepth(i);\r\n  }\r\n\r\n  return result;\r\n};\r\n","import DefaultScene from \"./scenes/DefaultScene\";\r\n\r\nconst groundSpriteSize = 32;\r\nconst minGroundNumber = 15;\r\nconst size = groundSpriteSize * minGroundNumber;\r\n\r\nexport const config = {\r\n  type: Phaser.AUTO,\r\n  parent: \"game-box\",\r\n  width: size,\r\n  height: size,\r\n  scene: [DefaultScene],\r\n  backgroundColor: 0x14003b,\r\n  // transparent: true\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      // debug: true,\r\n    },\r\n  },\r\n};\r\n","import React, { useEffect, useLayoutEffect } from \"react\";\r\nimport { renderGame } from \"../../game-modules\";\r\nimport css from \"./style.module.scss\";\r\n\r\nlet game: Phaser.Game | null = null;\r\n\r\nexport const Game = () => {\r\n  useLayoutEffect(() => {\r\n    game = renderGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      game?.destroy(true, true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"game-box\"></div>\r\n    </div>\r\n  );\r\n};\r\n","import Phaser from \"phaser\";\r\n\r\nimport { config } from \"./service/config\";\r\n\r\nexport const renderGame = () => new Phaser.Game(config);\r\n","import \"./App.css\";\r\nimport { Game } from \"./components/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}
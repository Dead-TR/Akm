{"version":3,"sources":["game-modules/game/config.ts","game-modules/game/create/character.ts","game-modules/game/create/enemy/index.ts","game-modules/game/create/player/index.ts","game-modules/game/create/world.ts","game-modules/game/create/animation.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/load/preload.ts","game-modules/game/update/checkCharacterZIndex.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations/settings.ts","game-modules/service/scenes/DefaultScene/configs/animations/index.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/preloadSettings.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/index.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/scenes/DefaultScene/configs/enemy.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["baseGameConfig","health","width","height","CreateCharacter","scene","x","y","spriteSheet","textureFrame","params","actor","animations","armor","attack","speed","coolDown","elements","healthLine","mortal","sword","enemy","target","fight","collision","top","calc","blocked","bottom","left","right","this","physics","add","sprite","origin","setOrigin","destroy","isFight","active","setDepth","depth","originX","originY","play","healthPercent","scaleX","damage","setDeath","world","optional","key","value","valueLine","coordinates","worldIndex","getTileAtWorldXY","index","id","indexOf","characters","forEach","character","checkCoordinates","Object","entries","direction","accuracy","xSide","ySide","setVelocityX","setVelocityY","graphics","lineStyle","healthLineY","beginPath","moveTo","lineTo","closePath","strokePath","side","movement","anims","isPaused","currentAnim","pause","frames","createEnemy","CreateEnemy","visionDistance","vision","char","createHealth","enemies","undefined","find","xDifference","Math","abs","yDifference","Infinity","checkCollision","createCollision","movementAnimation","enemyOnAttackDistance","mortalAnimationPlay","mortalCalculate","createPlayer","CreatePlayer","animation","cursor","creator","showWorld","gridName","imgName","size","gridTileMap","make","tilemap","tileHeight","tileWidth","gridTileSet","addTilesetImage","createStaticLayer","World","objects","call","configs","config","name","image","createWorld","createAnimation","frame","create","generateFrameNumbers","ways","frameRate","repeat","createCamera","camera","cameras","main","setBounds","Number","startFollow","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","fehlerX","fehlerY","scrollX","scrollY","restart","preloadData","data","unit","method","content","load","checkCharacterZIndex","sort","charA","charB","i","Game","update","preload","bind","player","ui","check","characterZIndex","event","callBack","goingFrames","start","end","fightFrames","animationList","collisionCellIds","enemyList","characterData","frameWidth","frameHeight","startFrame","endFrame","zombie","fightEffects","path","claws","sword_1","DefaultScene","engine","state","addSimpleObjects","enemyUnit","push","addListeners","move","values","watching","enemyMovement","filter","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","game","useLayoutEffect","useEffect","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e58ed12.chunk.js","sourcesContent":["export const baseGameConfig = {\r\n  colors: {\r\n    health: 0xff0000,\r\n  },\r\n  sizes: {\r\n    health: {\r\n      width: 30,\r\n      height: 5,\r\n    },\r\n  },\r\n};\r\n","import { Scene } from \"phaser\";\r\nimport { baseGameConfig } from \"../config\";\r\nimport {\r\n  AnimationsListType,\r\n  CharacterAnimationsList,\r\n  CharactersPosterity,\r\n  MortalTypes,\r\n  Sides,\r\n  CharacterElements,\r\n  OptionalCollisionParams,\r\n} from \"../types\";\r\n\r\nexport default class CreateCharacter {\r\n  actor;\r\n  scene: Scene;\r\n  animations?: CharacterAnimationsList;\r\n  params = {\r\n    health: 100,\r\n    armor: 10,\r\n    attack: 10,\r\n\r\n    speed: 100,\r\n    coolDown: 5,\r\n  };\r\n  elements: CharacterElements = {\r\n    healthLine: null,\r\n  };\r\n  mortal: MortalTypes = {\r\n    sword: null,\r\n    enemy: null,\r\n    target: {},\r\n\r\n    fight: {\r\n      health: 100,\r\n      coolDown: 50,\r\n    },\r\n  };\r\n  collision = {\r\n    top: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    bottom: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n    left: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    right: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    params: {\r\n      origin?: number[];\r\n      animations?: CharacterAnimationsList;\r\n    }\r\n  ) {\r\n    this.scene = scene;\r\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\r\n\r\n    if (params.origin) {\r\n      this.actor.setOrigin(...params.origin);\r\n    }\r\n  }\r\n\r\n  setDeath() {\r\n    this.mortal.sword?.destroy();\r\n    this.actor.x = -1000;\r\n    this.actor.destroy();\r\n    this.elements.healthLine?.destroy();\r\n    if (this.mortal.enemy) {\r\n      this.mortal.enemy.mortal.enemy = null;\r\n    }\r\n  }\r\n\r\n  mortalAnimationPlay(isFight?: boolean) {\r\n    if (!this.animations || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n    if (isFight) {\r\n      if (!this.mortal.sword || !this.mortal.sword.active) {\r\n        this.mortal.sword = this.scene.add\r\n          .sprite(this.actor.x, this.actor.y, \"\")\r\n          .setOrigin(this.actor.originX, this.actor.originY);\r\n\r\n        this.mortal.sword.play(this.animations.sword);\r\n      } else {\r\n        this.mortal.sword.x = this.actor.x;\r\n        this.mortal.sword.y = this.actor.y;\r\n        this.mortal.sword.setDepth(this.actor.depth + 1);\r\n      }\r\n    } else {\r\n      if (this.mortal.sword) {\r\n        this.mortal.sword.destroy();\r\n        this.mortal.sword = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  mortalCalculate(enemy?: CharactersPosterity) {\r\n    if (!enemy || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.elements.healthLine) {\r\n      const healthPercent = this.mortal.fight.health / this.params.health;\r\n      this.elements.healthLine.scaleX = healthPercent;\r\n    }\r\n\r\n    if (this.mortal.fight.coolDown === this.params.coolDown) {\r\n      this.mortal.fight.coolDown--;\r\n      const damage = this.params.attack - enemy.params.armor;\r\n      const minDamage = 0;\r\n      enemy.mortal.fight.health -= damage > 0 ? damage : minDamage;\r\n    } else {\r\n      this.mortal.fight.coolDown--;\r\n      if (this.mortal.fight.coolDown < 0) {\r\n        this.mortal.fight.coolDown = this.params.coolDown;\r\n      }\r\n    }\r\n\r\n    if (enemy.mortal.fight.health <= 0) {\r\n      enemy.setDeath();\r\n      this.mortal.enemy = null;\r\n      this.mortal.sword?.destroy();\r\n      this.mortal.sword = null;\r\n    }\r\n  }\r\n\r\n  checkCollision(\r\n    world: any,\r\n    collision: number[],\r\n    optional?: OptionalCollisionParams\r\n  ) {\r\n    for (const [key, value] of Object.entries(this.collision)) {\r\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\r\n\r\n      const coordinates = {\r\n        x: valueLine === \"x\" ? this.actor.x + value.calc : this.actor.x,\r\n        y: valueLine === \"y\" ? this.actor.y + value.calc : this.actor.y,\r\n      };\r\n\r\n      const worldIndex = world.getTileAtWorldXY(\r\n        coordinates.x,\r\n        coordinates.y,\r\n        false\r\n      )?.index;\r\n\r\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\r\n\r\n      if (!id || id !== -1) {\r\n        value.blocked = true;\r\n      } else {\r\n        value.blocked = false;\r\n      }\r\n\r\n      if (optional) {\r\n        if (optional.characters) {\r\n          optional.characters.forEach((character) => {\r\n            if (character.actor === this.actor || !character.actor.active) {\r\n              return;\r\n            }\r\n            const accuracy = 7;\r\n\r\n            const checkCoordinates = {\r\n              x:\r\n                character.actor.x <= coordinates.x + accuracy &&\r\n                character.actor.x >= coordinates.x - accuracy,\r\n              y:\r\n                character.actor.y <= coordinates.y + accuracy &&\r\n                character.actor.y >= coordinates.y - accuracy,\r\n            };\r\n            if (checkCoordinates.x && checkCoordinates.y) {\r\n              if (!value.blocked) {\r\n                value.blocked = true;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createCollision(params: {\r\n    direction: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    coordinates: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n  }) {\r\n    if (this.collision.right.blocked) {\r\n      if (params.direction.x > 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    } else if (this.collision.left.blocked) {\r\n      if (params.direction.x < 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    }\r\n\r\n    if (this.collision.bottom.blocked) {\r\n      if (params.direction.y > 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    } else if (this.collision.top.blocked) {\r\n      if (params.direction.y < 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    }\r\n  }\r\n\r\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\r\n    if (this.elements.healthLine) {\r\n      this.elements.healthLine.x = this.actor.x;\r\n      this.elements.healthLine.y = this.actor.y;\r\n    }\r\n\r\n    if (this.mortal.fight.health <= 0) {\r\n      return [\"stop\", \"stop\"];\r\n    }\r\n\r\n    const xSide =\r\n      this.actor.x - x < -accuracy\r\n        ? \"right\"\r\n        : this.actor.x - x > accuracy\r\n        ? \"left\"\r\n        : \"stop\";\r\n    const ySide =\r\n      this.actor.y - y < -accuracy\r\n        ? \"bottom\"\r\n        : this.actor.y - y > accuracy\r\n        ? \"top\"\r\n        : \"stop\";\r\n\r\n    if (xSide === \"right\") {\r\n      this.actor.setVelocityX(speed);\r\n    } else if (xSide === \"left\") {\r\n      this.actor.setVelocityX(-speed);\r\n    } else {\r\n      this.actor.setVelocityX(0);\r\n    }\r\n\r\n    if (ySide === \"bottom\") {\r\n      this.actor.setVelocityY(speed);\r\n    } else if (ySide === \"top\") {\r\n      this.actor.setVelocityY(-speed);\r\n    } else {\r\n      this.actor.setVelocityY(0);\r\n    }\r\n\r\n    return [xSide, ySide];\r\n  }\r\n\r\n  createHealth() {\r\n    const graphics = this.scene.add.graphics({\r\n      x: this.actor.x,\r\n      y: this.actor.y,\r\n    });\r\n    graphics.lineStyle(\r\n      baseGameConfig.sizes.health.height,\r\n      baseGameConfig.colors.health\r\n    );\r\n    const healthLineY =\r\n      baseGameConfig.sizes.health.height * -1 -\r\n      this.actor.height * this.actor.originY;\r\n\r\n    graphics.beginPath();\r\n    graphics.moveTo((baseGameConfig.sizes.health.width / 2) * -1, healthLineY);\r\n    graphics.lineTo(baseGameConfig.sizes.health.width / 2, healthLineY);\r\n    graphics.closePath();\r\n    graphics.strokePath();\r\n    graphics.setDepth(this.actor.depth + 2);\r\n\r\n    this.elements.healthLine = graphics;\r\n  }\r\n\r\n  movementAnimation(side: Sides[], movement?: AnimationsListType) {\r\n    if (!movement || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n    const [xSide, ySide] = side;\r\n\r\n    if (xSide !== \"stop\") {\r\n      if (this.actor.anims.isPaused) {\r\n        this.actor.anims.play(this.actor.anims.currentAnim);\r\n      }\r\n\r\n      if (this.actor.anims.currentAnim?.key !== movement[xSide]) {\r\n        this.actor.anims.play(movement[xSide]);\r\n      }\r\n    } else if (ySide !== \"stop\") {\r\n      if (this.actor.anims.isPaused) {\r\n        this.actor.anims.play(this.actor.anims.currentAnim);\r\n      }\r\n\r\n      if (this.actor.anims.currentAnim?.key !== movement[ySide]) {\r\n        this.actor.anims.play(movement[ySide]);\r\n      }\r\n    } else {\r\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { CharactersPosterity, EnemyAnimationsList } from \"../../types\";\r\n\r\nimport CreateCharacter from \".././character\";\r\n\r\nexport function createEnemy(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  animations: EnemyAnimationsList,\r\n  params?: {\r\n    origin?: number[];\r\n    vision?: number;\r\n    char?: {\r\n      speed: number;\r\n      health: number;\r\n      armor: number;\r\n      attack: number;\r\n      coolDown: number;\r\n    };\r\n  }\r\n) {\r\n  return new CreateEnemy(\r\n    this,\r\n    x,\r\n    y,\r\n    spriteSheet,\r\n    textureFrame,\r\n    animations,\r\n    params\r\n  );\r\n}\r\n\r\nexport default class CreateEnemy extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  visionDistance = 100;\r\n  animations: EnemyAnimationsList;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    animations: EnemyAnimationsList,\r\n\r\n    params?: {\r\n      origin?: number[];\r\n      vision?: number;\r\n      char?: {\r\n        speed: number;\r\n        health: number;\r\n        armor: number;\r\n        attack: number;\r\n        coolDown: number;\r\n      };\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, {\r\n      origin: params?.origin,\r\n      animations: animations,\r\n    });\r\n    this.scene = scene;\r\n    this.visionDistance = params?.vision || this.visionDistance;\r\n\r\n    this.animations = animations;\r\n\r\n    if (params?.char) {\r\n      this.params = params.char;\r\n    }\r\n\r\n    this.createHealth();\r\n  }\r\n\r\n  watching(enemies: CharactersPosterity[], collision?: number[]) {\r\n    let accuracy = 15;\r\n    const fightDistance = 14;\r\n\r\n    let target: CharactersPosterity | undefined = undefined;\r\n\r\n    if (!target) {\r\n      target = enemies.find((enemy) => {\r\n        const xDifference = Math.abs(enemy.actor.x - this.actor.x);\r\n        const yDifference = Math.abs(enemy.actor.y - this.actor.y);\r\n        return (\r\n          xDifference < this.visionDistance && yDifference < this.visionDistance\r\n        );\r\n      });\r\n    }\r\n    if (target) {\r\n      this.visionDistance = Infinity;\r\n      const params = {\r\n        direction: {\r\n          x: target.actor.x - this.actor.x,\r\n          y: target.actor.y - this.actor.y,\r\n        },\r\n        coordinates: {\r\n          x: target.actor.x,\r\n          y: target.actor.y,\r\n        },\r\n      };\r\n\r\n      if (collision) {\r\n        this.checkCollision(this.scene.world.world, collision, {\r\n          characters: this.scene.enemy,\r\n        });\r\n        this.createCollision(params);\r\n      }\r\n      const side = super.move(\r\n        params.coordinates.x,\r\n        params.coordinates.y,\r\n        this.params.speed,\r\n        accuracy\r\n      );\r\n\r\n      if (this.animations.movement) {\r\n        const movement = this.animations.movement;\r\n\r\n        this.movementAnimation(side, movement);\r\n      }\r\n\r\n      const enemyOnAttackDistance =\r\n        Math.abs(params.direction.x) <= fightDistance &&\r\n        Math.abs(params.direction.y) <= fightDistance;\r\n\r\n      this.mortalAnimationPlay(enemyOnAttackDistance);\r\n\r\n      if (enemyOnAttackDistance) {\r\n        this.mortalCalculate(target);\r\n        if (!target.mortal.enemy) {\r\n          target.mortal.enemy = this;\r\n        }\r\n      } else {\r\n        if (target.mortal.enemy?.actor === this.actor) {\r\n          target.mortal.enemy = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { CharacterAnimationsList } from \"../../types\";\r\nimport CreateCharacter from \"../character\";\r\n\r\nlet test: any;\r\nexport function createPlayer(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  params: {\r\n    origin?: number[];\r\n    animation: CharacterAnimationsList;\r\n  }\r\n) {\r\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, params);\r\n}\r\n\r\nexport default class CreatePlayer extends CreateCharacter {\r\n  scene: DefaultScene;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    params: {\r\n      origin?: number[];\r\n      animation: CharacterAnimationsList;\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, {\r\n      origin: params?.origin,\r\n      animations: params.animation,\r\n    });\r\n    this.scene = scene;\r\n    this.animations = params.animation;\r\n\r\n    this.params = {\r\n      health: 100,\r\n      armor: 999999999999999,\r\n      attack: 11,\r\n      coolDown: 0,\r\n      speed: 100,\r\n    };\r\n  }\r\n\r\n  //@ts-ignore\r\n  move(cursor: any, world: any, collision: number[]) {\r\n    let accuracy = 5;\r\n\r\n    this.checkCollision(world, collision);\r\n    const params = {\r\n      direction: {\r\n        x: cursor.x - this.actor.x,\r\n        y: cursor.y - this.actor.y,\r\n      },\r\n      coordinates: {\r\n        x: cursor.x,\r\n        y: cursor.y,\r\n      },\r\n    };\r\n\r\n    this.createCollision(params);\r\n\r\n    const side = super.move(\r\n      params.coordinates.x,\r\n      params.coordinates.y,\r\n      this.params.speed,\r\n      accuracy\r\n    );\r\n\r\n    this.movementAnimation(side, this.animations?.movement);\r\n    this.mortalAnimationPlay(!!this.mortal.enemy);\r\n\r\n    if (this.mortal.enemy) {\r\n      this.mortalCalculate(this.mortal.enemy);\r\n    }\r\n\r\n    return side;\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { SimpleObject } from \"../types\";\r\nexport function creator(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  const gridTileMap = this.make.tilemap({\r\n    key: gridName,\r\n    tileHeight: size,\r\n    tileWidth: size,\r\n  });\r\n\r\n  const gridTileSet = showWorld\r\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\r\n    : null;\r\n\r\n  // @ts-ignore\r\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\r\n\r\n  return tileLayer;\r\n}\r\n\r\nexport default class World {\r\n  world: any;\r\n  scene: Scene;\r\n  objects: {\r\n    [key: string]: Phaser.GameObjects.Image;\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    showWorld: boolean,\r\n    gridName: string,\r\n    imgName: string,\r\n    size: number\r\n  ) {\r\n    this.scene = scene;\r\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\r\n    this.objects = {};\r\n  }\r\n\r\n  addSimpleObjects(configs: SimpleObject[]) {\r\n    configs.forEach((config) => {\r\n      const { x, y, imgName, name } = config;\r\n      this.objects[name] = this.scene.add.image(x, y, imgName);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createWorld(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  return new World(this, showWorld, gridName, imgName, size);\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { AnimationConfig } from \"../types\";\r\n\r\nexport default function createAnimation(\r\n  this: Scene,\r\n  configs: AnimationConfig[]\r\n) {\r\n  configs.forEach((config) => {\r\n    const { key, frame } = config;\r\n    this.anims.create({\r\n      key,\r\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\r\n      frameRate: frame.frameRate,\r\n      repeat: frame.repeat,\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\n\r\nexport default function createCamera(\r\n  this: Scene,\r\n  actor: Phaser.GameObjects.GameObject | Object,\r\n  world: any\r\n) {\r\n  const camera = this.cameras.main;\r\n\r\n  camera\r\n    .setBounds(0, 0, Number(world.width), Number(world.height))\r\n    .startFollow(actor, true, 1, 1, 0, 0);\r\n\r\n  return camera;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CursorBorderType } from \"../../../types\";\r\n\r\nexport default function createCursor(\r\n  this: Scene,\r\n  x: number,\r\n  y: number,\r\n  size: number,\r\n  scale: number,\r\n  background: number,\r\n  border?: CursorBorderType | null,\r\n  camera?: Phaser.Cameras.Scene2D.Camera\r\n) {\r\n  const circle = this.add.circle(x, y, size, background);\r\n\r\n  if (border) {\r\n    const { color, size } = border;\r\n    circle.setStrokeStyle(size, color);\r\n  }\r\n\r\n  const tween = this.tweens.add({\r\n    delay: 0.1,\r\n    targets: circle,\r\n    scale: scale,\r\n    yoyo: false,\r\n    repeat: 0,\r\n    alpha: 0,\r\n    ease: \"Sine.easeInOut\",\r\n  });\r\n\r\n  this.input.on(\"pointerdown\", () => {\r\n    let fehlerX = 0,\r\n      fehlerY = 0;\r\n\r\n    if (camera) {\r\n      fehlerX = camera.scrollX;\r\n      fehlerY = camera.scrollY;\r\n    }\r\n\r\n    circle.x = this.input.x + fehlerX;\r\n    circle.y = this.input.y + fehlerY;\r\n    tween.restart();\r\n  });\r\n\r\n  return circle;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { PreloadTypes } from \"../types\";\r\n\r\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\r\n  data.forEach((unit) => {\r\n    const { method, data } = unit;\r\n\r\n    data.forEach((content) => {\r\n      // @ts-ignore: Unreachable code error\r\n      const result = this.load[method](...content);\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CharactersPosterity } from \"../types\";\r\n\r\nconst accuracy = 50;\r\nexport function checkCharacterZIndex(\r\n  this: Scene,\r\n  characters: CharactersPosterity[]\r\n) {\r\n  const sortedCharacters = [...characters].sort(\r\n    (charA, charB) => charA.actor.y - charB.actor.y\r\n  );\r\n\r\n  sortedCharacters.forEach((char, i) => {\r\n    char.actor.setDepth(i);\r\n    char.elements.healthLine?.setDepth(i + 1);\r\n  });\r\n}\r\n","import {\r\n  createAnimation,\r\n  createCamera,\r\n  createCursor,\r\n  createEnemy,\r\n  createPlayer,\r\n  createWorld,\r\n} from \"./create\";\r\nimport { CreateGameTypes, LoadGameTypes, UpdateGameTypes } from \"./types\";\r\nimport { preloadData } from \"./load/preload\";\r\nimport DefaultScene from \"../service/scenes/DefaultScene\";\r\nimport { checkCharacterZIndex } from \"./update\";\r\n\r\nexport default class Game {\r\n  scene: DefaultScene;\r\n  load: LoadGameTypes;\r\n  create: CreateGameTypes;\r\n  update: UpdateGameTypes;\r\n\r\n  constructor(scene: DefaultScene) {\r\n    this.scene = scene;\r\n    this.load = {\r\n      preload: preloadData.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n    };\r\n    this.create = {\r\n      world: createWorld.bind(this.scene),\r\n      player: createPlayer.bind(this.scene),\r\n      enemy: createEnemy.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n      camera: createCamera.bind(this.scene),\r\n\r\n      ui: {\r\n        cursor: createCursor.bind(this.scene),\r\n      },\r\n    };\r\n    this.update = {\r\n      check: {\r\n        characterZIndex: checkCharacterZIndex.bind(this.scene),\r\n      },\r\n    };\r\n  }\r\n\r\n  addListeners(event: string | symbol, callBack: () => void) {\r\n    this.scene.input.on(event, callBack);\r\n  }\r\n}\r\n","export const goingFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 3,\r\n  },\r\n  frameRate: 6,\r\n  repeat: -1,\r\n};\r\n\r\nexport const fightFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 22,\r\n  },\r\n  frameRate: 15,\r\n  repeat: -1,\r\n};\r\n","import { AnimationConfig } from \"../../../../../game/types\";\r\nimport { fightFrames, goingFrames } from \"./settings\";\r\n\r\nexport const animationList: AnimationConfig[] = [\r\n  {\r\n    key: \"playerGoUp\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoDown\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoLeft\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoRight\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieU\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieD\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieL\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieR\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"clawsFight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"claws\",\r\n    },\r\n  },\r\n  {\r\n    key: \"sword_1Fight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"sword_1\",\r\n    },\r\n  },\r\n];\r\n","import { EnemyListConfig } from \"../../../../game/types\";\r\n\r\nexport const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\r\n\r\nexport const enemyList: EnemyListConfig[] = [\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 250,\r\n      y: 510,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 120,\r\n      y: 300,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 150,\r\n      y: 550,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 350,\r\n      y: 175,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 400,\r\n      y: 410,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 430,\r\n      y: 350,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n];\r\n","import { SimpleObject } from \"../../../../game/types\";\r\n\r\nexport const objects: SimpleObject[] = [];\r\n","export const characterData = {\r\n  frame: {\r\n    frameWidth: 20,\r\n    frameHeight: 45,\r\n    startFrame: 0,\r\n    endFrame: 3,\r\n  },\r\n  player: \"game/assets/img/DefaultScene/characters/player/\",\r\n  zombie: \"game/assets/img/DefaultScene/characters/enemies/zombie/\",\r\n};\r\n\r\nconst effectsPath = \"game/assets/img/DefaultScene/effects/\";\r\n\r\nexport const fightEffects = {\r\n  path: `${effectsPath}fight/`,\r\n  claws: {\r\n    name: \"claws.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 22,\r\n    },\r\n  },\r\n  sword_1: {\r\n    name: \"sword_1.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 23,\r\n    },\r\n  },\r\n};\r\n","import { PreloadTypes } from \"../../../../../game/types\";\r\nimport { characterData, fightEffects } from \"./preloadSettings\";\r\n\r\nconst data: PreloadTypes[] = [\r\n  {\r\n    method: \"image\",\r\n    data: [\r\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\r\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\r\n      [\"empty\", \"game/assets/img/general/emptyLayers.png\"],\r\n    ],\r\n  },\r\n  {\r\n    method: \"tilemapCSV\",\r\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\r\n  },\r\n  {\r\n    method: \"spritesheet\",\r\n    data: [\r\n      [\"playerLeft\", `${characterData.player}p_left.png`, characterData.frame],\r\n      [\r\n        \"playerRight\",\r\n        `${characterData.player}p_right.png`,\r\n        characterData.frame,\r\n      ],\r\n      [\r\n        \"playerDown\",\r\n        `${characterData.player}p_down.png`,\r\n        { ...characterData.frame, frameHeight: 44 },\r\n      ],\r\n      [\r\n        \"playerUp\",\r\n        `${characterData.player}p_up.png`,\r\n        { ...characterData.frame, frameHeight: 44, frameWidth: 19 },\r\n      ],\r\n\r\n      [\r\n        \"zombieLeft\",\r\n        `${characterData.zombie}p_left.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\r\n        \"zombieRight\",\r\n        `${characterData.zombie}p_right.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\"zombieUp\", `${characterData.zombie}p_up.png`, characterData.frame],\r\n      [\"zombieDown\", `${characterData.zombie}p_down.png`, characterData.frame],\r\n      [\r\n        \"claws\",\r\n        `${fightEffects.path}${fightEffects.claws.name}`,\r\n        fightEffects.claws.frame,\r\n      ],\r\n      [\r\n        \"sword_1\",\r\n        `${fightEffects.path}${fightEffects.sword_1.name}`,\r\n        fightEffects.sword_1.frame,\r\n      ],\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import { Scene } from \"phaser\";\r\n\r\nimport Game from \"../../../game\";\r\nimport { CreateEnemy } from \"../../../game/create\";\r\nimport CreatePlayer from \"../../../game/create/player\";\r\nimport World from \"../../../game/create/world\";\r\n\r\nimport { animationList } from \"./configs/animations\";\r\nimport { collisionCellIds } from \"./configs/config\";\r\nimport enemyCreator, {\r\n  movementWatching as enemyMovement,\r\n  setDeath,\r\n} from \"./configs/enemy\";\r\nimport { objects } from \"./configs/objects\";\r\nimport preloadData from \"./configs/preloadData\";\r\n\r\nexport default class DefaultScene extends Scene {\r\n  engine: Game;\r\n  player: CreatePlayer;\r\n  world: World;\r\n  enemy: CreateEnemy[] = [];\r\n\r\n  state: {\r\n    cursor?: Phaser.GameObjects.Arc;\r\n    camera?: Phaser.Cameras.Scene2D.Camera;\r\n  };\r\n\r\n  constructor(config: string) {\r\n    super(config);\r\n    this.engine = new Game(this);\r\n    this.state = {};\r\n  }\r\n\r\n  preload() {\r\n    this.engine.load.preload(preloadData);\r\n  }\r\n  create() {\r\n    this.engine.load.animation(animationList);\r\n    this.world = this.engine.create.world(\r\n      true,\r\n      \"exampleGrid\",\r\n      \"exampleGrassTile\",\r\n      32\r\n    );\r\n    this.world.addSimpleObjects(objects);\r\n\r\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, {\r\n      origin: [0.5, 0.8],\r\n      animation: {\r\n        movement: {\r\n          left: \"playerGoLeft\",\r\n          right: \"playerGoRight\",\r\n          top: \"playerGoUp\",\r\n          bottom: \"playerGoDown\",\r\n        },\r\n        sword: \"sword_1Fight\",\r\n      },\r\n    });\r\n    enemyCreator(this);\r\n\r\n    this.state.camera = this.engine.create.camera(\r\n      this.player.actor,\r\n      this.world.world\r\n    );\r\n\r\n    this.state.cursor = this.engine.create.ui.cursor(\r\n      100,\r\n      100,\r\n      1,\r\n      25,\r\n      0xffffff,\r\n      null,\r\n      this.state.camera\r\n    );\r\n\r\n    this.engine.addListeners(\"pointerup\", () => {});\r\n  }\r\n  update() {\r\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\r\n\r\n    this.engine.update.check.characterZIndex([\r\n      this.player,\r\n      ...Object.values(this.enemy),\r\n    ]);\r\n\r\n    enemyMovement(this);\r\n    setDeath(this);\r\n  }\r\n}\r\n","import DefaultScene from \"..\";\r\nimport { collisionCellIds, enemyList } from \"./config\";\r\n\r\nexport default function create(scene: DefaultScene) {\r\n  enemyList.forEach((enemyUnit) => {\r\n    const { name, config, animations } = enemyUnit;\r\n    scene.enemy.push(\r\n      scene.engine.create.enemy(\r\n        config.x,\r\n        config.y,\r\n        config.spriteSheet,\r\n        config.textureFrame,\r\n        animations,\r\n        {\r\n          origin: config.origin,\r\n          vision: 150,\r\n          speed: 100,\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n\r\nexport function movementWatching(scene: DefaultScene) {\r\n  for (const [name, character] of Object.entries(scene.enemy)) {\r\n    character.watching([scene.player], collisionCellIds);\r\n  }\r\n}\r\n\r\nexport function setDeath(scene: DefaultScene) {\r\n  scene.enemy.filter((enemy) => enemy.mortal.fight.health >= 0);\r\n}\r\n","import DefaultScene from \"./scenes/DefaultScene\";\r\n\r\nconst groundSpriteSize = 32;\r\nconst minGroundNumber = 15;\r\nconst size = groundSpriteSize * minGroundNumber;\r\n\r\nexport const config = {\r\n  type: Phaser.AUTO,\r\n  parent: \"game-box\",\r\n  width: size,\r\n  height: size,\r\n  scene: [DefaultScene],\r\n  backgroundColor: 0x14003b,\r\n  // transparent: true\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      // debug: true,\r\n    },\r\n  },\r\n};\r\n","import React, { useEffect, useLayoutEffect } from \"react\";\r\nimport { renderGame } from \"../../game-modules\";\r\nimport css from \"./style.module.scss\";\r\n\r\nlet game: Phaser.Game | null = null;\r\n\r\nexport const Game = () => {\r\n  useLayoutEffect(() => {\r\n    game = renderGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      game?.destroy(true, true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"game-box\"></div>\r\n    </div>\r\n  );\r\n};\r\n","import Phaser from \"phaser\";\r\n\r\nimport { config } from \"./service/config\";\r\n\r\nexport const renderGame = () => new Phaser.Game(config);\r\n","import \"./App.css\";\r\nimport { Game } from \"./components/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}
{"version":3,"sources":["game-modules/game/config.ts","game-modules/game/create/character/index.ts","game-modules/game/create/enemy/index.ts","game-modules/game/create/player/index.ts","game-modules/game/create/world.ts","game-modules/game/create/inventory/allItemList.ts","game-modules/game/create/inventory/createCell.ts","game-modules/game/create/inventory/createItems.ts","game-modules/game/create/inventory/index.ts","game-modules/game/create/inventory/createButton.ts","game-modules/game/create/animation.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/load/preload.ts","game-modules/game/update/checkCharacterZIndex.ts","game-modules/game/create/layers/index.ts","game-modules/game/create/layers/addCharacters.ts","game-modules/game/create/layers/addUi.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations/settings.ts","game-modules/service/scenes/DefaultScene/configs/animations/index.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/preloadSettings.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/index.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/scenes/DefaultScene/configs/boxCreator.ts","game-modules/service/scenes/DefaultScene/configs/enemy.ts","game-modules/service/scenes/DefaultScene/configs/addToLayers/index.ts","game-modules/service/scenes/DefaultScene/configs/addToLayers/config.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["baseGameConfig","health","width","height","CreateCharacter","scene","x","y","spriteSheet","textureFrame","params","actor","animations","armor","attack","speed","coolDown","elements","healthLine","mortal","sword","enemy","target","fight","collision","top","calc","blocked","bottom","left","right","this","physics","add","sprite","origin","setOrigin","destroy","isFight","active","setDepth","depth","originX","originY","play","healthPercent","scaleX","damage","setDeath","world","optional","key","value","valueLine","coordinates","worldIndex","getTileAtWorldXY","index","id","indexOf","characters","forEach","character","checkCoordinates","Object","entries","direction","accuracy","xSide","ySide","setVelocityX","setVelocityY","graphics","lineStyle","healthLineY","beginPath","moveTo","lineTo","closePath","strokePath","side","movement","anims","isPaused","currentAnim","pause","frames","createEnemy","CreateEnemy","visionDistance","vision","char","createHealth","enemies","undefined","find","xDifference","Math","abs","yDifference","Infinity","checkCollision","createCollision","movementAnimation","enemyOnAttackDistance","mortalAnimationPlay","mortalCalculate","createPlayer","CreatePlayer","animation","inventory","engine","create","img","layers","ui","uiButton","cursor","creator","showWorld","gridName","imgName","size","gridTileMap","make","tilemap","tileHeight","tileWidth","gridTileSet","addTilesetImage","createStaticLayer","World","objects","call","configs","config","name","image","createWorld","items","slot","price","createCell","cell","strokeRect","createItems","cells","itemList","length","unit","cellData","body","setScrollFactor","setInteractive","on","console","log","push","clearItems","item","createInventory","Inventory","list","inventoryStatus","allItems","map","inventoryContainer","displayedItems","barterButton","container","sceneSizes","w","Number","game","h","shape","mask","createGeometryMask","background","yAmount","rowWidth","createCells","callBack","xPosition","createButton","setAlpha","fillRect","margin","setMask","openInventory","closeInventory","barterShowedElements","random","search","PhaserMath","Between","inventoryImg","player","openBarter","createAnimation","frame","generateFrameNumbers","ways","frameRate","repeat","createCamera","camera","cameras","main","setBounds","startFollow","createCursor","scale","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","pointer","element","fehlerX","fehlerY","scrollX","scrollY","restart","preloadData","data","method","content","load","checkCharacterZIndex","sort","charA","charB","i","createLayers","layer","gameElements","addCharactersToLayer","addSpriteToLayer","elementList","Array","isArray","el","Game","update","preload","bind","addToLayer","sprites","check","characterZIndex","event","goingFrames","start","end","fightFrames","animationList","collisionCellIds","enemyList","characterData","frameWidth","frameHeight","startFrame","endFrame","zombie","fightEffects","path","claws","sword_1","assets","DefaultScene","state","addSimpleObjects","createBox","enemyUnit","addListeners","addList","result","addUIListToLayers","move","values","watching","enemyMovement","filter","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","useLayoutEffect","useEffect","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.2093275b.chunk.js","sourcesContent":["export const baseGameConfig = {\r\n  colors: {\r\n    health: 0xff0000,\r\n  },\r\n  sizes: {\r\n    health: {\r\n      width: 30,\r\n      height: 5,\r\n    },\r\n  },\r\n};\r\n","import { Scene } from \"phaser\";\r\nimport { baseGameConfig } from \"../../config\";\r\nimport {\r\n  AnimationsListType,\r\n  CharacterAnimationsList,\r\n  CharactersPosterity,\r\n  MortalTypes,\r\n  Sides,\r\n  CharacterElements,\r\n  OptionalCollisionParams,\r\n} from \"../../types\";\r\n\r\nexport default class CreateCharacter {\r\n  actor;\r\n  scene: Scene;\r\n  animations?: CharacterAnimationsList;\r\n  params = {\r\n    health: 100,\r\n    armor: 10,\r\n    attack: 10,\r\n\r\n    speed: 100,\r\n    coolDown: 5,\r\n  };\r\n  elements: CharacterElements = {\r\n    healthLine: null,\r\n  };\r\n  mortal: MortalTypes = {\r\n    sword: null,\r\n    enemy: null,\r\n    target: {},\r\n\r\n    fight: {\r\n      health: 100,\r\n      coolDown: 50,\r\n    },\r\n  };\r\n  collision = {\r\n    top: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    bottom: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n    left: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    right: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    params: {\r\n      origin?: number[];\r\n      animations?: CharacterAnimationsList;\r\n    }\r\n  ) {\r\n    this.scene = scene;\r\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\r\n\r\n    if (params.origin) {\r\n      this.actor.setOrigin(...params.origin);\r\n    }\r\n  }\r\n\r\n  setDeath() {\r\n    this.mortal.sword?.destroy();\r\n    this.actor.x = -1000;\r\n    this.actor.destroy();\r\n    this.elements.healthLine?.destroy();\r\n    if (this.mortal.enemy) {\r\n      this.mortal.enemy.mortal.enemy = null;\r\n    }\r\n  }\r\n\r\n  mortalAnimationPlay(isFight?: boolean) {\r\n    if (!this.animations || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n    if (isFight) {\r\n      if (!this.mortal.sword || !this.mortal.sword.active) {\r\n        this.mortal.sword = this.scene.add\r\n          .sprite(this.actor.x, this.actor.y, \"\")\r\n          .setOrigin(this.actor.originX, this.actor.originY);\r\n\r\n        this.mortal.sword.play(this.animations.sword);\r\n      } else {\r\n        this.mortal.sword.x = this.actor.x;\r\n        this.mortal.sword.y = this.actor.y;\r\n        this.mortal.sword.setDepth(this.actor.depth + 1);\r\n      }\r\n    } else {\r\n      if (this.mortal.sword) {\r\n        this.mortal.sword.destroy();\r\n        this.mortal.sword = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  mortalCalculate(enemy?: CharactersPosterity) {\r\n    if (!enemy || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.elements.healthLine) {\r\n      const healthPercent = this.mortal.fight.health / this.params.health;\r\n      this.elements.healthLine.scaleX = healthPercent;\r\n    }\r\n\r\n    if (this.mortal.fight.coolDown === this.params.coolDown) {\r\n      this.mortal.fight.coolDown--;\r\n      const damage = this.params.attack - enemy.params.armor;\r\n      const minDamage = 0;\r\n      enemy.mortal.fight.health -= damage > 0 ? damage : minDamage;\r\n    } else {\r\n      this.mortal.fight.coolDown--;\r\n      if (this.mortal.fight.coolDown < 0) {\r\n        this.mortal.fight.coolDown = this.params.coolDown;\r\n      }\r\n    }\r\n\r\n    if (enemy.mortal.fight.health <= 0) {\r\n      enemy.setDeath();\r\n      this.mortal.enemy = null;\r\n      this.mortal.sword?.destroy();\r\n      this.mortal.sword = null;\r\n    }\r\n  }\r\n\r\n  checkCollision(\r\n    world: any,\r\n    collision: number[],\r\n    optional?: OptionalCollisionParams\r\n  ) {\r\n    for (const [key, value] of Object.entries(this.collision)) {\r\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\r\n\r\n      const coordinates = {\r\n        x: valueLine === \"x\" ? this.actor.x + value.calc : this.actor.x,\r\n        y: valueLine === \"y\" ? this.actor.y + value.calc : this.actor.y,\r\n      };\r\n\r\n      const worldIndex = world.getTileAtWorldXY(\r\n        coordinates.x,\r\n        coordinates.y,\r\n        false\r\n      )?.index;\r\n\r\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\r\n\r\n      if (!id || id !== -1) {\r\n        value.blocked = true;\r\n      } else {\r\n        value.blocked = false;\r\n      }\r\n\r\n      if (optional) {\r\n        if (optional.characters) {\r\n          optional.characters.forEach((character) => {\r\n            if (character.actor === this.actor || !character.actor.active) {\r\n              return;\r\n            }\r\n            const accuracy = 7;\r\n\r\n            const checkCoordinates = {\r\n              x:\r\n                character.actor.x <= coordinates.x + accuracy &&\r\n                character.actor.x >= coordinates.x - accuracy,\r\n              y:\r\n                character.actor.y <= coordinates.y + accuracy &&\r\n                character.actor.y >= coordinates.y - accuracy,\r\n            };\r\n            if (checkCoordinates.x && checkCoordinates.y) {\r\n              if (!value.blocked) {\r\n                value.blocked = true;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createCollision(params: {\r\n    direction: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    coordinates: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n  }) {\r\n    if (this.collision.right.blocked) {\r\n      if (params.direction.x > 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    } else if (this.collision.left.blocked) {\r\n      if (params.direction.x < 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    }\r\n\r\n    if (this.collision.bottom.blocked) {\r\n      if (params.direction.y > 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    } else if (this.collision.top.blocked) {\r\n      if (params.direction.y < 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    }\r\n  }\r\n\r\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\r\n    if (this.elements.healthLine) {\r\n      this.elements.healthLine.x = this.actor.x;\r\n      this.elements.healthLine.y = this.actor.y;\r\n    }\r\n\r\n    if (this.mortal.fight.health <= 0) {\r\n      return [\"stop\", \"stop\"];\r\n    }\r\n\r\n    const xSide =\r\n      this.actor.x - x < -accuracy\r\n        ? \"right\"\r\n        : this.actor.x - x > accuracy\r\n        ? \"left\"\r\n        : \"stop\";\r\n    const ySide =\r\n      this.actor.y - y < -accuracy\r\n        ? \"bottom\"\r\n        : this.actor.y - y > accuracy\r\n        ? \"top\"\r\n        : \"stop\";\r\n\r\n    if (xSide === \"right\") {\r\n      this.actor.setVelocityX(speed);\r\n    } else if (xSide === \"left\") {\r\n      this.actor.setVelocityX(-speed);\r\n    } else {\r\n      this.actor.setVelocityX(0);\r\n    }\r\n\r\n    if (ySide === \"bottom\") {\r\n      this.actor.setVelocityY(speed);\r\n    } else if (ySide === \"top\") {\r\n      this.actor.setVelocityY(-speed);\r\n    } else {\r\n      this.actor.setVelocityY(0);\r\n    }\r\n\r\n    return [xSide, ySide];\r\n  }\r\n\r\n  createHealth() {\r\n    const graphics = this.scene.add.graphics({\r\n      x: this.actor.x,\r\n      y: this.actor.y,\r\n    });\r\n    graphics.lineStyle(\r\n      baseGameConfig.sizes.health.height,\r\n      baseGameConfig.colors.health\r\n    );\r\n    const healthLineY =\r\n      baseGameConfig.sizes.health.height * -1 -\r\n      this.actor.height * this.actor.originY;\r\n\r\n    graphics.beginPath();\r\n    graphics.moveTo((baseGameConfig.sizes.health.width / 2) * -1, healthLineY);\r\n    graphics.lineTo(baseGameConfig.sizes.health.width / 2, healthLineY);\r\n    graphics.closePath();\r\n    graphics.strokePath();\r\n    graphics.setDepth(this.actor.depth + 2);\r\n\r\n    this.elements.healthLine = graphics;\r\n  }\r\n\r\n  movementAnimation(side: Sides[], movement?: AnimationsListType) {\r\n    if (!movement || this.mortal.fight.health <= 0) {\r\n      return;\r\n    }\r\n    try {\r\n      const [xSide, ySide] = side;\r\n\r\n      if (xSide !== \"stop\") {\r\n        if (this.actor.anims.isPaused) {\r\n          this.actor.anims.play(this.actor.anims.currentAnim);\r\n        }\r\n\r\n        if (this.actor.anims.currentAnim?.key !== movement[xSide]) {\r\n          this.actor.anims.play(movement[xSide]);\r\n        }\r\n      } else if (ySide !== \"stop\") {\r\n        if (this.actor.anims.isPaused) {\r\n          this.actor.anims.play(this.actor.anims.currentAnim);\r\n        }\r\n\r\n        if (this.actor.anims.currentAnim?.key !== movement[ySide]) {\r\n          this.actor.anims.play(movement[ySide]);\r\n        }\r\n      } else {\r\n        this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\r\n      }\r\n    } catch {\r\n      this.actor.anims.pause();\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { CharactersPosterity, EnemyAnimationsList } from \"../../types\";\r\n\r\nimport CreateCharacter from \".././character\";\r\n\r\nexport function createEnemy(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  animations: EnemyAnimationsList,\r\n  params?: {\r\n    origin?: number[];\r\n    vision?: number;\r\n    char?: {\r\n      speed: number;\r\n      health: number;\r\n      armor: number;\r\n      attack: number;\r\n      coolDown: number;\r\n    };\r\n  }\r\n) {\r\n  return new CreateEnemy(\r\n    this,\r\n    x,\r\n    y,\r\n    spriteSheet,\r\n    textureFrame,\r\n    animations,\r\n    params\r\n  );\r\n}\r\n\r\nexport default class CreateEnemy extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  visionDistance = 100;\r\n  animations: EnemyAnimationsList;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    animations: EnemyAnimationsList,\r\n\r\n    params?: {\r\n      origin?: number[];\r\n      vision?: number;\r\n      char?: {\r\n        speed: number;\r\n        health: number;\r\n        armor: number;\r\n        attack: number;\r\n        coolDown: number;\r\n      };\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, {\r\n      origin: params?.origin,\r\n      animations: animations,\r\n    });\r\n    this.scene = scene;\r\n    this.visionDistance = params?.vision || this.visionDistance;\r\n\r\n    this.animations = animations;\r\n\r\n    if (params?.char) {\r\n      this.params = params.char;\r\n    }\r\n\r\n    this.createHealth();\r\n  }\r\n\r\n  watching(enemies: CharactersPosterity[], collision?: number[]) {\r\n    let accuracy = 15;\r\n    const fightDistance = 14;\r\n\r\n    let target: CharactersPosterity | undefined = undefined;\r\n\r\n    if (!target) {\r\n      target = enemies.find((enemy) => {\r\n        const xDifference = Math.abs(enemy.actor.x - this.actor.x);\r\n        const yDifference = Math.abs(enemy.actor.y - this.actor.y);\r\n        return (\r\n          xDifference < this.visionDistance && yDifference < this.visionDistance\r\n        );\r\n      });\r\n    }\r\n    if (target) {\r\n      this.visionDistance = Infinity;\r\n      const params = {\r\n        direction: {\r\n          x: target.actor.x - this.actor.x,\r\n          y: target.actor.y - this.actor.y,\r\n        },\r\n        coordinates: {\r\n          x: target.actor.x,\r\n          y: target.actor.y,\r\n        },\r\n      };\r\n\r\n      if (collision) {\r\n        this.checkCollision(this.scene.world.world, collision, {\r\n          characters: this.scene.enemy,\r\n        });\r\n        this.createCollision(params);\r\n      }\r\n      const side = super.move(\r\n        params.coordinates.x,\r\n        params.coordinates.y,\r\n        this.params.speed,\r\n        accuracy\r\n      );\r\n\r\n      if (this.animations.movement) {\r\n        const movement = this.animations.movement;\r\n\r\n        this.movementAnimation(side, movement);\r\n      }\r\n\r\n      const enemyOnAttackDistance =\r\n        Math.abs(params.direction.x) <= fightDistance &&\r\n        Math.abs(params.direction.y) <= fightDistance;\r\n\r\n      this.mortalAnimationPlay(enemyOnAttackDistance);\r\n\r\n      if (enemyOnAttackDistance) {\r\n        this.mortalCalculate(target);\r\n        if (!target.mortal.enemy) {\r\n          target.mortal.enemy = this;\r\n        }\r\n      } else {\r\n        if (target.mortal.enemy?.actor === this.actor) {\r\n          target.mortal.enemy = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Inventory } from \"..\";\r\nimport DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { CharacterAnimationsList } from \"../../types\";\r\nimport CreateCharacter from \"../character\";\r\n\r\nlet test: any;\r\nexport function createPlayer(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  params: {\r\n    animation: CharacterAnimationsList;\r\n    origin?: number[];\r\n    inventory: string;\r\n  }\r\n) {\r\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, params);\r\n}\r\n\r\nexport default class CreatePlayer extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  inventory: Inventory;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    params: {\r\n      origin?: number[];\r\n      animation: CharacterAnimationsList;\r\n      inventory: string;\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, {\r\n      origin: params?.origin,\r\n      animations: params.animation,\r\n    });\r\n    this.scene = scene;\r\n    this.animations = params.animation;\r\n\r\n    this.params = {\r\n      health: 100,\r\n      armor: 999999999999999,\r\n      attack: 11,\r\n      coolDown: 0,\r\n      speed: 100,\r\n    };\r\n\r\n    this.inventory = scene.engine.create.inventory({\r\n      img: \"uiInventory\",\r\n    });\r\n\r\n    if (this.scene.engine.layers?.ui && this.inventory.elements.uiButton) {\r\n      this.scene.engine.layers.ui.add(this.inventory.elements.uiButton);\r\n    }\r\n  }\r\n\r\n  //@ts-ignore\r\n  move(cursor: any, world: any, collision: number[]) {\r\n    let accuracy = 5;\r\n\r\n    this.checkCollision(world, collision);\r\n    const params = {\r\n      direction: {\r\n        x: cursor.x - this.actor.x,\r\n        y: cursor.y - this.actor.y,\r\n      },\r\n      coordinates: {\r\n        x: cursor.x,\r\n        y: cursor.y,\r\n      },\r\n    };\r\n\r\n    this.createCollision(params);\r\n\r\n    const side = super.move(\r\n      params.coordinates.x,\r\n      params.coordinates.y,\r\n      this.params.speed,\r\n      accuracy\r\n    );\r\n\r\n    this.movementAnimation(side, this.animations?.movement);\r\n    this.mortalAnimationPlay(!!this.mortal.enemy);\r\n\r\n    if (this.mortal.enemy) {\r\n      this.mortalCalculate(this.mortal.enemy);\r\n    }\r\n\r\n    return side;\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { SimpleObject } from \"../types\";\r\nexport function creator(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  const gridTileMap = this.make.tilemap({\r\n    key: gridName,\r\n    tileHeight: size,\r\n    tileWidth: size,\r\n  });\r\n\r\n  const gridTileSet = showWorld\r\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\r\n    : null;\r\n\r\n  // @ts-ignore\r\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\r\n\r\n  return tileLayer;\r\n}\r\n\r\nexport default class World {\r\n  world: any;\r\n  scene: Scene;\r\n  objects: {\r\n    [key: string]: Phaser.GameObjects.Image;\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    showWorld: boolean,\r\n    gridName: string,\r\n    imgName: string,\r\n    size: number\r\n  ) {\r\n    this.scene = scene;\r\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\r\n    this.objects = {};\r\n  }\r\n\r\n  addSimpleObjects(configs: SimpleObject[]) {\r\n    configs.forEach((config) => {\r\n      const { x, y, imgName, name } = config;\r\n      this.objects[name] = this.scene.add.image(x, y, imgName);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createWorld(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  return new World(this, showWorld, gridName, imgName, size);\r\n}\r\n","import { Item } from \"../../types\";\r\n\r\nexport const itemList = (): Item[] => {\r\n  return items.map((item, index) => {\r\n    return {\r\n      ...item,\r\n      id: index,\r\n    };\r\n  });\r\n};\r\n\r\nconst items = [\r\n  {\r\n    img: \"inventoryElement_1\",\r\n    name: \"item\",\r\n    slot: \"body\",\r\n    price: 10,\r\n  },\r\n  {\r\n    img: \"inventoryElement_2\",\r\n    name: \"item2\",\r\n    slot: \"arm\",\r\n    price: 10,\r\n  },\r\n];\r\n","import { Scene } from \"phaser\";\r\n\r\nexport function createCells(scene: Scene) {\r\n  const rowWidth = 5,\r\n    rowHeight = 8;\r\n  const cells: Phaser.GameObjects.Graphics[] = [];\r\n  let yAmount = 0;\r\n\r\n  for (let index = 1; index <= rowWidth * rowHeight; index++) {\r\n    let x = 50;\r\n\r\n    switch (index % rowWidth) {\r\n      case 1:\r\n        x *= 1;\r\n        yAmount++;\r\n        break;\r\n\r\n      case 0:\r\n        x *= rowWidth;\r\n        break;\r\n\r\n      default:\r\n        x *= index % rowWidth;\r\n        break;\r\n    }\r\n\r\n    cells.push(createCell(scene, x, yAmount * 50));\r\n  }\r\n\r\n  return cells;\r\n}\r\nexport function createCell(scene: Scene, x: number, y: number) {\r\n  var cell = scene.add.graphics();\r\n  cell.lineStyle(2, 0x118eb3);\r\n  cell.strokeRect(0, 0, 40, 40);\r\n  cell.x = x;\r\n  cell.y = y;\r\n\r\n  return cell;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { Item, ItemBody } from \"../../types\";\r\n\r\nexport function createItems(\r\n  scene: Scene,\r\n  cells: Phaser.GameObjects.Graphics[],\r\n  itemList: Item[]\r\n) {\r\n  const items: ItemBody[] = [];\r\n  for (let index = 0; index < itemList.length; index++) {\r\n    if (index > cells.length - 1) {\r\n      break;\r\n    }\r\n    const unit = itemList[index];\r\n\r\n    const cellData = {\r\n      x: cells[index].x + 3,\r\n      y: cells[index].y + 3,\r\n    };\r\n    const body = scene.add\r\n      .sprite(cellData.x, cellData.y, unit.img)\r\n      .setOrigin(0, 0)\r\n      .setScrollFactor(0)\r\n      .setInteractive()\r\n      .on(\"pointerdown\", () => {\r\n        console.log(\"item click\", unit.img, index);\r\n      });\r\n    //@ts-ignore\r\n    body.params = unit;\r\n\r\n    //@ts-ignore\r\n    items.push(body);\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nexport const clearItems = (items: ItemBody[]) => {\r\n  items.forEach((item) => {\r\n    item.destroy();\r\n  });\r\n  items.length = 0;\r\n};\r\n","import { Math as PhaserMath, Scene } from \"phaser\";\r\nimport {\r\n  InventoryParams,\r\n  CreateInventorySettings,\r\n  InventoryStatuses,\r\n  Item,\r\n  ItemBox,\r\n  ItemBody,\r\n} from \"../../types\";\r\nimport { itemList } from \"./allItemList\";\r\nimport { createCells } from \"./createCell\";\r\nimport { clearItems, createItems } from \"./createItems\";\r\nimport DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { createButton } from \"./createButton\";\r\n\r\nexport function createInventory(\r\n  this: DefaultScene,\r\n  params: CreateInventorySettings\r\n): Inventory {\r\n  return new Inventory(this, params);\r\n}\r\n\r\nexport default class Inventory {\r\n  scene: DefaultScene;\r\n  elements: InventoryParams;\r\n  list: Item[] = [];\r\n  inventoryStatus: InventoryStatuses = \"close\";\r\n  allItems = itemList();\r\n\r\n  cells: Phaser.GameObjects.Graphics[];\r\n  inventoryContainer: Phaser.GameObjects.Container;\r\n  displayedItems: ItemBody[];\r\n  barterButton: Phaser.GameObjects.Sprite;\r\n\r\n  constructor(scene: DefaultScene, params: CreateInventorySettings) {\r\n    this.scene = scene;\r\n    this.list[0] = this.list[1] = this.list[2] = this.allItems[0];\r\n    this.inventoryContainer = scene.add.container(0, 0).setScrollFactor(0);\r\n\r\n    const sceneSizes = {\r\n        w: Number(scene.game.config.width),\r\n        h: Number(scene.game.config.height),\r\n      },\r\n      margin = 15,\r\n      shape = scene.make.graphics({}),\r\n      mask = shape.createGeometryMask(),\r\n      container = this.inventoryContainer,\r\n      background = scene.add\r\n        .sprite(sceneSizes.w / 2, sceneSizes.h / 2, \"inventoryBG\")\r\n        .setOrigin(0.5)\r\n        .setInteractive()\r\n        .on(\"pointerdown\", () => null);\r\n\r\n    this.cells = createCells(scene);\r\n    this.barterButton = createButton(scene).setAlpha(0);\r\n\r\n    shape\r\n      .fillRect(\r\n        margin, //start x\r\n        margin, //start y\r\n        sceneSizes.w - margin * 2, //width\r\n        sceneSizes.h - margin * 2 //height\r\n      )\r\n      .setScrollFactor(0);\r\n\r\n    container\r\n      .add([background, ...this.cells])\r\n      .setMask(mask)\r\n      .setAlpha(0);\r\n\r\n    this.elements = {\r\n      background,\r\n      container,\r\n      mask,\r\n    };\r\n\r\n    this.elements.uiButton = scene.add.sprite(sceneSizes.w, 0, params.img);\r\n    this.elements.uiButton.setOrigin(1, 0).setScrollFactor(0).setInteractive();\r\n\r\n    this.elements.uiButton.on(\"pointerdown\", () => {\r\n      switch (this.inventoryStatus) {\r\n        case \"close\":\r\n          this.openInventory();\r\n          break;\r\n\r\n        case \"open\":\r\n        case \"barter\":\r\n          this.closeInventory();\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  openInventory() {\r\n    this.inventoryStatus = \"open\";\r\n    this.displayedItems = createItems(this.scene, this.cells, this.list);\r\n    this.inventoryContainer.add([...this.displayedItems]);\r\n\r\n    this.elements.container.setAlpha(1);\r\n  }\r\n  openBarter(list: Item[]) {\r\n    let barterShowedElements: \"box\" | \"player\" = \"box\";\r\n    this.inventoryStatus = \"barter\";\r\n    this.displayedItems = createItems(this.scene, this.cells, list);\r\n    this.barterButton.setAlpha(1);\r\n    this.barterButton.setDepth(this.inventoryContainer.length).on(\r\n      \"pointerup\",\r\n      (this.scene,\r\n      () => {\r\n        console.log(\"click\");\r\n\r\n        switch (barterShowedElements) {\r\n          case \"player\":\r\n            clearItems(this.displayedItems);\r\n            this.displayedItems = createItems(this.scene, this.cells, list);\r\n            this.inventoryContainer.add([...this.displayedItems]);\r\n            barterShowedElements = \"box\";\r\n            break;\r\n\r\n          case \"box\":\r\n            clearItems(this.displayedItems);\r\n            this.displayedItems = createItems(\r\n              this.scene,\r\n              this.cells,\r\n              this.list\r\n            );\r\n            this.inventoryContainer.add([...this.displayedItems]);\r\n            barterShowedElements = \"player\";\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      })\r\n    );\r\n\r\n    // this.barterButton =\r\n    //   .setOrigin(0.5)\r\n    // .setInteractive()\r\n    this.inventoryContainer.add([...this.displayedItems]);\r\n    this.elements.container.setAlpha(1);\r\n  }\r\n  closeInventory() {\r\n    this.inventoryStatus = \"close\";\r\n    clearItems(this.displayedItems);\r\n    this.barterButton.setAlpha(0);\r\n\r\n    // if (this.barterButton) {\r\n    //   this.barterButton.destroy();\r\n    // }\r\n    this.elements.container.setAlpha(0);\r\n  }\r\n\r\n  createBox(\r\n    x: number,\r\n    y: number,\r\n    img: string,\r\n    params?: { random?: number; search?: number[] }\r\n  ): ItemBox {\r\n    const list: Item[] = [];\r\n    if (params) {\r\n      const { random, search } = params;\r\n      if (random) {\r\n        for (let index = 0; index < random; index++) {\r\n          const item =\r\n            this.allItems[PhaserMath.Between(0, this.allItems.length - 1)];\r\n          list.push(item);\r\n        }\r\n      }\r\n\r\n      if (search) {\r\n        search.forEach((id) => {\r\n          const item = this.allItems[id];\r\n          list.push(item);\r\n        });\r\n      }\r\n    }\r\n\r\n    const inventoryImg = this.scene.add\r\n      .sprite(x, y, img)\r\n      .setInteractive()\r\n      .on(\"pointerdown\", () => {\r\n        const pointerDistance = 60;\r\n\r\n        if (\r\n          Math.abs(this.scene.player.actor.x - inventoryImg.x) <\r\n            pointerDistance &&\r\n          Math.abs(this.scene.player.actor.y - inventoryImg.y) <\r\n            pointerDistance &&\r\n          !this.scene.player.mortal.enemy\r\n        )\r\n          this.openBarter(list);\r\n      });\r\n\r\n    return { img: inventoryImg, list };\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\n\r\nexport const createButton = (scene: Scene, callBack?: () => void) => {\r\n  const buttonWidth = 50,\r\n    buttonHeight = 50,\r\n    xPosition = Number(scene.game.config.width) - buttonWidth,\r\n    yPosition = 100;\r\n\r\n  const button = scene.add\r\n    .sprite(xPosition, yPosition, \"barterButton\")\r\n    .setInteractive();\r\n\r\n  return button;\r\n};\r\n","import { Scene } from \"phaser\";\r\nimport { AnimationConfig } from \"../types\";\r\n\r\nexport default function createAnimation(\r\n  this: Scene,\r\n  configs: AnimationConfig[]\r\n) {\r\n  configs.forEach((config) => {\r\n    const { key, frame } = config;\r\n    this.anims.create({\r\n      key,\r\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\r\n      frameRate: frame.frameRate,\r\n      repeat: frame.repeat,\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\n\r\nexport default function createCamera(\r\n  this: Scene,\r\n  actor: Phaser.GameObjects.GameObject | Object,\r\n  world: any\r\n) {\r\n  const camera = this.cameras.main;\r\n\r\n  camera\r\n    .setBounds(0, 0, Number(world.width), Number(world.height))\r\n    .startFollow(actor, true, 1, 1, 0, 0);\r\n\r\n  return camera;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CursorBorderType } from \"../../../types\";\r\n\r\nexport default function createCursor(\r\n  this: Scene,\r\n  x: number,\r\n  y: number,\r\n  size: number,\r\n  scale: number,\r\n  background: number,\r\n  border?: CursorBorderType | null,\r\n  camera?: Phaser.Cameras.Scene2D.Camera\r\n) {\r\n  const circle = this.add.circle(x, y, size, background);\r\n\r\n  if (border) {\r\n    const { color, size } = border;\r\n    circle.setStrokeStyle(size, color);\r\n  }\r\n\r\n  const tween = this.tweens.add({\r\n    delay: 0.1,\r\n    targets: circle,\r\n    scale: scale,\r\n    yoyo: false,\r\n    repeat: 0,\r\n    alpha: 0,\r\n    ease: \"Sine.easeInOut\",\r\n  });\r\n\r\n  this.input.on(\"pointerdown\", (pointer: any, element: any[]) => {\r\n    if (element.length) {\r\n      return;\r\n    }\r\n\r\n    let fehlerX = 0,\r\n      fehlerY = 0;\r\n\r\n    if (camera) {\r\n      fehlerX = camera.scrollX;\r\n      fehlerY = camera.scrollY;\r\n    }\r\n\r\n    circle.x = this.input.x + fehlerX;\r\n    circle.y = this.input.y + fehlerY;\r\n    tween.restart();\r\n  });\r\n\r\n  return circle;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { PreloadTypes } from \"../types\";\r\n\r\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\r\n  data.forEach((unit) => {\r\n    const { method, data } = unit;\r\n\r\n    data.forEach((content) => {\r\n      // @ts-ignore: Unreachable code error\r\n      const result = this.load[method](...content);\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CharactersPosterity } from \"../types\";\r\n\r\nconst accuracy = 50;\r\nexport function checkCharacterZIndex(\r\n  this: Scene,\r\n  characters: CharactersPosterity[]\r\n) {\r\n  const sortedCharacters = [...characters].sort(\r\n    (charA, charB) => charA.actor.y - charB.actor.y\r\n  );\r\n\r\n  sortedCharacters.forEach((char, i) => {\r\n    char.actor.setDepth(i);\r\n    char.elements.healthLine?.setDepth(i + 1);\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { LayersType } from \"../../types\";\r\n\r\nexport function createLayers(this: Scene): LayersType {\r\n  return {\r\n    ui: this.add.layer().setDepth(2),\r\n    gameElements: {\r\n      characters: this.add.layer().setDepth(1),\r\n    },\r\n  };\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CharactersPosterity } from \"../../types\";\r\n\r\nexport function addCharactersToLayer(\r\n  this: Scene,\r\n  characters: CharactersPosterity[],\r\n  layer: Phaser.GameObjects.Layer\r\n) {\r\n  characters.forEach((character) => {\r\n    const { actor, elements } = character;\r\n    layer.add(actor);\r\n    if (elements?.healthLine) {\r\n      layer.add(elements.healthLine);\r\n    }\r\n  });\r\n}\r\n","import { GameObjects, Scene } from \"phaser\";\r\nimport { LayerElementType } from \"../../types\";\r\n\r\nexport function addSpriteToLayer(\r\n  this: Scene,\r\n  element: LayerElementType[] | LayerElementType,\r\n  layer: GameObjects.Layer\r\n) {\r\n  const elementList: LayerElementType[] = [];\r\n  if (Array.isArray(element)) {\r\n    elementList.push(...element);\r\n  } else {\r\n    elementList.push(element);\r\n  }\r\n\r\n  elementList.forEach((el) => layer.add(el));\r\n}\r\n","import {\r\n  createAnimation,\r\n  createCamera,\r\n  createCursor,\r\n  createEnemy,\r\n  createPlayer,\r\n  createWorld,\r\n} from \"./create\";\r\nimport {\r\n  CreateGameTypes,\r\n  LayersType,\r\n  LoadGameTypes,\r\n  UpdateGameTypes,\r\n} from \"./types\";\r\nimport { preloadData } from \"./load/preload\";\r\nimport DefaultScene from \"../service/scenes/DefaultScene\";\r\nimport { checkCharacterZIndex } from \"./update\";\r\nimport { createInventory } from \"./create/inventory\";\r\nimport { createLayers } from \"./create/layers\";\r\nimport { addCharactersToLayer } from \"./create/layers/addCharacters\";\r\nimport { addSpriteToLayer } from \"./create/layers/addUi\";\r\n\r\nexport default class Game {\r\n  scene: DefaultScene;\r\n  load: LoadGameTypes;\r\n  create: CreateGameTypes;\r\n  update: UpdateGameTypes;\r\n\r\n  layers: LayersType | undefined;\r\n\r\n  constructor(scene: DefaultScene) {\r\n    this.scene = scene;\r\n    this.load = {\r\n      preload: preloadData.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n    };\r\n    this.create = {\r\n      world: createWorld.bind(this.scene),\r\n      player: createPlayer.bind(this.scene),\r\n      enemy: createEnemy.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n      camera: createCamera.bind(this.scene),\r\n      inventory: createInventory.bind(this.scene),\r\n      layers: createLayers.bind(this.scene),\r\n\r\n      addToLayer: {\r\n        characters: addCharactersToLayer.bind(this.scene),\r\n        sprites: addSpriteToLayer.bind(this.scene),\r\n      },\r\n      ui: {\r\n        cursor: createCursor.bind(this.scene),\r\n      },\r\n    };\r\n    this.update = {\r\n      check: {\r\n        characterZIndex: checkCharacterZIndex.bind(this.scene),\r\n      },\r\n    };\r\n  }\r\n\r\n  addListeners(event: string | symbol, callBack: () => void) {\r\n    this.scene.input.on(event, callBack);\r\n  }\r\n}\r\n","export const goingFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 3,\r\n  },\r\n  frameRate: 6,\r\n  repeat: -1,\r\n};\r\n\r\nexport const fightFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 22,\r\n  },\r\n  frameRate: 15,\r\n  repeat: -1,\r\n};\r\n","import { AnimationConfig } from \"../../../../../game/types\";\r\nimport { fightFrames, goingFrames } from \"./settings\";\r\n\r\nexport const animationList: AnimationConfig[] = [\r\n  {\r\n    key: \"playerGoUp\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoDown\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoLeft\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoRight\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieU\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieD\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieL\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieR\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"clawsFight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"claws\",\r\n    },\r\n  },\r\n  {\r\n    key: \"sword_1Fight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"sword_1\",\r\n    },\r\n  },\r\n];\r\n","import { EnemyListConfig } from \"../../../../game/types\";\r\n\r\nexport const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\r\n\r\nexport const enemyList: EnemyListConfig[] = [\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 250,\r\n      y: 510,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n];\r\n","import { SimpleObject } from \"../../../../game/types\";\r\n\r\nexport const objects: SimpleObject[] = [];\r\n","export const characterData = {\r\n  frame: {\r\n    frameWidth: 20,\r\n    frameHeight: 45,\r\n    startFrame: 0,\r\n    endFrame: 3,\r\n  },\r\n  player: \"game/assets/img/DefaultScene/characters/player/\",\r\n  zombie: \"game/assets/img/DefaultScene/characters/enemies/zombie/\",\r\n};\r\n\r\nconst effectsPath = \"game/assets/img/DefaultScene/effects/\";\r\n\r\nexport const fightEffects = {\r\n  path: `${effectsPath}fight/`,\r\n  claws: {\r\n    name: \"claws.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 22,\r\n    },\r\n  },\r\n  sword_1: {\r\n    name: \"sword_1.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 23,\r\n    },\r\n  },\r\n};\r\n","import { PreloadTypes } from \"../../../../../game/types\";\r\nimport { characterData, fightEffects } from \"./preloadSettings\";\r\n\r\nconst assets = \"game/assets/\";\r\n\r\nconst data: PreloadTypes[] = [\r\n  {\r\n    method: \"image\",\r\n    data: [\r\n      [\"exampleGrassTile\", assets + \"img/DefaultScene/grass.png\"],\r\n      [\"cursor\", assets + \"img/general/cursor.png\"],\r\n      [\"empty\", assets + \"img/general/emptyLayers.png\"],\r\n      [\"uiInventory\", assets + \"img/general/ui/inventory.png\"],\r\n      [\"inventoryBG\", assets + \"img/general/ui/inventoryBG.png\"],\r\n\r\n      [\"inventoryElement_1\", assets + \"img/general/items/body/1.png\"],\r\n      [\"inventoryElement_2\", assets + \"img/general/items/arm/1.png\"],\r\n      [\"inventoryBox\", assets + \"img/general/items/box.png\"],\r\n      [\"barterButton\", assets + \"img/general/b_button.png\"],\r\n    ],\r\n  },\r\n  {\r\n    method: \"tilemapCSV\",\r\n    data: [[\"exampleGrid\", assets + \"grids/DefaultScene/grass.csv\"]],\r\n  },\r\n  {\r\n    method: \"spritesheet\",\r\n    data: [\r\n      [\"playerLeft\", `${characterData.player}p_left.png`, characterData.frame],\r\n      [\r\n        \"playerRight\",\r\n        `${characterData.player}p_right.png`,\r\n        characterData.frame,\r\n      ],\r\n      [\r\n        \"playerDown\",\r\n        `${characterData.player}p_down.png`,\r\n        { ...characterData.frame, frameHeight: 44 },\r\n      ],\r\n      [\r\n        \"playerUp\",\r\n        `${characterData.player}p_up.png`,\r\n        { ...characterData.frame, frameHeight: 44, frameWidth: 19 },\r\n      ],\r\n\r\n      [\r\n        \"zombieLeft\",\r\n        `${characterData.zombie}p_left.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\r\n        \"zombieRight\",\r\n        `${characterData.zombie}p_right.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\"zombieUp\", `${characterData.zombie}p_up.png`, characterData.frame],\r\n      [\"zombieDown\", `${characterData.zombie}p_down.png`, characterData.frame],\r\n      [\r\n        \"claws\",\r\n        `${fightEffects.path}${fightEffects.claws.name}`,\r\n        fightEffects.claws.frame,\r\n      ],\r\n      [\r\n        \"sword_1\",\r\n        `${fightEffects.path}${fightEffects.sword_1.name}`,\r\n        fightEffects.sword_1.frame,\r\n      ],\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import { Scene } from \"phaser\";\r\n\r\nimport Game from \"../../../game\";\r\nimport { CreateEnemy } from \"../../../game/create\";\r\nimport CreatePlayer from \"../../../game/create/player\";\r\nimport World from \"../../../game/create/world\";\r\nimport { addToLayer } from \"./configs/addToLayers\";\r\n\r\nimport { animationList } from \"./configs/animations\";\r\nimport { boxCreator } from \"./configs/boxCreator\";\r\nimport { collisionCellIds } from \"./configs/config\";\r\nimport enemyCreator, {\r\n  movementWatching as enemyMovement,\r\n  setDeath,\r\n} from \"./configs/enemy\";\r\nimport { objects } from \"./configs/objects\";\r\nimport preloadData from \"./configs/preloadData\";\r\n\r\nexport default class DefaultScene extends Scene {\r\n  engine: Game;\r\n  player: CreatePlayer;\r\n  world: World;\r\n  enemy: CreateEnemy[] = [];\r\n\r\n  state: {\r\n    cursor?: Phaser.GameObjects.Arc;\r\n    camera?: Phaser.Cameras.Scene2D.Camera;\r\n  };\r\n\r\n  constructor(config: string) {\r\n    super(config);\r\n    this.engine = new Game(this);\r\n    this.state = {};\r\n  }\r\n\r\n  preload() {\r\n    this.engine.load.preload(preloadData);\r\n  }\r\n  create() {\r\n    this.engine.layers = this.engine.create.layers();\r\n    this.engine.load.animation(animationList);\r\n    this.world = this.engine.create.world(\r\n      true,\r\n      \"exampleGrid\",\r\n      \"exampleGrassTile\",\r\n      32\r\n    );\r\n    this.world.addSimpleObjects(objects);\r\n\r\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, {\r\n      origin: [0.5, 0.8],\r\n      animation: {\r\n        movement: {\r\n          left: \"playerGoLeft\",\r\n          right: \"playerGoRight\",\r\n          top: \"playerGoUp\",\r\n          bottom: \"playerGoDown\",\r\n        },\r\n        sword: \"sword_1Fight\",\r\n      },\r\n      inventory: \"uiInventory\",\r\n    });\r\n\r\n    boxCreator(this, this.player.inventory);\r\n    enemyCreator(this);\r\n\r\n    this.state.camera = this.engine.create.camera(\r\n      this.player.actor,\r\n      this.world.world\r\n    );\r\n\r\n    this.state.cursor = this.engine.create.ui.cursor(\r\n      100,\r\n      100,\r\n      1,\r\n      25,\r\n      0xffffff,\r\n      null,\r\n      this.state.camera\r\n    );\r\n\r\n    this.engine.addListeners(\"pointerup\", () => {});\r\n    addToLayer(this);\r\n  }\r\n  update() {\r\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\r\n\r\n    this.engine.update.check.characterZIndex([\r\n      this.player,\r\n      ...Object.values(this.enemy),\r\n    ]);\r\n\r\n    enemyMovement(this);\r\n    setDeath(this);\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { Inventory } from \"../../../../game/create\";\r\n\r\nexport const boxCreator = (scene: Scene, inventory: Inventory) => {\r\n  //create boxes\r\n  const box = inventory.createBox(300, 100, \"inventoryBox\", {\r\n    random: 2,\r\n  });\r\n};\r\n","import DefaultScene from \"..\";\r\nimport { collisionCellIds, enemyList } from \"./config\";\r\n\r\nexport default function create(scene: DefaultScene) {\r\n  enemyList.forEach((enemyUnit) => {\r\n    const { name, config, animations } = enemyUnit;\r\n    scene.enemy.push(\r\n      scene.engine.create.enemy(\r\n        config.x,\r\n        config.y,\r\n        config.spriteSheet,\r\n        config.textureFrame,\r\n        animations,\r\n        {\r\n          origin: config.origin,\r\n          vision: 150,\r\n          speed: 100,\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n\r\nexport function movementWatching(scene: DefaultScene) {\r\n  for (const [name, character] of Object.entries(scene.enemy)) {\r\n    character.watching([scene.player], collisionCellIds);\r\n  }\r\n}\r\n\r\nexport function setDeath(scene: DefaultScene) {\r\n  scene.enemy.filter((enemy) => enemy.mortal.fight.health >= 0);\r\n}\r\n","import DefaultScene from \"../..\";\r\nimport { addUIListToLayers } from \"./config\";\r\n\r\nexport function addToLayer(scene: DefaultScene) {\r\n  const addList = scene.engine.create.addToLayer;\r\n  if (scene.engine.layers) {\r\n    addList.characters(\r\n      [...scene.enemy, scene.player],\r\n      scene.engine.layers.gameElements.characters\r\n    );\r\n\r\n    addList.sprites(addUIListToLayers(scene), scene.engine.layers.ui);\r\n  }\r\n}\r\n","import DefaultScene from \"../..\";\r\nimport { LayerElementType } from \"../../../../../game/types\";\r\n\r\nexport const addUIListToLayers = (scene: DefaultScene) => {\r\n  const result: LayerElementType[] = [\r\n    scene.player.inventory.elements.container,\r\n  ];\r\n\r\n  if (scene.player.inventory.elements.uiButton) {\r\n    result.push(scene.player.inventory.elements.uiButton);\r\n  }\r\n\r\n  for (let i = 0; i < result.length; i++) {\r\n    const element = result[i];\r\n    element.setDepth(i);\r\n  }\r\n\r\n  return result;\r\n};\r\n","import DefaultScene from \"./scenes/DefaultScene\";\r\n\r\nconst groundSpriteSize = 32;\r\nconst minGroundNumber = 15;\r\nconst size = groundSpriteSize * minGroundNumber;\r\n\r\nexport const config = {\r\n  type: Phaser.AUTO,\r\n  parent: \"game-box\",\r\n  width: size,\r\n  height: size,\r\n  scene: [DefaultScene],\r\n  backgroundColor: 0x14003b,\r\n  // transparent: true\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      // debug: true,\r\n    },\r\n  },\r\n};\r\n","import React, { useEffect, useLayoutEffect } from \"react\";\r\nimport { renderGame } from \"../../game-modules\";\r\nimport css from \"./style.module.scss\";\r\n\r\nlet game: Phaser.Game | null = null;\r\n\r\nexport const Game = () => {\r\n  useLayoutEffect(() => {\r\n    game = renderGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      game?.destroy(true, true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"game-box\"></div>\r\n    </div>\r\n  );\r\n};\r\n","import Phaser from \"phaser\";\r\n\r\nimport { config } from \"./service/config\";\r\n\r\nexport const renderGame = () => new Phaser.Game(config);\r\n","import \"./App.css\";\r\nimport { Game } from \"./components/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}
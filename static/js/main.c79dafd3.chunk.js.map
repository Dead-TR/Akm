{"version":3,"sources":["game-modules/game/create/world.ts","game-modules/game/load/preload.ts","game-modules/game/create/animation.ts","game-modules/game/create/player/index.ts","game-modules/game/create/character.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["creator","showWorld","gridName","imgName","size","gridTileMap","this","make","tilemap","key","tileHeight","tileWidth","gridTileSet","addTilesetImage","undefined","createStaticLayer","World","scene","world","objects","call","configs","forEach","config","x","y","name","add","image","console","log","createWorld","preloadData","data","unit","method","content","load","createAnimation","frame","anims","create","frames","generateFrameNumbers","ways","frameRate","repeat","Animation","CreateCharacter","spriteSheet","textureFrame","actor","physics","sprite","speed","accuracy","xSide","ySide","setVelocityX","setVelocityY","createPlayer","CreatePlayer","cursor","coordinateX","coordinateY","side","isPaused","play","currentAnim","pause","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","restart","Game","bind","player","animation","ui","preload","event","callBack","playerGoFrames","start","end","playerAnims","playerData","frameWidth","frameHeight","startFrame","endFrame","path","DefaultScene","engine","state","addSimpleObjects","addAnimation","check","addListeners","move","Scene","type","Phaser","AUTO","parent","width","groundSpriteSize","height","backgroundColor","default","arcade","debug","useState","game","setGame","useLayoutEffect","useEffect","destroy","id","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.c79dafd3.chunk.js","sourcesContent":["import { Scene } from \"phaser\";\nimport { SimpleObject } from \"../types\";\nexport function creator(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number\n) {\n  const gridTileMap = this.make.tilemap({\n    key: gridName,\n    tileHeight: size,\n    tileWidth: size,\n  });\n\n  const gridTileSet = showWorld\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\n    : null;\n\n  // @ts-ignore: Unreachable code error\n  return gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\n}\n\nexport default class World {\n  world: Phaser.Tilemaps.Tilemap;\n  scene: Scene;\n  objects: {\n    [key: string]: Phaser.GameObjects.Image;\n  };\n\n  constructor(\n    scene: Scene,\n    showWorld: boolean,\n    gridName: string,\n    imgName: string,\n    size: number\n  ) {\n    this.scene = scene;\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\n    this.objects = {};\n  }\n\n  addSimpleObjects(configs: SimpleObject[]) {\n    configs.forEach((config) => {\n      const { x, y, imgName, name } = config;\n      this.objects[name] = this.scene.add.image(x, y, imgName);\n    });\n  }\n\n  show() {\n    console.log(\"ðŸš€ ~> \", this);\n  }\n}\n\nexport function createWorld(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number\n) {\n  return new World(this, showWorld, gridName, imgName, size);\n}\n","import { Scene } from \"phaser\";\nimport { PreloadTypes } from \"../types\";\n\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\n  data.forEach((unit) => {\n    const { method, data } = unit;\n\n    data.forEach((content) => {\n      // @ts-ignore: Unreachable code error\n      const result = this.load[method](...content);\n    });\n  });\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig } from \"../types\";\n\nexport default function createAnimation(\n  this: Scene,\n  configs: AnimationConfig[]\n) {\n  configs.forEach((config) => {\n    const { key, frame } = config;\n    this.anims.create({\n      key,\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\n      frameRate: frame.frameRate,\n      repeat: frame.repeat,\n    });\n  });\n}\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\nimport CreateCharacter from \"../character\";\n\nexport function createPlayer(\n  this: DefaultScene,\n  x: number,\n  y: number,\n  spriteSheet: string,\n  textureFrame: string | number | undefined\n) {\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame);\n}\n\nenum Animation {\n  \"left\" = \"playerGoLeft\",\n  \"right\" = \"playerGoRight\",\n  \"top\" = \"playerGoUp\",\n  \"bottom\" = \"playerGoDown\",\n}\n\nexport default class CreatePlayer extends CreateCharacter {\n  scene: DefaultScene;\n\n  constructor(\n    scene: DefaultScene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined\n  ) {\n    super(scene, x, y, spriteSheet, textureFrame);\n\n    this.scene = scene;\n  }\n  check() {\n    console.log(\"actor: \", this);\n  }\n\n  move(cursor: any) {\n    const coordinateX = cursor.x;\n    const coordinateY = cursor.y;\n\n    const side = super.move(coordinateX, coordinateY, 100, 5);\n\n    const [xSide, ySide] = side;\n\n    if (xSide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== Animation[xSide]) {\n        this.actor.anims.play(Animation[xSide]);\n      }\n    } else if (ySide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== Animation[ySide]) {\n        this.actor.anims.play(Animation[ySide]);\n      }\n    } else {\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\n    }\n\n    return side;\n  }\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig, Sides } from \"../types\";\nimport createAnimation from \"./animation\";\n\nexport default class CreateCharacter {\n  actor;\n  scene: Scene;\n\n  constructor(\n    scene: Scene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined\n  ) {\n    this.scene = scene;\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\n  }\n\n  addAnimation(configs: AnimationConfig[]) {\n    createAnimation.call(this.scene, configs);\n  }\n\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\n    const xSide =\n      this.actor.x - x < -accuracy\n        ? \"right\"\n        : this.actor.x - x > accuracy\n        ? \"left\"\n        : \"stop\";\n    const ySide =\n      this.actor.y - y < -accuracy\n        ? \"bottom\"\n        : this.actor.y - y > accuracy\n        ? \"top\"\n        : \"stop\";\n\n    if (xSide === \"right\") {\n      this.actor.setVelocityX(speed);\n    } else if (xSide === \"left\") {\n      this.actor.setVelocityX(-speed);\n    } else {\n      this.actor.setVelocityX(0);\n    }\n\n    if (ySide === \"bottom\") {\n      this.actor.setVelocityY(speed);\n    } else if (ySide === \"top\") {\n      this.actor.setVelocityY(-speed);\n    } else {\n      this.actor.setVelocityY(0);\n    }\n\n    return [xSide, ySide];\n  }\n}\n","import { Scene } from \"phaser\";\nimport { CursorBorderType } from \"../../../types\";\n\nexport default function createCursor(\n  this: Scene,\n  x: number,\n  y: number,\n  size: number,\n  scale: number,\n  background: number,\n  border?: CursorBorderType\n) {\n  const circle = this.add.circle(x, y, size, background);\n\n  if (border) {\n    const { color, size } = border;\n    circle.setStrokeStyle(size, color);\n  }\n\n  const tween = this.tweens.add({\n    delay: 0.1,\n    targets: circle,\n    scale: scale,\n    yoyo: false,\n    repeat: 0,\n    alpha: 0,\n    ease: \"Sine.easeInOut\",\n  });\n\n  this.input.on(\"pointerup\", () => {\n    circle.x = this.input.x;\n    circle.y = this.input.y;\n    tween.restart();\n  });\n\n  return circle;\n}\n","import { createWorld } from \"./create/world\";\nimport { preloadData } from \"./load/preload\";\nimport { CreateGameTypes, LoadGameTypes } from \"./types\";\nimport { createPlayer } from \"./create/player\";\nimport createAnimation from \"./create/animation\";\nimport DefaultScene from \"../service/scenes/DefaultScene\";\nimport createCursor from \"./create/UI/cursor\";\n\nexport default class Game {\n  scene: DefaultScene;\n  create: CreateGameTypes;\n  load: LoadGameTypes;\n\n  constructor(scene: DefaultScene) {\n    this.scene = scene;\n    this.create = {\n      world: createWorld.bind(this.scene),\n      player: createPlayer.bind(this.scene),\n      animation: createAnimation.bind(this.scene),\n\n      ui: {\n        cursor: createCursor.bind(this.scene),\n      },\n    };\n    this.load = {\n      preload: preloadData.bind(this.scene),\n    };\n  }\n\n  addListeners(event: string | symbol, callBack: () => void) {\n    this.scene.input.on(event, callBack);\n  }\n}\n","import { AnimationConfig } from \"../../../../game/types\";\n\nconst playerGoFrames = {\n  ways: {\n    start: 0,\n    end: 3,\n  },\n  frameRate: 6,\n  repeat: -1,\n};\n\nexport const playerAnims: AnimationConfig[] = [\n  {\n    key: \"playerGoUp\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerUp\",\n    },\n  },\n  {\n    key: \"playerGoDown\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerDown\",\n    },\n  },\n  {\n    key: \"playerGoLeft\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerLeft\",\n    },\n  },\n  {\n    key: \"playerGoRight\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerRight\",\n    },\n  },\n];\n","import { SimpleObject } from \"../../../../game/types\";\n\nexport const objects: SimpleObject[] = [];\n","import { PreloadTypes } from \"../../../../game/types\";\n\nconst playerData = {\n  frame: {\n    frameWidth: 20,\n    frameHeight: 45,\n    startFrame: 0,\n    endFrame: 3,\n  },\n  path: \"game/assets/img/DefaultScene/characters/player/\",\n};\n\nconst data: PreloadTypes[] = [\n  {\n    method: \"image\",\n    data: [\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\n    ],\n  },\n  {\n    method: \"tilemapCSV\",\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\n  },\n  {\n    method: \"spritesheet\",\n    data: [\n      [\"playerLeft\", `${playerData.path}p_left.png`, playerData.frame],\n      [\"playerRight\", `${playerData.path}p_right.png`, playerData.frame],\n      [\n        \"playerDown\",\n        `${playerData.path}p_down.png`,\n        { ...playerData.frame, frameHeight: 44 },\n      ],\n      [\n        \"playerUp\",\n        `${playerData.path}p_up.png`,\n        { ...playerData.frame, frameHeight: 44, frameWidth: 19 },\n      ],\n    ],\n  },\n];\n\nexport default data;\n","import { Scene } from \"phaser\";\nimport Game from \"../../../game\";\nimport CreatePlayer from \"../../../game/create/player\";\nimport World from \"../../../game/create/world\";\nimport cursorMove from \"./callBacks/cursorMove\";\nimport { playerAnims } from \"./configs/animations\";\nimport { objects } from \"./configs/objects\";\nimport preloadData from \"./configs/preloadData\";\n\nexport default class DefaultScene extends Scene {\n  engine: Game;\n  player: CreatePlayer;\n  world: World;\n\n  state: {\n    cursor?: Phaser.GameObjects.Arc;\n  };\n\n  constructor(config: string) {\n    super(config);\n    this.engine = new Game(this);\n    this.state = {};\n  }\n\n  preload() {\n    this.engine.load.preload(preloadData);\n  }\n  create() {\n    this.world = this.engine.create.world(\n      true,\n      \"exampleGrid\",\n      \"exampleGrassTile\",\n      32\n    );\n    this.world.addSimpleObjects(objects);\n    this.state.cursor = this.engine.create.ui.cursor(100, 100, 1, 25, 0xffffff);\n\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1);\n    this.player.addAnimation(playerAnims);\n    this.player.check();\n\n    this.engine.addListeners(\"pointerup\", () => {});\n  }\n  update() {\n    this.player.move(this.state.cursor);\n  }\n}\n","import DefaultScene from \"./scenes/DefaultScene\";\n\nconst groundSpriteSize = 32;\nconst minGroundNumber = 15;\nconst size = groundSpriteSize * minGroundNumber;\n\nexport const config = {\n  type: Phaser.AUTO,\n  parent: \"game-box\",\n  width: size,\n  height: size,\n  scene: [DefaultScene],\n  backgroundColor: 0x14003b,\n  // transparent: true\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      debug: false,\n    },\n  },\n};\n","import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { renderGame } from \"../../game-modules\";\nimport css from \"./style.module.scss\";\n\nexport const Game = () => {\n  const [game, setGame] = useState<Phaser.Game>();\n\n  useLayoutEffect(() => {\n    setGame(renderGame());\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      game?.destroy(true, true);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"game-box\"></div>\n    </div>\n  );\n};\n","import Phaser from \"phaser\";\n\nimport { config } from \"./service/config\";\n\nexport const renderGame = () => new Phaser.Game(config);\n","import \"./App.css\";\nimport { Game } from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["game-modules/game/create/character.ts","game-modules/game/create/enemy/index.ts","game-modules/game/create/player/index.ts","game-modules/game/create/world.ts","game-modules/game/create/animation.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/load/preload.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/scenes/DefaultScene/configs/enemy.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["CreateCharacter","scene","x","y","spriteSheet","textureFrame","origin","actor","collision","top","calc","blocked","bottom","left","right","this","physics","add","sprite","setOrigin","world","Object","entries","key","value","valueLine","worldIndex","getTileAtWorldXY","index","id","indexOf","params","direction","coordinates","speed","accuracy","xSide","ySide","setVelocityX","setVelocityY","createEnemy","animations","CreateEnemy","Animation","visionDistance","vision","movement","enemies","target","undefined","find","enemy","xDifference","Math","abs","yDifference","checkCollision","createCollision","side","anims","isPaused","play","currentAnim","pause","frames","createPlayer","CreatePlayer","cursor","creator","showWorld","gridName","imgName","size","gridTileMap","make","tilemap","tileHeight","tileWidth","gridTileSet","addTilesetImage","createStaticLayer","World","objects","call","configs","forEach","config","name","image","createWorld","createAnimation","frame","create","generateFrameNumbers","ways","frameRate","repeat","createCamera","camera","cameras","main","setBounds","Number","width","height","startFollow","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","fehlerX","fehlerY","scrollX","scrollY","restart","preloadData","data","unit","method","content","load","Game","bind","player","animation","ui","preload","event","callBack","goingAnimationFrames","start","end","animationList","collisionCellIds","enemyList","playerData","frameWidth","frameHeight","startFrame","endFrame","path","zombieData","DefaultScene","engine","state","addSimpleObjects","addListeners","move","watching","enemyMovement","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","game","useLayoutEffect","useEffect","destroy","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.a438437e.chunk.js","sourcesContent":["import { Scene } from \"phaser\";\r\nimport { AnimationConfig, Sides } from \"../types\";\r\nimport createAnimation from \"./animation\";\r\n\r\nexport default class CreateCharacter {\r\n  actor;\r\n  scene: Scene;\r\n\r\n  collision = {\r\n    top: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    bottom: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n    left: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    right: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    origin?: number[]\r\n  ) {\r\n    this.scene = scene;\r\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\r\n\r\n    if (origin) {\r\n      this.actor.setOrigin(...origin);\r\n    }\r\n  }\r\n\r\n  checkCollision(x: number, y: number, world: any, collision: number[]) {\r\n    for (const [key, value] of Object.entries(this.collision)) {\r\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\r\n\r\n      const worldIndex = world.getTileAtWorldXY(\r\n        valueLine === \"x\" ? x + value.calc : x,\r\n        valueLine === \"y\" ? y + value.calc : y,\r\n        false\r\n      )?.index;\r\n\r\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\r\n\r\n      if (!id || id !== -1) {\r\n        value.blocked = true;\r\n      } else {\r\n        value.blocked = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  createCollision(params: {\r\n    direction: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    coordinates: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n  }) {\r\n    if (this.collision.right.blocked) {\r\n      if (params.direction.x > 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    } else if (this.collision.left.blocked) {\r\n      if (params.direction.x < 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    }\r\n\r\n    if (this.collision.bottom.blocked) {\r\n      if (params.direction.y > 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    } else if (this.collision.top.blocked) {\r\n      if (params.direction.y < 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    }\r\n  }\r\n\r\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\r\n    const xSide =\r\n      this.actor.x - x < -accuracy\r\n        ? \"right\"\r\n        : this.actor.x - x > accuracy\r\n        ? \"left\"\r\n        : \"stop\";\r\n    const ySide =\r\n      this.actor.y - y < -accuracy\r\n        ? \"bottom\"\r\n        : this.actor.y - y > accuracy\r\n        ? \"top\"\r\n        : \"stop\";\r\n\r\n    if (xSide === \"right\") {\r\n      this.actor.setVelocityX(speed);\r\n    } else if (xSide === \"left\") {\r\n      this.actor.setVelocityX(-speed);\r\n    } else {\r\n      this.actor.setVelocityX(0);\r\n    }\r\n\r\n    if (ySide === \"bottom\") {\r\n      this.actor.setVelocityY(speed);\r\n    } else if (ySide === \"top\") {\r\n      this.actor.setVelocityY(-speed);\r\n    } else {\r\n      this.actor.setVelocityY(0);\r\n    }\r\n\r\n    return [xSide, ySide];\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport { AnimationsListType } from \"../../../service/scenes/DefaultScene/configs/types\";\r\nimport CreateCharacter from \".././character\";\r\nimport { EnemyAnimationsList } from \"./types\";\r\n\r\ntype Actor = Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\r\n\r\nexport function createEnemy(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  animations: AnimationsListType,\r\n  params?: {\r\n    origin?: number[];\r\n    vision?: number;\r\n    speed?: number;\r\n  }\r\n) {\r\n  return new CreateEnemy(\r\n    this,\r\n    x,\r\n    y,\r\n    spriteSheet,\r\n    textureFrame,\r\n    animations,\r\n    params\r\n  );\r\n}\r\n\r\nexport default class CreateEnemy extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  visionDistance = 100;\r\n  speed = 100;\r\n  animations: EnemyAnimationsList;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    animations: AnimationsListType,\r\n\r\n    params?: {\r\n      origin?: number[];\r\n      vision?: number;\r\n      speed?: number;\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, params?.origin);\r\n    this.scene = scene;\r\n    this.visionDistance = params?.vision || this.visionDistance;\r\n    this.speed = params?.speed || this.speed;\r\n    this.animations = {\r\n      movement: animations,\r\n    };\r\n  }\r\n\r\n  watching(enemies: Actor[], collision?: number[]) {\r\n    let accuracy = 25;\r\n\r\n    let target: Actor | undefined = undefined;\r\n\r\n    if (!target) {\r\n      target = enemies.find((enemy) => {\r\n        const xDifference = Math.abs(enemy.x - this.actor.x);\r\n        const yDifference = Math.abs(enemy.y - this.actor.y);\r\n\r\n        if (\r\n          xDifference < this.visionDistance ||\r\n          yDifference < this.visionDistance\r\n        ) {\r\n          return enemy;\r\n        }\r\n      });\r\n    }\r\n    if (target) {\r\n      // console.log(this.animations);\r\n      const params = {\r\n        direction: {\r\n          x: target.x - this.actor.x,\r\n          y: target.y - this.actor.y,\r\n        },\r\n        coordinates: {\r\n          x: target.x,\r\n          y: target.y,\r\n        },\r\n      };\r\n      if (collision) {\r\n        this.checkCollision(\r\n          this.actor.x,\r\n          this.actor.y,\r\n          this.scene.world.world,\r\n          collision\r\n        );\r\n        this.createCollision(params);\r\n      }\r\n      const side = super.move(\r\n        params.coordinates.x,\r\n        params.coordinates.y,\r\n        this.speed,\r\n        accuracy\r\n      );\r\n\r\n      if (this.animations.movement) {\r\n        const [xSide, ySide] = side;\r\n        const movement = this.animations.movement;\r\n\r\n        if (xSide !== \"stop\") {\r\n          if (this.actor.anims.isPaused) {\r\n            this.actor.anims.play(this.actor.anims.currentAnim);\r\n          }\r\n\r\n          if (this.actor.anims.currentAnim?.key !== movement[xSide]) {\r\n            this.actor.anims.play(movement[xSide]);\r\n          }\r\n        } else if (ySide !== \"stop\") {\r\n          if (this.actor.anims.isPaused) {\r\n            this.actor.anims.play(this.actor.anims.currentAnim);\r\n          }\r\n\r\n          if (this.actor.anims.currentAnim?.key !== movement[ySide]) {\r\n            this.actor.anims.play(movement[ySide]);\r\n          }\r\n        } else {\r\n          this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport CreateCharacter from \"../character\";\r\n\r\nenum Animation {\r\n  \"left\" = \"playerGoLeft\",\r\n  \"right\" = \"playerGoRight\",\r\n  \"top\" = \"playerGoUp\",\r\n  \"bottom\" = \"playerGoDown\",\r\n}\r\n\r\nexport function createPlayer(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  origin?: number[]\r\n) {\r\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, origin);\r\n}\r\n\r\nexport default class CreatePlayer extends CreateCharacter {\r\n  scene: DefaultScene;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    origin?: number[]\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, origin);\r\n    this.scene = scene;\r\n  }\r\n\r\n  //@ts-ignore\r\n  move(cursor: any, world: any, collision: number[]) {\r\n    let speed = 100;\r\n    let accuracy = 5;\r\n\r\n    this.checkCollision(this.actor.x, this.actor.y, world, collision);\r\n    const params = {\r\n      direction: {\r\n        x: cursor.x - this.actor.x,\r\n        y: cursor.y - this.actor.y,\r\n      },\r\n      coordinates: {\r\n        x: cursor.x,\r\n        y: cursor.y,\r\n      },\r\n    };\r\n\r\n    this.createCollision(params);\r\n\r\n    const side = super.move(\r\n      params.coordinates.x,\r\n      params.coordinates.y,\r\n      speed,\r\n      accuracy\r\n    );\r\n\r\n    const [xSide, ySide] = side;\r\n    if (xSide !== \"stop\") {\r\n      if (this.actor.anims.isPaused) {\r\n        this.actor.anims.play(this.actor.anims.currentAnim);\r\n      }\r\n\r\n      if (this.actor.anims.currentAnim?.key !== Animation[xSide]) {\r\n        this.actor.anims.play(Animation[xSide]);\r\n      }\r\n    } else if (ySide !== \"stop\") {\r\n      if (this.actor.anims.isPaused) {\r\n        this.actor.anims.play(this.actor.anims.currentAnim);\r\n      }\r\n\r\n      if (this.actor.anims.currentAnim?.key !== Animation[ySide]) {\r\n        this.actor.anims.play(Animation[ySide]);\r\n      }\r\n    } else {\r\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\r\n    }\r\n\r\n    return side;\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { SimpleObject } from \"../types\";\r\nexport function creator(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  const gridTileMap = this.make.tilemap({\r\n    key: gridName,\r\n    tileHeight: size,\r\n    tileWidth: size,\r\n  });\r\n\r\n  const gridTileSet = showWorld\r\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\r\n    : null;\r\n\r\n  // @ts-ignore\r\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\r\n\r\n  return tileLayer;\r\n}\r\n\r\nexport default class World {\r\n  world: any;\r\n  scene: Scene;\r\n  objects: {\r\n    [key: string]: Phaser.GameObjects.Image;\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    showWorld: boolean,\r\n    gridName: string,\r\n    imgName: string,\r\n    size: number\r\n  ) {\r\n    this.scene = scene;\r\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\r\n    this.objects = {};\r\n  }\r\n\r\n  addSimpleObjects(configs: SimpleObject[]) {\r\n    configs.forEach((config) => {\r\n      const { x, y, imgName, name } = config;\r\n      this.objects[name] = this.scene.add.image(x, y, imgName);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createWorld(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  return new World(this, showWorld, gridName, imgName, size);\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { AnimationConfig } from \"../types\";\r\n\r\nexport default function createAnimation(\r\n  this: Scene,\r\n  configs: AnimationConfig[]\r\n) {\r\n  configs.forEach((config) => {\r\n    const { key, frame } = config;\r\n    this.anims.create({\r\n      key,\r\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\r\n      frameRate: frame.frameRate,\r\n      repeat: frame.repeat,\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\n\r\nexport default function createCamera(\r\n  this: Scene,\r\n  actor: Phaser.GameObjects.GameObject | Object,\r\n  world: any\r\n) {\r\n  const camera = this.cameras.main;\r\n\r\n  camera\r\n    .setBounds(0, 0, Number(world.width), Number(world.height))\r\n    .startFollow(actor, true, 1, 1, 0, 0);\r\n\r\n  return camera;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CursorBorderType } from \"../../../types\";\r\n\r\nexport default function createCursor(\r\n  this: Scene,\r\n  x: number,\r\n  y: number,\r\n  size: number,\r\n  scale: number,\r\n  background: number,\r\n  border?: CursorBorderType | null,\r\n  camera?: Phaser.Cameras.Scene2D.Camera\r\n) {\r\n  const circle = this.add.circle(x, y, size, background);\r\n\r\n  if (border) {\r\n    const { color, size } = border;\r\n    circle.setStrokeStyle(size, color);\r\n  }\r\n\r\n  const tween = this.tweens.add({\r\n    delay: 0.1,\r\n    targets: circle,\r\n    scale: scale,\r\n    yoyo: false,\r\n    repeat: 0,\r\n    alpha: 0,\r\n    ease: \"Sine.easeInOut\",\r\n  });\r\n\r\n  this.input.on(\"pointerdown\", () => {\r\n    let fehlerX = 0,\r\n      fehlerY = 0;\r\n\r\n    if (camera) {\r\n      fehlerX = camera.scrollX;\r\n      fehlerY = camera.scrollY;\r\n    }\r\n\r\n    circle.x = this.input.x + fehlerX;\r\n    circle.y = this.input.y + fehlerY;\r\n    tween.restart();\r\n  });\r\n\r\n  return circle;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { PreloadTypes } from \"../types\";\r\n\r\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\r\n  data.forEach((unit) => {\r\n    const { method, data } = unit;\r\n\r\n    data.forEach((content) => {\r\n      // @ts-ignore: Unreachable code error\r\n      const result = this.load[method](...content);\r\n    });\r\n  });\r\n}\r\n","import {\r\n  createAnimation,\r\n  createCamera,\r\n  createCursor,\r\n  createEnemy,\r\n  createPlayer,\r\n  createWorld,\r\n} from \"./create\";\r\nimport { CreateGameTypes, LoadGameTypes } from \"./types\";\r\nimport { preloadData } from \"./load/preload\";\r\nimport DefaultScene from \"../service/scenes/DefaultScene\";\r\n\r\nexport default class Game {\r\n  scene: DefaultScene;\r\n  create: CreateGameTypes;\r\n  load: LoadGameTypes;\r\n\r\n  constructor(scene: DefaultScene) {\r\n    this.scene = scene;\r\n    this.create = {\r\n      world: createWorld.bind(this.scene),\r\n      player: createPlayer.bind(this.scene),\r\n      enemy: createEnemy.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n      camera: createCamera.bind(this.scene),\r\n\r\n      ui: {\r\n        cursor: createCursor.bind(this.scene),\r\n      },\r\n    };\r\n    this.load = {\r\n      preload: preloadData.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n    };\r\n  }\r\n\r\n  addListeners(event: string | symbol, callBack: () => void) {\r\n    this.scene.input.on(event, callBack);\r\n  }\r\n}\r\n","import { AnimationConfig } from \"../../../../game/types\";\r\n\r\nconst goingAnimationFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 3,\r\n  },\r\n  frameRate: 6,\r\n  repeat: -1,\r\n};\r\n\r\nexport const animationList: AnimationConfig[] = [\r\n  {\r\n    key: \"playerGoUp\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"playerUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoDown\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"playerDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoLeft\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"playerLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoRight\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"playerRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieU\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"zombieUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieD\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"zombieDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieL\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"zombieLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieR\",\r\n    frame: {\r\n      ...goingAnimationFrames,\r\n      name: \"zombieRight\",\r\n    },\r\n  },\r\n];\r\n","import { EnemyListConfig } from \"./types\";\r\nimport { animationList } from \"./animations\";\r\n\r\nexport const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\r\n\r\nexport const enemyList: EnemyListConfig[] = [\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 300,\r\n      y: 300,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n    },\r\n  },\r\n];\r\n","import { SimpleObject } from \"../../../../game/types\";\r\n\r\nexport const objects: SimpleObject[] = [];\r\n","import { PreloadTypes } from \"../../../../game/types\";\r\n\r\nconst playerData = {\r\n  frame: {\r\n    frameWidth: 20,\r\n    frameHeight: 45,\r\n    startFrame: 0,\r\n    endFrame: 3,\r\n  },\r\n  path: \"game/assets/img/DefaultScene/characters/player/\",\r\n};\r\n\r\nconst zombieData = {\r\n  frame: {\r\n    frameWidth: 20,\r\n    frameHeight: 45,\r\n    startFrame: 0,\r\n    endFrame: 3,\r\n  },\r\n  path: \"game/assets/img/DefaultScene/characters/enemies/zombie/\",\r\n};\r\n\r\nconst data: PreloadTypes[] = [\r\n  {\r\n    method: \"image\",\r\n    data: [\r\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\r\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\r\n      [\"empty\", \"game/assets/img/general/emptyLayers.png\"],\r\n    ],\r\n  },\r\n  {\r\n    method: \"tilemapCSV\",\r\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\r\n  },\r\n  {\r\n    method: \"spritesheet\",\r\n    data: [\r\n      [\"playerLeft\", `${playerData.path}p_left.png`, playerData.frame],\r\n      [\"playerRight\", `${playerData.path}p_right.png`, playerData.frame],\r\n      [\r\n        \"playerDown\",\r\n        `${playerData.path}p_down.png`,\r\n        { ...playerData.frame, frameHeight: 44 },\r\n      ],\r\n      [\r\n        \"playerUp\",\r\n        `${playerData.path}p_up.png`,\r\n        { ...playerData.frame, frameHeight: 44, frameWidth: 19 },\r\n      ],\r\n\r\n      [\r\n        \"zombieLeft\",\r\n        `${zombieData.path}p_left.png`,\r\n        { ...zombieData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\r\n        \"zombieRight\",\r\n        `${zombieData.path}p_right.png`,\r\n        { ...zombieData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\"zombieUp\", `${zombieData.path}p_up.png`, zombieData.frame],\r\n      [\"zombieDown\", `${zombieData.path}p_down.png`, zombieData.frame],\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import { Scene } from \"phaser\";\r\nimport Game from \"../../../game\";\r\nimport CreatePlayer from \"../../../game/create/player\";\r\nimport World from \"../../../game/create/world\";\r\nimport { EnemyListType } from \"../../../game/types\";\r\nimport { animationList } from \"./configs/animations\";\r\nimport { collisionCellIds } from \"./configs/config\";\r\nimport enemyCreator, {\r\n  movementWatching as enemyMovement,\r\n} from \"./configs/enemy\";\r\nimport { objects } from \"./configs/objects\";\r\nimport preloadData from \"./configs/preloadData\";\r\n\r\nexport default class DefaultScene extends Scene {\r\n  engine: Game;\r\n  player: CreatePlayer;\r\n  world: World;\r\n  enemy: EnemyListType = {};\r\n\r\n  state: {\r\n    cursor?: Phaser.GameObjects.Arc;\r\n    camera?: Phaser.Cameras.Scene2D.Camera;\r\n  };\r\n\r\n  constructor(config: string) {\r\n    super(config);\r\n    this.engine = new Game(this);\r\n    this.state = {};\r\n  }\r\n\r\n  preload() {\r\n    this.engine.load.preload(preloadData);\r\n  }\r\n  create() {\r\n    this.engine.load.animation(animationList);\r\n    this.world = this.engine.create.world(\r\n      true,\r\n      \"exampleGrid\",\r\n      \"exampleGrassTile\",\r\n      32\r\n    );\r\n    this.world.addSimpleObjects(objects);\r\n\r\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, [0.5, 0.8]);\r\n    enemyCreator(this);\r\n\r\n    this.state.camera = this.engine.create.camera(\r\n      this.player.actor,\r\n      this.world.world\r\n    );\r\n\r\n    this.state.cursor = this.engine.create.ui.cursor(\r\n      100,\r\n      100,\r\n      1,\r\n      25,\r\n      0xffffff,\r\n      null,\r\n      this.state.camera\r\n    );\r\n\r\n    this.engine.addListeners(\"pointerup\", () => {});\r\n  }\r\n  update() {\r\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\r\n\r\n    enemyMovement(this);\r\n  }\r\n}\r\n","import DefaultScene from \"..\";\r\nimport { collisionCellIds, enemyList } from \"./config\";\r\n\r\nexport default function create(scene: DefaultScene) {\r\n  enemyList.forEach((unit) => {\r\n    const { name, config, animations } = unit;\r\n    scene.enemy[name] = scene.engine.create.enemy(\r\n      config.x,\r\n      config.y,\r\n      config.spriteSheet,\r\n      config.textureFrame,\r\n      animations.movement,\r\n      {\r\n        origin: config.origin,\r\n        vision: 50,\r\n        speed: 100,\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport function movementWatching(scene: DefaultScene) {\r\n  for (const [name, character] of Object.entries(scene.enemy)) {\r\n    character.watching([scene.player.actor], collisionCellIds);\r\n  }\r\n}\r\n","import DefaultScene from './scenes/DefaultScene'\r\n\r\nconst groundSpriteSize = 32\r\nconst minGroundNumber = 15\r\nconst size = groundSpriteSize * minGroundNumber\r\n\r\nexport const config = {\r\n  type: Phaser.AUTO,\r\n  parent: 'game-box',\r\n  width: size,\r\n  height: size,\r\n  scene: [DefaultScene],\r\n  backgroundColor: 0x14003b,\r\n  // transparent: true\r\n  physics: {\r\n    default: 'arcade',\r\n    arcade: {\r\n      // debug: true,\r\n    },\r\n  },\r\n}\r\n","import React, { useEffect, useLayoutEffect } from \"react\";\r\nimport { renderGame } from \"../../game-modules\";\r\nimport css from \"./style.module.scss\";\r\n\r\nlet game: Phaser.Game | null = null;\r\n\r\nexport const Game = () => {\r\n  useLayoutEffect(() => {\r\n    game = renderGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      game?.destroy(true, true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"game-box\"></div>\r\n    </div>\r\n  );\r\n};\r\n","import Phaser from \"phaser\";\r\n\r\nimport { config } from \"./service/config\";\r\n\r\nexport const renderGame = () => new Phaser.Game(config);\r\n","import \"./App.css\";\r\nimport { Game } from \"./components/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}
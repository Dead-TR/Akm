{"version":3,"sources":["game-modules/game/create/world.ts","game-modules/game/load/preload.ts","game-modules/game/create/animation.ts","game-modules/game/create/player/index.ts","game-modules/game/create/character.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["creator","showWorld","gridName","imgName","size","gridTileMap","this","make","tilemap","key","tileHeight","tileWidth","gridTileSet","addTilesetImage","undefined","createStaticLayer","World","scene","world","objects","call","configs","forEach","config","x","y","name","add","image","createWorld","preloadData","data","unit","method","content","load","createAnimation","frame","anims","create","frames","generateFrameNumbers","ways","frameRate","repeat","Animation","CreateCharacter","spriteSheet","textureFrame","origin","actor","collision","top","calc","blocked","bottom","left","right","physics","sprite","setOrigin","Object","entries","value","valueLine","worldIndex","getTileAtWorldXY","index","id","indexOf","speed","accuracy","xSide","ySide","setVelocityX","setVelocityY","createPlayer","CreatePlayer","isCollisionCreated","cursor","checkCollision","directionX","directionY","coordinateX","coordinateY","side","isPaused","play","currentAnim","pause","createCamera","camera","cameras","main","setBounds","Number","width","height","startFollow","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","fehlerX","fehlerY","scrollX","scrollY","restart","Game","bind","player","animation","ui","preload","event","callBack","playerGoFrames","start","end","playerAnims","collisionCellIds","playerData","frameWidth","frameHeight","startFrame","endFrame","path","DefaultScene","engine","state","addSimpleObjects","addAnimation","addListeners","move","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","game","useLayoutEffect","useEffect","destroy","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ac31d2b.chunk.js","sourcesContent":["import { Scene } from \"phaser\";\nimport { SimpleObject } from \"../types\";\nexport function creator(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number\n) {\n  const gridTileMap = this.make.tilemap({\n    key: gridName,\n    tileHeight: size,\n    tileWidth: size,\n  });\n\n  const gridTileSet = showWorld\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\n    : null;\n\n  // @ts-ignore\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\n\n  return tileLayer;\n}\n\nexport default class World {\n  world: any;\n  scene: Scene;\n  objects: {\n    [key: string]: Phaser.GameObjects.Image;\n  };\n\n  constructor(\n    scene: Scene,\n    showWorld: boolean,\n    gridName: string,\n    imgName: string,\n    size: number\n  ) {\n    this.scene = scene;\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\n    this.objects = {};\n  }\n\n  addSimpleObjects(configs: SimpleObject[]) {\n    configs.forEach((config) => {\n      const { x, y, imgName, name } = config;\n      this.objects[name] = this.scene.add.image(x, y, imgName);\n    });\n  }\n}\n\nexport function createWorld(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number\n) {\n  return new World(this, showWorld, gridName, imgName, size);\n}\n","import { Scene } from \"phaser\";\nimport { PreloadTypes } from \"../types\";\n\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\n  data.forEach((unit) => {\n    const { method, data } = unit;\n\n    data.forEach((content) => {\n      // @ts-ignore: Unreachable code error\n      const result = this.load[method](...content);\n    });\n  });\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig } from \"../types\";\n\nexport default function createAnimation(\n  this: Scene,\n  configs: AnimationConfig[]\n) {\n  configs.forEach((config) => {\n    const { key, frame } = config;\n    this.anims.create({\n      key,\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\n      frameRate: frame.frameRate,\n      repeat: frame.repeat,\n    });\n  });\n}\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\nimport CreateCharacter from \"../character\";\n\nenum Animation {\n  \"left\" = \"playerGoLeft\",\n  \"right\" = \"playerGoRight\",\n  \"top\" = \"playerGoUp\",\n  \"bottom\" = \"playerGoDown\",\n}\n\nexport function createPlayer(\n  this: DefaultScene,\n  x: number,\n  y: number,\n  spriteSheet: string,\n  textureFrame: string | number | undefined,\n  origin?: number[]\n) {\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, origin);\n}\n\nexport default class CreatePlayer extends CreateCharacter {\n  scene: DefaultScene;\n\n  isCollisionCreated = false;\n\n  constructor(\n    scene: DefaultScene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    origin?: number[]\n  ) {\n    super(scene, x, y, spriteSheet, textureFrame, origin);\n    this.scene = scene;\n  }\n\n  //@ts-ignore\n  move(cursor: any, world: any, collision: number[]) {\n    let speed = 100;\n    let accuracy = 5;\n\n    this.checkCollision(this.actor.x, this.actor.y, world, collision);\n    const directionX = cursor.x - this.actor.x; // +right -left\n    const directionY = cursor.y - this.actor.y; // -top +bottom\n\n    let coordinateX = cursor.x;\n    let coordinateY = cursor.y;\n\n    if (this.collision.right.blocked) {\n      if (directionX > 0) {\n        coordinateX = this.actor.x;\n      }\n    } else if (this.collision.left.blocked) {\n      if (directionX < 0) {\n        coordinateX = this.actor.x;\n      }\n    }\n\n    if (this.collision.bottom.blocked) {\n      if (directionY > 0) {\n        coordinateY = this.actor.y;\n      }\n    } else if (this.collision.top.blocked) {\n      if (directionY < 0) {\n        coordinateY = this.actor.y;\n      }\n    }\n\n    const side = super.move(coordinateX, coordinateY, speed, accuracy);\n\n    const [xSide, ySide] = side;\n\n    if (xSide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== Animation[xSide]) {\n        this.actor.anims.play(Animation[xSide]);\n      }\n    } else if (ySide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== Animation[ySide]) {\n        this.actor.anims.play(Animation[ySide]);\n      }\n    } else {\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\n    }\n\n    return side;\n  }\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig, Sides } from \"../types\";\nimport createAnimation from \"./animation\";\n\nexport default class CreateCharacter {\n  actor;\n  scene: Scene;\n\n  collision = {\n    top: {\n      calc: -15,\n      blocked: false,\n    },\n    bottom: {\n      calc: 15,\n      blocked: false,\n    },\n    left: {\n      calc: -15,\n      blocked: false,\n    },\n    right: {\n      calc: 15,\n      blocked: false,\n    },\n  };\n\n  constructor(\n    scene: Scene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    origin?: number[]\n  ) {\n    this.scene = scene;\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\n\n    if (origin) {\n      this.actor.setOrigin(...origin);\n    }\n  }\n\n  addAnimation(configs: AnimationConfig[]) {\n    createAnimation.call(this.scene, configs);\n  }\n\n  checkCollision(x: number, y: number, world: any, collision: number[]) {\n    for (const [key, value] of Object.entries(this.collision)) {\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\n\n      const worldIndex = world.getTileAtWorldXY(\n        valueLine === \"x\" ? x + value.calc : x,\n        valueLine === \"y\" ? y + value.calc : y,\n        false\n      )?.index;\n\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\n\n      if (!id || id !== -1) {\n        value.blocked = true;\n      } else {\n        value.blocked = false;\n      }\n    }\n  }\n\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\n    const xSide =\n      this.actor.x - x < -accuracy\n        ? \"right\"\n        : this.actor.x - x > accuracy\n        ? \"left\"\n        : \"stop\";\n    const ySide =\n      this.actor.y - y < -accuracy\n        ? \"bottom\"\n        : this.actor.y - y > accuracy\n        ? \"top\"\n        : \"stop\";\n\n    if (xSide === \"right\") {\n      this.actor.setVelocityX(speed);\n    } else if (xSide === \"left\") {\n      this.actor.setVelocityX(-speed);\n    } else {\n      this.actor.setVelocityX(0);\n    }\n\n    if (ySide === \"bottom\") {\n      this.actor.setVelocityY(speed);\n    } else if (ySide === \"top\") {\n      this.actor.setVelocityY(-speed);\n    } else {\n      this.actor.setVelocityY(0);\n    }\n\n    return [xSide, ySide];\n  }\n}\n","import { Scene } from \"phaser\";\n\nexport default function createCamera(\n  this: Scene,\n  actor: Phaser.GameObjects.GameObject | Object,\n  world: any\n) {\n  const camera = this.cameras.main;\n\n  camera\n    .setBounds(0, 0, Number(world.width), Number(world.height))\n    .startFollow(actor, true, 1, 1, 0, 0);\n\n  return camera;\n}\n","import { Scene } from \"phaser\";\nimport { CursorBorderType } from \"../../../types\";\n\nexport default function createCursor(\n  this: Scene,\n  x: number,\n  y: number,\n  size: number,\n  scale: number,\n  background: number,\n  border?: CursorBorderType | null,\n  camera?: Phaser.Cameras.Scene2D.Camera\n) {\n  const circle = this.add.circle(x, y, size, background);\n\n  if (border) {\n    const { color, size } = border;\n    circle.setStrokeStyle(size, color);\n  }\n\n  const tween = this.tweens.add({\n    delay: 0.1,\n    targets: circle,\n    scale: scale,\n    yoyo: false,\n    repeat: 0,\n    alpha: 0,\n    ease: \"Sine.easeInOut\",\n  });\n\n  this.input.on(\"pointerdown\", () => {\n    let fehlerX = 0,\n      fehlerY = 0;\n\n    if (camera) {\n      fehlerX = camera.scrollX;\n      fehlerY = camera.scrollY;\n    }\n\n    circle.x = this.input.x + fehlerX;\n    circle.y = this.input.y + fehlerY;\n    tween.restart();\n  });\n\n  return circle;\n}\n","import { createWorld } from \"./create/world\";\nimport { preloadData } from \"./load/preload\";\nimport { CreateGameTypes, LoadGameTypes } from \"./types\";\nimport { createPlayer } from \"./create/player\";\nimport createAnimation from \"./create/animation\";\nimport createCamera from \"./create/camera\";\nimport DefaultScene from \"../service/scenes/DefaultScene\";\nimport createCursor from \"./create/UI/cursor\";\n\nexport default class Game {\n  scene: DefaultScene;\n  create: CreateGameTypes;\n  load: LoadGameTypes;\n\n  constructor(scene: DefaultScene) {\n    this.scene = scene;\n    this.create = {\n      world: createWorld.bind(this.scene),\n      player: createPlayer.bind(this.scene),\n      animation: createAnimation.bind(this.scene),\n      camera: createCamera.bind(this.scene),\n\n      ui: {\n        cursor: createCursor.bind(this.scene),\n      },\n    };\n    this.load = {\n      preload: preloadData.bind(this.scene),\n    };\n  }\n\n  addListeners(event: string | symbol, callBack: () => void) {\n    this.scene.input.on(event, callBack);\n  }\n}\n","import { AnimationConfig } from \"../../../../game/types\";\n\nconst playerGoFrames = {\n  ways: {\n    start: 0,\n    end: 3,\n  },\n  frameRate: 6,\n  repeat: -1,\n};\n\nexport const playerAnims: AnimationConfig[] = [\n  {\n    key: \"playerGoUp\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerUp\",\n    },\n  },\n  {\n    key: \"playerGoDown\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerDown\",\n    },\n  },\n  {\n    key: \"playerGoLeft\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerLeft\",\n    },\n  },\n  {\n    key: \"playerGoRight\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerRight\",\n    },\n  },\n];\n","export const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\n","import { SimpleObject } from \"../../../../game/types\";\n\nexport const objects: SimpleObject[] = [];\n","import { PreloadTypes } from \"../../../../game/types\";\n\nconst playerData = {\n  frame: {\n    frameWidth: 20,\n    frameHeight: 45,\n    startFrame: 0,\n    endFrame: 3,\n  },\n  path: \"game/assets/img/DefaultScene/characters/player/\",\n};\n\nconst data: PreloadTypes[] = [\n  {\n    method: \"image\",\n    data: [\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\n      [\"empty\", \"game/assets/img/general/emptyLayers.png\"],\n    ],\n  },\n  {\n    method: \"tilemapCSV\",\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\n  },\n  {\n    method: \"spritesheet\",\n    data: [\n      [\"playerLeft\", `${playerData.path}p_left.png`, playerData.frame],\n      [\"playerRight\", `${playerData.path}p_right.png`, playerData.frame],\n      [\n        \"playerDown\",\n        `${playerData.path}p_down.png`,\n        { ...playerData.frame, frameHeight: 44 },\n      ],\n      [\n        \"playerUp\",\n        `${playerData.path}p_up.png`,\n        { ...playerData.frame, frameHeight: 44, frameWidth: 19 },\n      ],\n    ],\n  },\n];\n\nexport default data;\n","import { Scene } from \"phaser\";\nimport Game from \"../../../game\";\nimport CreatePlayer from \"../../../game/create/player\";\nimport World from \"../../../game/create/world\";\nimport { playerAnims } from \"./configs/animations\";\nimport { collisionCellIds } from \"./configs/config\";\nimport { objects } from \"./configs/objects\";\nimport preloadData from \"./configs/preloadData\";\n\nexport default class DefaultScene extends Scene {\n  engine: Game;\n  player: CreatePlayer;\n  world: World;\n\n  state: {\n    cursor?: Phaser.GameObjects.Arc;\n    camera?: Phaser.Cameras.Scene2D.Camera;\n  };\n\n  constructor(config: string) {\n    super(config);\n    this.engine = new Game(this);\n    this.state = {};\n  }\n\n  preload() {\n    this.engine.load.preload(preloadData);\n  }\n  create() {\n    this.world = this.engine.create.world(\n      true,\n      \"exampleGrid\",\n      \"exampleGrassTile\",\n      32\n    );\n    this.world.addSimpleObjects(objects);\n\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, [0.5, 0.8]);\n    this.player.addAnimation(playerAnims);\n\n    this.state.camera = this.engine.create.camera(\n      this.player.actor,\n      this.world.world\n    );\n\n    this.state.cursor = this.engine.create.ui.cursor(\n      100,\n      100,\n      1,\n      25,\n      0xffffff,\n      null,\n      this.state.camera\n    );\n\n    this.engine.addListeners(\"pointerup\", () => {});\n  }\n  update() {\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\n  }\n}\n","import DefaultScene from \"./scenes/DefaultScene\";\n\nconst groundSpriteSize = 32;\nconst minGroundNumber = 15;\nconst size = groundSpriteSize * minGroundNumber;\n\nexport const config = {\n  type: Phaser.AUTO,\n  parent: \"game-box\",\n  width: size,\n  height: size,\n  scene: [DefaultScene],\n  backgroundColor: 0x14003b,\n  // transparent: true\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      // debug: true,\n    },\n  },\n};\n","import React, { useEffect, useLayoutEffect } from \"react\";\nimport { renderGame } from \"../../game-modules\";\nimport css from \"./style.module.scss\";\n\nlet game: Phaser.Game | null = null;\n\nexport const Game = () => {\n  useLayoutEffect(() => {\n    game = renderGame();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      game?.destroy(true, true);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"game-box\"></div>\n    </div>\n  );\n};\n","import Phaser from \"phaser\";\n\nimport { config } from \"./service/config\";\n\nexport const renderGame = () => new Phaser.Game(config);\n","import \"./App.css\";\nimport { Game } from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
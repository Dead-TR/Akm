{"version":3,"sources":["game-modules/game/config.ts","game-modules/game/create/character.ts","game-modules/game/create/enemy/index.ts","game-modules/game/create/player/index.ts","game-modules/game/create/world.ts","game-modules/game/create/animation.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/load/preload.ts","game-modules/game/update/checkCharacterZIndex.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations/settings.ts","game-modules/service/scenes/DefaultScene/configs/animations/index.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/preloadSettings.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/index.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/scenes/DefaultScene/configs/enemy.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["baseGameConfig","health","width","height","CreateCharacter","scene","x","y","spriteSheet","textureFrame","params","actor","animations","armor","attack","speed","coolDown","elements","healthLine","mortal","sword","enemy","target","fight","collision","top","calc","blocked","bottom","left","right","this","physics","add","sprite","origin","setOrigin","destroy","isFight","active","setDepth","depth","originX","originY","play","healthPercent","scaleX","damage","setDeath","world","Object","entries","key","value","valueLine","worldIndex","getTileAtWorldXY","index","id","indexOf","direction","coordinates","accuracy","xSide","ySide","setVelocityX","setVelocityY","graphics","lineStyle","healthLineY","beginPath","moveTo","lineTo","closePath","strokePath","side","movement","anims","isPaused","currentAnim","pause","frames","createEnemy","CreateEnemy","visionDistance","vision","char","createHealth","enemies","undefined","find","xDifference","Math","abs","yDifference","checkCollision","createCollision","movementAnimation","enemyOnAttackDistance","mortalAnimationPlay","mortalCalculate","createPlayer","CreatePlayer","animation","cursor","creator","showWorld","gridName","imgName","size","gridTileMap","make","tilemap","tileHeight","tileWidth","gridTileSet","addTilesetImage","createStaticLayer","World","objects","call","configs","forEach","config","name","image","createWorld","createAnimation","frame","create","generateFrameNumbers","ways","frameRate","repeat","createCamera","camera","cameras","main","setBounds","Number","startFollow","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","fehlerX","fehlerY","scrollX","scrollY","restart","preloadData","data","unit","method","content","load","checkCharacterZIndex","characters","sort","charA","charB","i","Game","update","preload","bind","player","ui","check","characterZIndex","event","callBack","goingFrames","start","end","fightFrames","animationList","collisionCellIds","enemyList","characterData","frameWidth","frameHeight","startFrame","endFrame","zombie","fightEffects","path","claws","sword_1","DefaultScene","engine","state","addSimpleObjects","enemyUnit","push","addListeners","move","values","watching","enemyMovement","filter","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","game","useLayoutEffect","useEffect","App","className","render","document","getElementById"],"mappings":"0PAAaA,EACH,CACNC,OAAQ,UAFCD,EAIJ,CACLC,OAAQ,CACNC,MAAO,GACPC,OAAQ,ICIOC,E,WA4CnB,WACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GAQoB,IAAD,GAJlB,yBArDHC,WAqDE,OApDFN,WAoDE,OAnDFO,gBAmDE,OAlDFF,OAAS,CACPT,OAAQ,IACRY,MAAO,GACPC,OAAQ,GAERC,MAAO,IACPC,SAAU,GA4CV,KA1CFC,SAA8B,CAC5BC,WAAY,MAyCZ,KAvCFC,OAAsB,CACpBC,MAAO,KACPC,MAAO,KACPC,OAAQ,KAERC,MAAO,CACLtB,OAAQ,IACRe,SAAU,KAgCZ,KA7BFQ,UAAY,CACVC,IAAK,CACHC,MAAO,GACPC,SAAS,GAEXC,OAAQ,CACNF,KAAM,GACNC,SAAS,GAEXE,KAAM,CACJH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,KAAM,GACNC,SAAS,IAeXI,KAAK1B,MAAQA,EACb0B,KAAKpB,MAAQN,EAAM2B,QAAQC,IAAIC,OAAO5B,EAAGC,EAAGC,EAAaC,GAErDC,EAAOyB,UACT,EAAAJ,KAAKpB,OAAMyB,UAAX,oBAAwB1B,EAAOyB,S,4CAInC,WAAY,IAAD,IACT,UAAAJ,KAAKZ,OAAOC,aAAZ,SAAmBiB,UACnBN,KAAKpB,MAAML,GAAK,IAChByB,KAAKpB,MAAM0B,UACX,UAAAN,KAAKd,SAASC,kBAAd,SAA0BmB,UACtBN,KAAKZ,OAAOE,QACdU,KAAKZ,OAAOE,MAAMF,OAAOE,MAAQ,Q,iCAIrC,SAAoBiB,IACbP,KAAKnB,YAAcmB,KAAKZ,OAAOI,MAAMtB,QAAU,IAGhDqC,EACGP,KAAKZ,OAAOC,OAAUW,KAAKZ,OAAOC,MAAMmB,QAO3CR,KAAKZ,OAAOC,MAAMd,EAAIyB,KAAKpB,MAAML,EACjCyB,KAAKZ,OAAOC,MAAMb,EAAIwB,KAAKpB,MAAMJ,EACjCwB,KAAKZ,OAAOC,MAAMoB,SAAST,KAAKpB,MAAM8B,MAAQ,KAR9CV,KAAKZ,OAAOC,MAAQW,KAAK1B,MAAM4B,IAC5BC,OAAOH,KAAKpB,MAAML,EAAGyB,KAAKpB,MAAMJ,EAAG,IACnC6B,UAAUL,KAAKpB,MAAM+B,QAASX,KAAKpB,MAAMgC,SAE5CZ,KAAKZ,OAAOC,MAAMwB,KAAKb,KAAKnB,WAAWQ,QAOrCW,KAAKZ,OAAOC,QACdW,KAAKZ,OAAOC,MAAMiB,UAClBN,KAAKZ,OAAOC,MAAQ,S,6BAK1B,SAAgBC,GACd,GAAKA,KAASU,KAAKZ,OAAOI,MAAMtB,QAAU,GAA1C,CAIA,GAAI8B,KAAKd,SAASC,WAAY,CAC5B,IAAM2B,EAAgBd,KAAKZ,OAAOI,MAAMtB,OAAS8B,KAAKrB,OAAOT,OAC7D8B,KAAKd,SAASC,WAAW4B,OAASD,EAGpC,GAAId,KAAKZ,OAAOI,MAAMP,WAAae,KAAKrB,OAAOM,SAAU,CACvDe,KAAKZ,OAAOI,MAAMP,WAClB,IAAM+B,EAAShB,KAAKrB,OAAOI,OAASO,EAAMX,OAAOG,MAEjDQ,EAAMF,OAAOI,MAAMtB,QAAU8C,EAAS,EAAIA,EADxB,OAGlBhB,KAAKZ,OAAOI,MAAMP,WACde,KAAKZ,OAAOI,MAAMP,SAAW,IAC/Be,KAAKZ,OAAOI,MAAMP,SAAWe,KAAKrB,OAAOM,UAIR,IAAD,EAApC,GAAIK,EAAMF,OAAOI,MAAMtB,QAAU,EAC/BoB,EAAM2B,WACNjB,KAAKZ,OAAOE,MAAQ,KACpB,UAAAU,KAAKZ,OAAOC,aAAZ,SAAmBiB,UACnBN,KAAKZ,OAAOC,MAAQ,Q,4BAIxB,SAAed,EAAWC,EAAW0C,EAAYzB,GAC/C,cAA2B0B,OAAOC,QAAQpB,KAAKP,WAA/C,eAA2D,CAAC,IAAD,wBAA/C4B,EAA+C,KAA1CC,EAA0C,KACnDC,EAAoB,QAARF,GAAyB,WAARA,EAAmB,IAAM,IAEtDG,EAAU,UAAGN,EAAMO,iBACT,MAAdF,EAAoBhD,EAAI+C,EAAM3B,KAAOpB,EACvB,MAAdgD,EAAoB/C,EAAI8C,EAAM3B,KAAOnB,GACrC,UAHc,aAAG,EAIhBkD,MAEGC,EAAKlC,EAAUmC,QAAQJ,GAA0B,GAKrDF,EAAM1B,SAHH+B,IAAc,IAARA,K,6BAQf,SAAgBhD,GAUVqB,KAAKP,UAAUM,MAAMH,QACnBjB,EAAOkD,UAAUtD,EAAI,IACvBI,EAAOmD,YAAYvD,EAAIyB,KAAKpB,MAAML,GAE3ByB,KAAKP,UAAUK,KAAKF,SACzBjB,EAAOkD,UAAUtD,EAAI,IACvBI,EAAOmD,YAAYvD,EAAIyB,KAAKpB,MAAML,GAIlCyB,KAAKP,UAAUI,OAAOD,QACpBjB,EAAOkD,UAAUrD,EAAI,IACvBG,EAAOmD,YAAYtD,EAAIwB,KAAKpB,MAAMJ,GAE3BwB,KAAKP,UAAUC,IAAIE,SACxBjB,EAAOkD,UAAUrD,EAAI,IACvBG,EAAOmD,YAAYtD,EAAIwB,KAAKpB,MAAMJ,K,kBAKxC,SAAKD,EAAWC,GAAiD,IAAtCQ,EAAqC,uDAA7B,IAAK+C,EAAwB,uDAAb,GAMjD,GALI/B,KAAKd,SAASC,aAChBa,KAAKd,SAASC,WAAWZ,EAAIyB,KAAKpB,MAAML,EACxCyB,KAAKd,SAASC,WAAWX,EAAIwB,KAAKpB,MAAMJ,GAGtCwB,KAAKZ,OAAOI,MAAMtB,QAAU,EAC9B,MAAO,CAAC,OAAQ,QAGlB,IAAM8D,EACJhC,KAAKpB,MAAML,EAAIA,GAAKwD,EAChB,QACA/B,KAAKpB,MAAML,EAAIA,EAAIwD,EACnB,OACA,OACAE,EACJjC,KAAKpB,MAAMJ,EAAIA,GAAKuD,EAChB,SACA/B,KAAKpB,MAAMJ,EAAIA,EAAIuD,EACnB,MACA,OAkBN,MAhBc,UAAVC,EACFhC,KAAKpB,MAAMsD,aAAalD,GACL,SAAVgD,EACThC,KAAKpB,MAAMsD,cAAclD,GAEzBgB,KAAKpB,MAAMsD,aAAa,GAGZ,WAAVD,EACFjC,KAAKpB,MAAMuD,aAAanD,GACL,QAAViD,EACTjC,KAAKpB,MAAMuD,cAAcnD,GAEzBgB,KAAKpB,MAAMuD,aAAa,GAGnB,CAACH,EAAOC,K,0BAGjB,WACE,IAAMG,EAAWpC,KAAK1B,MAAM4B,IAAIkC,SAAS,CACvC7D,EAAGyB,KAAKpB,MAAML,EACdC,EAAGwB,KAAKpB,MAAMJ,IAEhB4D,EAASC,UACPpE,EAAqBC,OAAOE,OAC5BH,EAAsBC,QAExB,IAAMoE,GACkC,EAAtCrE,EAAqBC,OAAOE,OAC5B4B,KAAKpB,MAAMR,OAAS4B,KAAKpB,MAAMgC,QAEjCwB,EAASG,YACTH,EAASI,OAAQvE,EAAqBC,OAAOC,MAAQ,GAAM,EAAGmE,GAC9DF,EAASK,OAAOxE,EAAqBC,OAAOC,MAAQ,EAAGmE,GACvDF,EAASM,YACTN,EAASO,aACTP,EAAS3B,SAAST,KAAKpB,MAAM8B,MAAQ,GAErCV,KAAKd,SAASC,WAAaiD,I,+BAG7B,SAAkBQ,EAAeC,GAC/B,GAAKA,KAAY7C,KAAKZ,OAAOI,MAAMtB,QAAU,GAA7C,CAD8D,IAMxC,EANwC,cAIvC0E,EAJuC,GAIvDZ,EAJuD,KAIhDC,EAJgD,KAM9D,GAAc,SAAVD,EACEhC,KAAKpB,MAAMkE,MAAMC,UACnB/C,KAAKpB,MAAMkE,MAAMjC,KAAKb,KAAKpB,MAAMkE,MAAME,cAGrC,UAAAhD,KAAKpB,MAAMkE,MAAME,mBAAjB,eAA8B3B,OAAQwB,EAASb,IACjDhC,KAAKpB,MAAMkE,MAAMjC,KAAKgC,EAASb,SAE5B,GAAc,SAAVC,EAAkB,CAAC,IAAD,EACvBjC,KAAKpB,MAAMkE,MAAMC,UACnB/C,KAAKpB,MAAMkE,MAAMjC,KAAKb,KAAKpB,MAAMkE,MAAME,cAGrC,UAAAhD,KAAKpB,MAAMkE,MAAME,mBAAjB,eAA8B3B,OAAQwB,EAASZ,IACjDjC,KAAKpB,MAAMkE,MAAMjC,KAAKgC,EAASZ,QAE5B,CAAC,IAAD,EACLjC,KAAKpB,MAAMkE,MAAMG,MAAjB,UAAuBjD,KAAKpB,MAAMkE,MAAME,mBAAxC,aAAuB,EAA8BE,OAAO,U,KChR3D,SAASC,EAEd5E,EACAC,EACAC,EACAC,EACAG,EACAF,GAYA,OAAO,IAAIyE,EACTpD,KACAzB,EACAC,EACAC,EACAC,EACAG,EACAF,G,IAIiByE,E,kDAKnB,WACE9E,EACAC,EACAC,EACAC,EACAC,EACAG,EAEAF,GAWC,IAAD,8BACA,cAAML,EAAOC,EAAGC,EAAGC,EAAaC,EAAc,CAC5C0B,OAAM,OAAEzB,QAAF,IAAEA,OAAF,EAAEA,EAAQyB,OAChBvB,WAAYA,KA1BhBP,WAuBE,IAtBF+E,eAAiB,IAsBf,EArBFxE,gBAqBE,EAKA,EAAKP,MAAQA,EACb,EAAK+E,gBAAuB,OAAN1E,QAAM,IAANA,OAAA,EAAAA,EAAQ2E,SAAU,EAAKD,eAE7C,EAAKxE,WAAaA,GAElB,OAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAQ4E,QACV,EAAK5E,OAASA,EAAO4E,MAGvB,EAAKC,eAdL,E,4CAiBF,SAASC,EAAgChE,GAAuB,IAAD,OAIzDF,OAA0CmE,EAW9C,GATKnE,IACHA,EAASkE,EAAQE,MAAK,SAACrE,GACrB,IAAMsE,EAAcC,KAAKC,IAAIxE,EAAMV,MAAML,EAAI,EAAKK,MAAML,GAClDwF,EAAcF,KAAKC,IAAIxE,EAAMV,MAAMJ,EAAI,EAAKI,MAAMJ,GACxD,OACEoF,EAAc,EAAKP,gBAAkBU,EAAc,EAAKV,mBAI1D9D,EAAQ,CACV,IAAMZ,EAAS,CACbkD,UAAW,CACTtD,EAAGgB,EAAOX,MAAML,EAAIyB,KAAKpB,MAAML,EAC/BC,EAAGe,EAAOX,MAAMJ,EAAIwB,KAAKpB,MAAMJ,GAEjCsD,YAAa,CACXvD,EAAGgB,EAAOX,MAAML,EAChBC,EAAGe,EAAOX,MAAMJ,IAIhBiB,IACFO,KAAKgE,eACHhE,KAAKpB,MAAML,EACXyB,KAAKpB,MAAMJ,EACXwB,KAAK1B,MAAM4C,MAAMA,MACjBzB,GAEFO,KAAKiE,gBAAgBtF,IAEvB,IAAMiE,EAAI,4DACRjE,EAAOmD,YAAYvD,EACnBI,EAAOmD,YAAYtD,EACnBwB,KAAKrB,OAAOK,MAtCD,IA0Cb,GAAIgB,KAAKnB,WAAWgE,SAAU,CAC5B,IAAMA,EAAW7C,KAAKnB,WAAWgE,SAEjC7C,KAAKkE,kBAAkBtB,EAAMC,GAG/B,IAAMsB,EACJN,KAAKC,IAAInF,EAAOkD,UAAUtD,IAhDR,IAiDlBsF,KAAKC,IAAInF,EAAOkD,UAAUrD,IAjDR,GAmDpBwB,KAAKoE,oBAAoBD,GAErBA,GACFnE,KAAKqE,gBAAgB9E,GACrBA,EAAOH,OAAOE,MAAQU,MAEtBT,EAAOH,OAAOE,MAAQ,U,GApGWjB,GC9BlC,SAASiG,EAEd/F,EACAC,EACAC,EACAC,EACAC,GAKA,OAAO,IAAI4F,EAAavE,KAAMzB,EAAGC,EAAGC,EAAaC,EAAcC,G,IAG5C4F,E,kDAGnB,WACEjG,EACAC,EACAC,EACAC,EACAC,EACAC,GAIC,IAAD,8BACA,cAAML,EAAOC,EAAGC,EAAGC,EAAaC,EAAc,CAC5C0B,OAAM,OAAEzB,QAAF,IAAEA,OAAF,EAAEA,EAAQyB,OAChBvB,WAAYF,EAAO6F,aAfvBlG,WAYE,EAKA,EAAKA,MAAQA,EACb,EAAKO,WAAaF,EAAO6F,UAEzB,EAAK7F,OAAS,CACZT,OAAQ,IACRY,MAAO,gBACPC,OAAQ,GACRE,SAAU,EACVD,MAAO,KAbT,E,wCAkBF,SAAKyF,EAAavD,EAAYzB,GAAsB,IAAD,EAGjDO,KAAKgE,eAAehE,KAAKpB,MAAML,EAAGyB,KAAKpB,MAAMJ,EAAG0C,EAAOzB,GACvD,IAAMd,EAAS,CACbkD,UAAW,CACTtD,EAAGkG,EAAOlG,EAAIyB,KAAKpB,MAAML,EACzBC,EAAGiG,EAAOjG,EAAIwB,KAAKpB,MAAMJ,GAE3BsD,YAAa,CACXvD,EAAGkG,EAAOlG,EACVC,EAAGiG,EAAOjG,IAIdwB,KAAKiE,gBAAgBtF,GAErB,IAAMiE,EAAI,4DACRjE,EAAOmD,YAAYvD,EACnBI,EAAOmD,YAAYtD,EACnBwB,KAAKrB,OAAOK,MAnBC,GA8Bf,OAPAgB,KAAKkE,kBAAkBtB,EAAvB,UAA6B5C,KAAKnB,kBAAlC,aAA6B,EAAiBgE,UAC9C7C,KAAKoE,sBAAsBpE,KAAKZ,OAAOE,OAEnCU,KAAKZ,OAAOE,OACdU,KAAKqE,gBAAgBrE,KAAKZ,OAAOE,OAG5BsD,M,GA9D+BvE,GCjBnC,SAASqG,EAEdC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAc/E,KAAKgF,KAAKC,QAAQ,CACpC5D,IAAKuD,EACLM,WAAYJ,EACZK,UAAWL,IAGPM,EAAcT,EAChBI,EAAYM,gBAAgBR,OAASnB,EAAWoB,EAAMA,GACtD,KAKJ,OAFkBC,EAAYO,kBAAkB,EAAGF,EAAa,EAAG,G,IAKhDG,E,WAOnB,WACEjH,EACAqG,EACAC,EACAC,EACAC,GACC,yBAZH5D,WAYE,OAXF5C,WAWE,OAVFkH,aAUE,EACAxF,KAAK1B,MAAQA,EACb0B,KAAKkB,MAAQwD,EAAQe,KAAKnH,EAAOqG,EAAWC,EAAUC,EAASC,GAC/D9E,KAAKwF,QAAU,G,oDAGjB,SAAiBE,GAA0B,IAAD,OACxCA,EAAQC,SAAQ,SAACC,GAAY,IACnBrH,EAAwBqH,EAAxBrH,EAAGC,EAAqBoH,EAArBpH,EAAGqG,EAAkBe,EAAlBf,QAASgB,EAASD,EAATC,KACvB,EAAKL,QAAQK,GAAQ,EAAKvH,MAAM4B,IAAI4F,MAAMvH,EAAGC,EAAGqG,U,KAK/C,SAASkB,EAEdpB,EACAC,EACAC,EACAC,GAEA,OAAO,IAAIS,EAAMvF,KAAM2E,EAAWC,EAAUC,EAASC,GCxDxC,SAASkB,EAEtBN,GACC,IAAD,OACAA,EAAQC,SAAQ,SAACC,GAAY,IACnBvE,EAAeuE,EAAfvE,IAAK4E,EAAUL,EAAVK,MACb,EAAKnD,MAAMoD,OAAO,CAChB7E,MACA6B,OAAQ,EAAKJ,MAAMqD,qBAAqBF,EAAMJ,KAAMI,EAAMG,MAC1DC,UAAWJ,EAAMI,UACjBC,OAAQL,EAAMK,YCXL,SAASC,EAEtB3H,EACAsC,GAEA,IAAMsF,EAASxG,KAAKyG,QAAQC,KAM5B,OAJAF,EACGG,UAAU,EAAG,EAAGC,OAAO1F,EAAM/C,OAAQyI,OAAO1F,EAAM9C,SAClDyI,YAAYjI,GAAO,EAAM,EAAG,EAAG,EAAG,GAE9B4H,ECVM,SAASM,EAEtBvI,EACAC,EACAsG,EACAiC,EACAC,EACAC,EACAT,GACC,IAAD,OACMU,EAASlH,KAAKE,IAAIgH,OAAO3I,EAAGC,EAAGsG,EAAMkC,GAE3C,GAAIC,EAAQ,CAAC,IACHE,EAAgBF,EAAhBE,MAAOrC,EAASmC,EAATnC,KACfoC,EAAOE,eAAetC,EAAMqC,GAG9B,IAAME,EAAQrH,KAAKsH,OAAOpH,IAAI,CAC5BqH,MAAO,GACPC,QAASN,EACTH,MAAOA,EACPU,MAAM,EACNnB,OAAQ,EACRoB,MAAO,EACPC,KAAM,mBAiBR,OAdA3H,KAAK4H,MAAMC,GAAG,eAAe,WAC3B,IAAIC,EAAU,EACZC,EAAU,EAERvB,IACFsB,EAAUtB,EAAOwB,QACjBD,EAAUvB,EAAOyB,SAGnBf,EAAO3I,EAAI,EAAKqJ,MAAMrJ,EAAIuJ,EAC1BZ,EAAO1I,EAAI,EAAKoJ,MAAMpJ,EAAIuJ,EAC1BV,EAAMa,aAGDhB,ECzCF,SAASiB,EAAyBC,GAAuB,IAAD,OAC7DA,EAAKzC,SAAQ,SAAC0C,GAAU,IACdC,EAAiBD,EAAjBC,OAAiBD,EAATD,KAEXzC,SAAQ,SAAC4C,GAAa,IAAD,GAET,IAAKC,MAAKF,GAAV,oBAAqBC,UCLnC,SAASE,EAEdC,GAEyB,YAAIA,GAAYC,MACvC,SAACC,EAAOC,GAAR,OAAkBD,EAAMhK,MAAMJ,EAAIqK,EAAMjK,MAAMJ,KAG/BmH,SAAQ,SAACpC,EAAMuF,GAC9BvF,EAAK3E,MAAM6B,SAASqI,M,ICAHC,E,WAMnB,WAAYzK,GAAsB,yBALlCA,WAKiC,OAJjCkK,UAIiC,OAHjCtC,YAGiC,OAFjC8C,YAEiC,EAC/BhJ,KAAK1B,MAAQA,EACb0B,KAAKwI,KAAO,CACVS,QAASd,EAAYe,KAAKlJ,KAAK1B,OAC/BkG,UAAWwB,EAAgBkD,KAAKlJ,KAAK1B,QAEvC0B,KAAKkG,OAAS,CACZhF,MAAO6E,EAAYmD,KAAKlJ,KAAK1B,OAC7B6K,OAAQ7E,EAAa4E,KAAKlJ,KAAK1B,OAC/BgB,MAAO6D,EAAY+F,KAAKlJ,KAAK1B,OAC7BkG,UAAWwB,EAAgBkD,KAAKlJ,KAAK1B,OACrCkI,OAAQD,EAAa2C,KAAKlJ,KAAK1B,OAE/B8K,GAAI,CACF3E,OAAQqC,EAAaoC,KAAKlJ,KAAK1B,SAGnC0B,KAAKgJ,OAAS,CACZK,MAAO,CACLC,gBAAiBb,EAAqBS,KAAKlJ,KAAK1B,S,gDAKtD,SAAaiL,EAAwBC,GACnCxJ,KAAK1B,MAAMsJ,MAAMC,GAAG0B,EAAOC,O,YC5ClBC,EAAc,CACzBrD,KAAM,CACJsD,MAAO,EACPC,IAAK,GAEPtD,UAAW,EACXC,QAAS,GAGEsD,EAAc,CACzBxD,KAAM,CACJsD,MAAO,EACPC,IAAK,IAEPtD,UAAW,GACXC,QAAS,GCZEuD,EAAmC,CAC9C,CACExI,IAAK,aACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,cAGV,CACExE,IAAK,eACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,gBAGV,CACExE,IAAK,eACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,gBAGV,CACExE,IAAK,gBACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,iBAGV,CACExE,IAAK,UACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,cAGV,CACExE,IAAK,UACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,gBAGV,CACExE,IAAK,UACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,gBAGV,CACExE,IAAK,UACL4E,MAAM,2BACDwD,GADA,IAEH5D,KAAM,iBAGV,CACExE,IAAK,aACL4E,MAAM,2BACD2D,GADA,IAEH/D,KAAM,WAGV,CACExE,IAAK,eACL4E,MAAM,2BACD2D,GADA,IAEH/D,KAAM,cCrECiE,EAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE5CC,EAA+B,CAC1C,CACElE,KAAM,SACND,OAAQ,CACNrH,EAAG,IACHC,EAAG,IACHC,YAAa,aACbC,aAAc,EACd0B,OAAQ,CAAC,GAAK,KAEhBvB,WAAY,CACVgE,SAAU,CACRnD,IAAK,UACLG,OAAQ,UACRC,KAAM,UACNC,MAAO,WAETV,MAAO,eAIX,CACEwG,KAAM,SACND,OAAQ,CACNrH,EAAG,IACHC,EAAG,IACHC,YAAa,aACbC,aAAc,EACd0B,OAAQ,CAAC,GAAK,KAEhBvB,WAAY,CACVgE,SAAU,CACRnD,IAAK,UACLG,OAAQ,UACRC,KAAM,UACNC,MAAO,WAETV,MAAO,eAIX,CACEwG,KAAM,SACND,OAAQ,CACNrH,EAAG,IACHC,EAAG,IACHC,YAAa,aACbC,aAAc,EACd0B,OAAQ,CAAC,GAAK,KAEhBvB,WAAY,CACVgE,SAAU,CACRnD,IAAK,UACLG,OAAQ,UACRC,KAAM,UACNC,MAAO,WAETV,MAAO,gBC3DN,IAAMmG,EAA0B,GCF1BwE,EAAgB,CAC3B/D,MAAO,CACLgE,WAAY,GACZC,YAAa,GACbC,WAAY,EACZC,SAAU,GAEZjB,OAAQ,kDACRkB,OAAQ,2DAKGC,EAAe,CAC1BC,KAAK,GAAD,OAHc,wCAGd,UACJC,MAAO,CACL3E,KAAM,YACNI,MAAO,CACLgE,WAAY,GACZC,YAAa,GACbC,WAAY,EACZC,SAAU,KAGdK,QAAS,CACP5E,KAAM,cACNI,MAAO,CACLgE,WAAY,GACZC,YAAa,GACbC,WAAY,EACZC,SAAU,MCgCDhC,EA3Dc,CAC3B,CACEE,OAAQ,QACRF,KAAM,CACJ,CAAC,mBAAoB,0CACrB,CAAC,SAAU,sCACX,CAAC,QAAS,6CAGd,CACEE,OAAQ,aACRF,KAAM,CAAC,CAAC,cAAe,8CAEzB,CACEE,OAAQ,cACRF,KAAM,CACJ,CAAC,aAAD,UAAkB4B,EAAcb,OAAhC,cAAoDa,EAAc/D,OAClE,CACE,cADF,UAEK+D,EAAcb,OAFnB,eAGEa,EAAc/D,OAEhB,CACE,aADF,UAEK+D,EAAcb,OAFnB,yCAGOa,EAAc/D,OAHrB,IAG4BiE,YAAa,MAEzC,CACE,WADF,UAEKF,EAAcb,OAFnB,uCAGOa,EAAc/D,OAHrB,IAG4BiE,YAAa,GAAID,WAAY,MAGzD,CACE,aADF,UAEKD,EAAcK,OAFnB,yCAGOL,EAAc/D,OAHrB,IAG4BiE,YAAa,GAAID,WAAY,MAEzD,CACE,cADF,UAEKD,EAAcK,OAFnB,0CAGOL,EAAc/D,OAHrB,IAG4BiE,YAAa,GAAID,WAAY,MAEzD,CAAC,WAAD,UAAgBD,EAAcK,OAA9B,YAAgDL,EAAc/D,OAC9D,CAAC,aAAD,UAAkB+D,EAAcK,OAAhC,cAAoDL,EAAc/D,OAClE,CACE,QADF,UAEKqE,EAAaC,MAFlB,OAEyBD,EAAaE,MAAM3E,MAC1CyE,EAAaE,MAAMvE,OAErB,CACE,UADF,UAEKqE,EAAaC,MAFlB,OAEyBD,EAAaG,QAAQ5E,MAC5CyE,EAAaG,QAAQxE,UC1CRyE,E,kDAWnB,WAAY9E,GAAiB,IAAD,8BAC1B,cAAMA,IAXR+E,YAU4B,IAT5BxB,YAS4B,IAR5BjI,WAQ4B,IAP5B5B,MAAuB,GAOK,EAL5BsL,WAK4B,EAE1B,EAAKD,OAAS,IAAI5B,EAAJ,gBACd,EAAK6B,MAAQ,GAHa,E,2CAM5B,WACE5K,KAAK2K,OAAOnC,KAAKS,QAAQd,K,oBAE3B,WC/Ba,IAAgB7J,EDgC3B0B,KAAK2K,OAAOnC,KAAKhE,UAAUqF,GAC3B7J,KAAKkB,MAAQlB,KAAK2K,OAAOzE,OAAOhF,OAC9B,EACA,cACA,mBACA,IAEFlB,KAAKkB,MAAM2J,iBAAiBrF,GAE5BxF,KAAKmJ,OAASnJ,KAAK2K,OAAOzE,OAAOiD,OAAO,GAAI,GAAI,WAAY,EAAG,CAC7D/I,OAAQ,CAAC,GAAK,IACdoE,UAAW,CACT3B,SAAU,CACR/C,KAAM,eACNC,MAAO,gBACPL,IAAK,aACLG,OAAQ,gBAEVR,MAAO,kBClDgBf,EDqDd0B,KCpDf+J,EAAUpE,SAAQ,SAACmF,GACoBA,EAA7BjF,KADwB,IAClBD,EAAuBkF,EAAvBlF,OAAQ/G,EAAeiM,EAAfjM,WACtBP,EAAMgB,MAAMyL,KACVzM,EAAMqM,OAAOzE,OAAO5G,MAClBsG,EAAOrH,EACPqH,EAAOpH,EACPoH,EAAOnH,YACPmH,EAAOlH,aACPG,EACA,CACEuB,OAAQwF,EAAOxF,OACfkD,OAAQ,IACRtE,MAAO,UD0CbgB,KAAK4K,MAAMpE,OAASxG,KAAK2K,OAAOzE,OAAOM,OACrCxG,KAAKmJ,OAAOvK,MACZoB,KAAKkB,MAAMA,OAGblB,KAAK4K,MAAMnG,OAASzE,KAAK2K,OAAOzE,OAAOkD,GAAG3E,OACxC,IACA,IACA,EACA,GACA,SACA,KACAzE,KAAK4K,MAAMpE,QAGbxG,KAAK2K,OAAOK,aAAa,aAAa,iB,oBAExC,WACEhL,KAAKmJ,OAAO8B,KAAKjL,KAAK4K,MAAMnG,OAAQzE,KAAKkB,MAAMA,MAAO4I,GAEtD9J,KAAK2K,OAAO3B,OAAOK,MAAMC,gBAAzB,CACEtJ,KAAKmJ,QADP,mBAEKhI,OAAO+J,OAAOlL,KAAKV,UCzDrB,SAA0BhB,GAC/B,cAAgC6C,OAAOC,QAAQ9C,EAAMgB,OAArD,eAA6D,CAAC,IAAD,gCACjD6L,SAAS,CAAC7M,EAAM6K,QAASW,ID0DnCsB,CAAcpL,MACLA,KCtDLV,MAAM+L,QAAO,SAAC/L,GAAD,OAAWA,EAAMF,OAAOI,MAAMtB,QAAU,S,GDhBnBoN,SER7B1F,EAAS,CACpB2F,KAAMC,OAAOC,KACbC,OAAQ,WACRvN,MALWwN,IAMXvN,OANWuN,IAOXrN,MAAO,CAACoM,GACRkB,gBAAiB,QAEjB3L,QAAS,CACP4L,QAAS,SACTC,OAAQ,K,OCZRC,EAA2B,KAElBhD,EAAO,WAWlB,OAVAiD,2BAAgB,WACdD,ECJ4B,IAAIP,IAAOzC,KAAKnD,KDK3C,IAEHqG,qBAAU,WACR,OAAO,WAAO,IAAD,EACP,QAAJ,EAAAF,SAAA,SAAMzL,SAAQ,GAAM,MAErB,IAGD,8BACE,qBAAKqB,GAAG,gBERCuK,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,MCANC,iBAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.02e4efa3.chunk.js","sourcesContent":["export const baseGameConfig = {\n  colors: {\n    health: 0xff0000,\n  },\n  sizes: {\n    health: {\n      width: 30,\n      height: 5,\n    },\n  },\n};\n","import { Scene } from \"phaser\";\nimport { baseGameConfig } from \"../config\";\nimport {\n  AnimationsListType,\n  CharacterAnimationsList,\n  CharactersPosterity,\n  MortalTypes,\n  Sides,\n  CharacterElements,\n} from \"../types\";\n\nexport default class CreateCharacter {\n  actor;\n  scene: Scene;\n  animations?: CharacterAnimationsList;\n  params = {\n    health: 100,\n    armor: 10,\n    attack: 10,\n\n    speed: 100,\n    coolDown: 5,\n  };\n  elements: CharacterElements = {\n    healthLine: null,\n  };\n  mortal: MortalTypes = {\n    sword: null,\n    enemy: null,\n    target: null,\n\n    fight: {\n      health: 100,\n      coolDown: 50,\n    },\n  };\n  collision = {\n    top: {\n      calc: -15,\n      blocked: false,\n    },\n    bottom: {\n      calc: 15,\n      blocked: false,\n    },\n    left: {\n      calc: -15,\n      blocked: false,\n    },\n    right: {\n      calc: 15,\n      blocked: false,\n    },\n  };\n\n  constructor(\n    scene: Scene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    params: {\n      origin?: number[];\n      animations?: CharacterAnimationsList;\n    }\n  ) {\n    this.scene = scene;\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\n\n    if (params.origin) {\n      this.actor.setOrigin(...params.origin);\n    }\n  }\n\n  setDeath() {\n    this.mortal.sword?.destroy();\n    this.actor.x = -1000;\n    this.actor.destroy();\n    this.elements.healthLine?.destroy();\n    if (this.mortal.enemy) {\n      this.mortal.enemy.mortal.enemy = null;\n    }\n  }\n\n  mortalAnimationPlay(isFight?: boolean) {\n    if (!this.animations || this.mortal.fight.health <= 0) {\n      return;\n    }\n    if (isFight) {\n      if (!this.mortal.sword || !this.mortal.sword.active) {\n        this.mortal.sword = this.scene.add\n          .sprite(this.actor.x, this.actor.y, \"\")\n          .setOrigin(this.actor.originX, this.actor.originY);\n\n        this.mortal.sword.play(this.animations.sword);\n      } else {\n        this.mortal.sword.x = this.actor.x;\n        this.mortal.sword.y = this.actor.y;\n        this.mortal.sword.setDepth(this.actor.depth + 1);\n      }\n    } else {\n      if (this.mortal.sword) {\n        this.mortal.sword.destroy();\n        this.mortal.sword = null;\n      }\n    }\n  }\n\n  mortalCalculate(enemy?: CharactersPosterity) {\n    if (!enemy || this.mortal.fight.health <= 0) {\n      return;\n    }\n\n    if (this.elements.healthLine) {\n      const healthPercent = this.mortal.fight.health / this.params.health;\n      this.elements.healthLine.scaleX = healthPercent;\n    }\n\n    if (this.mortal.fight.coolDown === this.params.coolDown) {\n      this.mortal.fight.coolDown--;\n      const damage = this.params.attack - enemy.params.armor;\n      const minDamage = 0;\n      enemy.mortal.fight.health -= damage > 0 ? damage : minDamage;\n    } else {\n      this.mortal.fight.coolDown--;\n      if (this.mortal.fight.coolDown < 0) {\n        this.mortal.fight.coolDown = this.params.coolDown;\n      }\n    }\n\n    if (enemy.mortal.fight.health <= 0) {\n      enemy.setDeath();\n      this.mortal.enemy = null;\n      this.mortal.sword?.destroy();\n      this.mortal.sword = null;\n    }\n  }\n\n  checkCollision(x: number, y: number, world: any, collision: number[]) {\n    for (const [key, value] of Object.entries(this.collision)) {\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\n\n      const worldIndex = world.getTileAtWorldXY(\n        valueLine === \"x\" ? x + value.calc : x,\n        valueLine === \"y\" ? y + value.calc : y,\n        false\n      )?.index;\n\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\n\n      if (!id || id !== -1) {\n        value.blocked = true;\n      } else {\n        value.blocked = false;\n      }\n    }\n  }\n\n  createCollision(params: {\n    direction: {\n      x: number;\n      y: number;\n    };\n    coordinates: {\n      x: number;\n      y: number;\n    };\n  }) {\n    if (this.collision.right.blocked) {\n      if (params.direction.x > 0) {\n        params.coordinates.x = this.actor.x;\n      }\n    } else if (this.collision.left.blocked) {\n      if (params.direction.x < 0) {\n        params.coordinates.x = this.actor.x;\n      }\n    }\n\n    if (this.collision.bottom.blocked) {\n      if (params.direction.y > 0) {\n        params.coordinates.y = this.actor.y;\n      }\n    } else if (this.collision.top.blocked) {\n      if (params.direction.y < 0) {\n        params.coordinates.y = this.actor.y;\n      }\n    }\n  }\n\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\n    if (this.elements.healthLine) {\n      this.elements.healthLine.x = this.actor.x;\n      this.elements.healthLine.y = this.actor.y;\n    }\n\n    if (this.mortal.fight.health <= 0) {\n      return [\"stop\", \"stop\"];\n    }\n\n    const xSide =\n      this.actor.x - x < -accuracy\n        ? \"right\"\n        : this.actor.x - x > accuracy\n        ? \"left\"\n        : \"stop\";\n    const ySide =\n      this.actor.y - y < -accuracy\n        ? \"bottom\"\n        : this.actor.y - y > accuracy\n        ? \"top\"\n        : \"stop\";\n\n    if (xSide === \"right\") {\n      this.actor.setVelocityX(speed);\n    } else if (xSide === \"left\") {\n      this.actor.setVelocityX(-speed);\n    } else {\n      this.actor.setVelocityX(0);\n    }\n\n    if (ySide === \"bottom\") {\n      this.actor.setVelocityY(speed);\n    } else if (ySide === \"top\") {\n      this.actor.setVelocityY(-speed);\n    } else {\n      this.actor.setVelocityY(0);\n    }\n\n    return [xSide, ySide];\n  }\n\n  createHealth() {\n    const graphics = this.scene.add.graphics({\n      x: this.actor.x,\n      y: this.actor.y,\n    });\n    graphics.lineStyle(\n      baseGameConfig.sizes.health.height,\n      baseGameConfig.colors.health\n    );\n    const healthLineY =\n      baseGameConfig.sizes.health.height * -1 -\n      this.actor.height * this.actor.originY;\n\n    graphics.beginPath();\n    graphics.moveTo((baseGameConfig.sizes.health.width / 2) * -1, healthLineY);\n    graphics.lineTo(baseGameConfig.sizes.health.width / 2, healthLineY);\n    graphics.closePath();\n    graphics.strokePath();\n    graphics.setDepth(this.actor.depth + 1);\n\n    this.elements.healthLine = graphics;\n  }\n\n  movementAnimation(side: Sides[], movement?: AnimationsListType) {\n    if (!movement || this.mortal.fight.health <= 0) {\n      return;\n    }\n    const [xSide, ySide] = side;\n\n    if (xSide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== movement[xSide]) {\n        this.actor.anims.play(movement[xSide]);\n      }\n    } else if (ySide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== movement[ySide]) {\n        this.actor.anims.play(movement[ySide]);\n      }\n    } else {\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\n    }\n  }\n}\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\nimport { CharactersPosterity, EnemyAnimationsList } from \"../../types\";\n\nimport CreateCharacter from \".././character\";\n\nexport function createEnemy(\n  this: DefaultScene,\n  x: number,\n  y: number,\n  spriteSheet: string,\n  textureFrame: string | number | undefined,\n  animations: EnemyAnimationsList,\n  params?: {\n    origin?: number[];\n    vision?: number;\n    char?: {\n      speed: number;\n      health: number;\n      armor: number;\n      attack: number;\n      coolDown: number;\n    };\n  }\n) {\n  return new CreateEnemy(\n    this,\n    x,\n    y,\n    spriteSheet,\n    textureFrame,\n    animations,\n    params\n  );\n}\n\nexport default class CreateEnemy extends CreateCharacter {\n  scene: DefaultScene;\n  visionDistance = 100;\n  animations: EnemyAnimationsList;\n\n  constructor(\n    scene: DefaultScene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    animations: EnemyAnimationsList,\n\n    params?: {\n      origin?: number[];\n      vision?: number;\n      char?: {\n        speed: number;\n        health: number;\n        armor: number;\n        attack: number;\n        coolDown: number;\n      };\n    }\n  ) {\n    super(scene, x, y, spriteSheet, textureFrame, {\n      origin: params?.origin,\n      animations: animations,\n    });\n    this.scene = scene;\n    this.visionDistance = params?.vision || this.visionDistance;\n\n    this.animations = animations;\n\n    if (params?.char) {\n      this.params = params.char;\n    }\n\n    this.createHealth();\n  }\n\n  watching(enemies: CharactersPosterity[], collision?: number[]) {\n    let accuracy = 15;\n    const fightDistance = 16;\n\n    let target: CharactersPosterity | undefined = undefined;\n\n    if (!target) {\n      target = enemies.find((enemy) => {\n        const xDifference = Math.abs(enemy.actor.x - this.actor.x);\n        const yDifference = Math.abs(enemy.actor.y - this.actor.y);\n        return (\n          xDifference < this.visionDistance && yDifference < this.visionDistance\n        );\n      });\n    }\n    if (target) {\n      const params = {\n        direction: {\n          x: target.actor.x - this.actor.x,\n          y: target.actor.y - this.actor.y,\n        },\n        coordinates: {\n          x: target.actor.x,\n          y: target.actor.y,\n        },\n      };\n\n      if (collision) {\n        this.checkCollision(\n          this.actor.x,\n          this.actor.y,\n          this.scene.world.world,\n          collision\n        );\n        this.createCollision(params);\n      }\n      const side = super.move(\n        params.coordinates.x,\n        params.coordinates.y,\n        this.params.speed,\n        accuracy\n      );\n\n      if (this.animations.movement) {\n        const movement = this.animations.movement;\n\n        this.movementAnimation(side, movement);\n      }\n\n      const enemyOnAttackDistance =\n        Math.abs(params.direction.x) <= fightDistance &&\n        Math.abs(params.direction.y) <= fightDistance;\n\n      this.mortalAnimationPlay(enemyOnAttackDistance);\n\n      if (enemyOnAttackDistance) {\n        this.mortalCalculate(target);\n        target.mortal.enemy = this;\n      } else {\n        target.mortal.enemy = null;\n      }\n    }\n  }\n}\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\nimport { CharacterAnimationsList } from \"../../types\";\nimport CreateCharacter from \"../character\";\n\nlet test: any;\nexport function createPlayer(\n  this: DefaultScene,\n  x: number,\n  y: number,\n  spriteSheet: string,\n  textureFrame: string | number | undefined,\n  params: {\n    origin?: number[];\n    animation: CharacterAnimationsList;\n  }\n) {\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, params);\n}\n\nexport default class CreatePlayer extends CreateCharacter {\n  scene: DefaultScene;\n\n  constructor(\n    scene: DefaultScene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    params: {\n      origin?: number[];\n      animation: CharacterAnimationsList;\n    }\n  ) {\n    super(scene, x, y, spriteSheet, textureFrame, {\n      origin: params?.origin,\n      animations: params.animation,\n    });\n    this.scene = scene;\n    this.animations = params.animation;\n\n    this.params = {\n      health: 100,\n      armor: 999999999999999,\n      attack: 11,\n      coolDown: 0,\n      speed: 100,\n    };\n  }\n\n  //@ts-ignore\n  move(cursor: any, world: any, collision: number[]) {\n    let accuracy = 5;\n\n    this.checkCollision(this.actor.x, this.actor.y, world, collision);\n    const params = {\n      direction: {\n        x: cursor.x - this.actor.x,\n        y: cursor.y - this.actor.y,\n      },\n      coordinates: {\n        x: cursor.x,\n        y: cursor.y,\n      },\n    };\n\n    this.createCollision(params);\n\n    const side = super.move(\n      params.coordinates.x,\n      params.coordinates.y,\n      this.params.speed,\n      accuracy\n    );\n\n    this.movementAnimation(side, this.animations?.movement);\n    this.mortalAnimationPlay(!!this.mortal.enemy);\n\n    if (this.mortal.enemy) {\n      this.mortalCalculate(this.mortal.enemy);\n    }\n\n    return side;\n  }\n}\n","import { Scene } from \"phaser\";\nimport { SimpleObject } from \"../types\";\nexport function creator(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number\n) {\n  const gridTileMap = this.make.tilemap({\n    key: gridName,\n    tileHeight: size,\n    tileWidth: size,\n  });\n\n  const gridTileSet = showWorld\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\n    : null;\n\n  // @ts-ignore\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\n\n  return tileLayer;\n}\n\nexport default class World {\n  world: any;\n  scene: Scene;\n  objects: {\n    [key: string]: Phaser.GameObjects.Image;\n  };\n\n  constructor(\n    scene: Scene,\n    showWorld: boolean,\n    gridName: string,\n    imgName: string,\n    size: number\n  ) {\n    this.scene = scene;\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\n    this.objects = {};\n  }\n\n  addSimpleObjects(configs: SimpleObject[]) {\n    configs.forEach((config) => {\n      const { x, y, imgName, name } = config;\n      this.objects[name] = this.scene.add.image(x, y, imgName);\n    });\n  }\n}\n\nexport function createWorld(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number\n) {\n  return new World(this, showWorld, gridName, imgName, size);\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig } from \"../types\";\n\nexport default function createAnimation(\n  this: Scene,\n  configs: AnimationConfig[]\n) {\n  configs.forEach((config) => {\n    const { key, frame } = config;\n    this.anims.create({\n      key,\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\n      frameRate: frame.frameRate,\n      repeat: frame.repeat,\n    });\n  });\n}\n","import { Scene } from \"phaser\";\n\nexport default function createCamera(\n  this: Scene,\n  actor: Phaser.GameObjects.GameObject | Object,\n  world: any\n) {\n  const camera = this.cameras.main;\n\n  camera\n    .setBounds(0, 0, Number(world.width), Number(world.height))\n    .startFollow(actor, true, 1, 1, 0, 0);\n\n  return camera;\n}\n","import { Scene } from \"phaser\";\nimport { CursorBorderType } from \"../../../types\";\n\nexport default function createCursor(\n  this: Scene,\n  x: number,\n  y: number,\n  size: number,\n  scale: number,\n  background: number,\n  border?: CursorBorderType | null,\n  camera?: Phaser.Cameras.Scene2D.Camera\n) {\n  const circle = this.add.circle(x, y, size, background);\n\n  if (border) {\n    const { color, size } = border;\n    circle.setStrokeStyle(size, color);\n  }\n\n  const tween = this.tweens.add({\n    delay: 0.1,\n    targets: circle,\n    scale: scale,\n    yoyo: false,\n    repeat: 0,\n    alpha: 0,\n    ease: \"Sine.easeInOut\",\n  });\n\n  this.input.on(\"pointerdown\", () => {\n    let fehlerX = 0,\n      fehlerY = 0;\n\n    if (camera) {\n      fehlerX = camera.scrollX;\n      fehlerY = camera.scrollY;\n    }\n\n    circle.x = this.input.x + fehlerX;\n    circle.y = this.input.y + fehlerY;\n    tween.restart();\n  });\n\n  return circle;\n}\n","import { Scene } from \"phaser\";\nimport { PreloadTypes } from \"../types\";\n\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\n  data.forEach((unit) => {\n    const { method, data } = unit;\n\n    data.forEach((content) => {\n      // @ts-ignore: Unreachable code error\n      const result = this.load[method](...content);\n    });\n  });\n}\n","import { Scene } from \"phaser\";\nimport { CharactersPosterity } from \"../types\";\n\nconst accuracy = 50;\nexport function checkCharacterZIndex(\n  this: Scene,\n  characters: CharactersPosterity[]\n) {\n  const sortedCharacters = [...characters].sort(\n    (charA, charB) => charA.actor.y - charB.actor.y\n  );\n\n  sortedCharacters.forEach((char, i) => {\n    char.actor.setDepth(i);\n  });\n}\n","import {\n  createAnimation,\n  createCamera,\n  createCursor,\n  createEnemy,\n  createPlayer,\n  createWorld,\n} from \"./create\";\nimport { CreateGameTypes, LoadGameTypes, UpdateGameTypes } from \"./types\";\nimport { preloadData } from \"./load/preload\";\nimport DefaultScene from \"../service/scenes/DefaultScene\";\nimport { checkCharacterZIndex } from \"./update\";\n\nexport default class Game {\n  scene: DefaultScene;\n  load: LoadGameTypes;\n  create: CreateGameTypes;\n  update: UpdateGameTypes;\n\n  constructor(scene: DefaultScene) {\n    this.scene = scene;\n    this.load = {\n      preload: preloadData.bind(this.scene),\n      animation: createAnimation.bind(this.scene),\n    };\n    this.create = {\n      world: createWorld.bind(this.scene),\n      player: createPlayer.bind(this.scene),\n      enemy: createEnemy.bind(this.scene),\n      animation: createAnimation.bind(this.scene),\n      camera: createCamera.bind(this.scene),\n\n      ui: {\n        cursor: createCursor.bind(this.scene),\n      },\n    };\n    this.update = {\n      check: {\n        characterZIndex: checkCharacterZIndex.bind(this.scene),\n      },\n    };\n  }\n\n  addListeners(event: string | symbol, callBack: () => void) {\n    this.scene.input.on(event, callBack);\n  }\n}\n","export const goingFrames = {\n  ways: {\n    start: 0,\n    end: 3,\n  },\n  frameRate: 6,\n  repeat: -1,\n};\n\nexport const fightFrames = {\n  ways: {\n    start: 0,\n    end: 22,\n  },\n  frameRate: 15,\n  repeat: -1,\n};\n","import { AnimationConfig } from \"../../../../../game/types\";\nimport { fightFrames, goingFrames } from \"./settings\";\n\nexport const animationList: AnimationConfig[] = [\n  {\n    key: \"playerGoUp\",\n    frame: {\n      ...goingFrames,\n      name: \"playerUp\",\n    },\n  },\n  {\n    key: \"playerGoDown\",\n    frame: {\n      ...goingFrames,\n      name: \"playerDown\",\n    },\n  },\n  {\n    key: \"playerGoLeft\",\n    frame: {\n      ...goingFrames,\n      name: \"playerLeft\",\n    },\n  },\n  {\n    key: \"playerGoRight\",\n    frame: {\n      ...goingFrames,\n      name: \"playerRight\",\n    },\n  },\n  {\n    key: \"zombieU\",\n    frame: {\n      ...goingFrames,\n      name: \"zombieUp\",\n    },\n  },\n  {\n    key: \"zombieD\",\n    frame: {\n      ...goingFrames,\n      name: \"zombieDown\",\n    },\n  },\n  {\n    key: \"zombieL\",\n    frame: {\n      ...goingFrames,\n      name: \"zombieLeft\",\n    },\n  },\n  {\n    key: \"zombieR\",\n    frame: {\n      ...goingFrames,\n      name: \"zombieRight\",\n    },\n  },\n  {\n    key: \"clawsFight\",\n    frame: {\n      ...fightFrames,\n      name: \"claws\",\n    },\n  },\n  {\n    key: \"sword_1Fight\",\n    frame: {\n      ...fightFrames,\n      name: \"sword_1\",\n    },\n  },\n];\n","import { EnemyListConfig } from \"../../../../game/types\";\n\nexport const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\n\nexport const enemyList: EnemyListConfig[] = [\n  {\n    name: \"zombie\",\n    config: {\n      x: 150,\n      y: 300,\n      spriteSheet: \"zombieDown\",\n      textureFrame: 1,\n      origin: [0.5, 0.8],\n    },\n    animations: {\n      movement: {\n        top: \"zombieU\", //animationList > key\n        bottom: \"zombieD\",\n        left: \"zombieL\",\n        right: \"zombieR\",\n      },\n      sword: \"clawsFight\",\n    },\n  },\n\n  {\n    name: \"zombie\",\n    config: {\n      x: 400,\n      y: 300,\n      spriteSheet: \"zombieDown\",\n      textureFrame: 1,\n      origin: [0.5, 0.8],\n    },\n    animations: {\n      movement: {\n        top: \"zombieU\", //animationList > key\n        bottom: \"zombieD\",\n        left: \"zombieL\",\n        right: \"zombieR\",\n      },\n      sword: \"clawsFight\",\n    },\n  },\n\n  {\n    name: \"zombie\",\n    config: {\n      x: 400,\n      y: 550,\n      spriteSheet: \"zombieDown\",\n      textureFrame: 1,\n      origin: [0.5, 0.8],\n    },\n    animations: {\n      movement: {\n        top: \"zombieU\", //animationList > key\n        bottom: \"zombieD\",\n        left: \"zombieL\",\n        right: \"zombieR\",\n      },\n      sword: \"clawsFight\",\n    },\n  },\n];\n","import { SimpleObject } from \"../../../../game/types\";\n\nexport const objects: SimpleObject[] = [];\n","export const characterData = {\n  frame: {\n    frameWidth: 20,\n    frameHeight: 45,\n    startFrame: 0,\n    endFrame: 3,\n  },\n  player: \"game/assets/img/DefaultScene/characters/player/\",\n  zombie: \"game/assets/img/DefaultScene/characters/enemies/zombie/\",\n};\n\nconst effectsPath = \"game/assets/img/DefaultScene/effects/\";\n\nexport const fightEffects = {\n  path: `${effectsPath}fight/`,\n  claws: {\n    name: \"claws.png\",\n    frame: {\n      frameWidth: 80,\n      frameHeight: 80,\n      startFrame: 0,\n      endFrame: 22,\n    },\n  },\n  sword_1: {\n    name: \"sword_1.png\",\n    frame: {\n      frameWidth: 80,\n      frameHeight: 80,\n      startFrame: 0,\n      endFrame: 23,\n    },\n  },\n};\n","import { PreloadTypes } from \"../../../../../game/types\";\nimport { characterData, fightEffects } from \"./preloadSettings\";\n\nconst data: PreloadTypes[] = [\n  {\n    method: \"image\",\n    data: [\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\n      [\"empty\", \"game/assets/img/general/emptyLayers.png\"],\n    ],\n  },\n  {\n    method: \"tilemapCSV\",\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\n  },\n  {\n    method: \"spritesheet\",\n    data: [\n      [\"playerLeft\", `${characterData.player}p_left.png`, characterData.frame],\n      [\n        \"playerRight\",\n        `${characterData.player}p_right.png`,\n        characterData.frame,\n      ],\n      [\n        \"playerDown\",\n        `${characterData.player}p_down.png`,\n        { ...characterData.frame, frameHeight: 44 },\n      ],\n      [\n        \"playerUp\",\n        `${characterData.player}p_up.png`,\n        { ...characterData.frame, frameHeight: 44, frameWidth: 19 },\n      ],\n\n      [\n        \"zombieLeft\",\n        `${characterData.zombie}p_left.png`,\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\n      ],\n      [\n        \"zombieRight\",\n        `${characterData.zombie}p_right.png`,\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\n      ],\n      [\"zombieUp\", `${characterData.zombie}p_up.png`, characterData.frame],\n      [\"zombieDown\", `${characterData.zombie}p_down.png`, characterData.frame],\n      [\n        \"claws\",\n        `${fightEffects.path}${fightEffects.claws.name}`,\n        fightEffects.claws.frame,\n      ],\n      [\n        \"sword_1\",\n        `${fightEffects.path}${fightEffects.sword_1.name}`,\n        fightEffects.sword_1.frame,\n      ],\n    ],\n  },\n];\n\nexport default data;\n","import { Scene } from \"phaser\";\nimport Game from \"../../../game\";\nimport { CreateEnemy } from \"../../../game/create\";\nimport CreatePlayer from \"../../../game/create/player\";\nimport World from \"../../../game/create/world\";\nimport { animationList } from \"./configs/animations\";\nimport { collisionCellIds, enemyList } from \"./configs/config\";\nimport enemyCreator, {\n  movementWatching as enemyMovement,\n  setDeath,\n} from \"./configs/enemy\";\nimport { objects } from \"./configs/objects\";\nimport preloadData from \"./configs/preloadData\";\n\nexport default class DefaultScene extends Scene {\n  engine: Game;\n  player: CreatePlayer;\n  world: World;\n  enemy: CreateEnemy[] = [];\n\n  state: {\n    cursor?: Phaser.GameObjects.Arc;\n    camera?: Phaser.Cameras.Scene2D.Camera;\n  };\n\n  constructor(config: string) {\n    super(config);\n    this.engine = new Game(this);\n    this.state = {};\n  }\n\n  preload() {\n    this.engine.load.preload(preloadData);\n  }\n  create() {\n    this.engine.load.animation(animationList);\n    this.world = this.engine.create.world(\n      true,\n      \"exampleGrid\",\n      \"exampleGrassTile\",\n      32\n    );\n    this.world.addSimpleObjects(objects);\n\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, {\n      origin: [0.5, 0.8],\n      animation: {\n        movement: {\n          left: \"playerGoLeft\",\n          right: \"playerGoRight\",\n          top: \"playerGoUp\",\n          bottom: \"playerGoDown\",\n        },\n        sword: \"sword_1Fight\",\n      },\n    });\n    enemyCreator(this);\n\n    this.state.camera = this.engine.create.camera(\n      this.player.actor,\n      this.world.world\n    );\n\n    this.state.cursor = this.engine.create.ui.cursor(\n      100,\n      100,\n      1,\n      25,\n      0xffffff,\n      null,\n      this.state.camera\n    );\n\n    this.engine.addListeners(\"pointerup\", () => {});\n  }\n  update() {\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\n\n    this.engine.update.check.characterZIndex([\n      this.player,\n      ...Object.values(this.enemy),\n    ]);\n\n    enemyMovement(this);\n    setDeath(this);\n  }\n}\n","import DefaultScene from \"..\";\nimport { collisionCellIds, enemyList } from \"./config\";\n\nexport default function create(scene: DefaultScene) {\n  enemyList.forEach((enemyUnit) => {\n    const { name, config, animations } = enemyUnit;\n    scene.enemy.push(\n      scene.engine.create.enemy(\n        config.x,\n        config.y,\n        config.spriteSheet,\n        config.textureFrame,\n        animations,\n        {\n          origin: config.origin,\n          vision: 150,\n          speed: 100,\n        }\n      )\n    );\n  });\n}\n\nexport function movementWatching(scene: DefaultScene) {\n  for (const [name, character] of Object.entries(scene.enemy)) {\n    character.watching([scene.player], collisionCellIds);\n  }\n}\n\nexport function setDeath(scene: DefaultScene) {\n  scene.enemy.filter((enemy) => enemy.mortal.fight.health >= 0);\n}\n","import DefaultScene from \"./scenes/DefaultScene\";\n\nconst groundSpriteSize = 32;\nconst minGroundNumber = 15;\nconst size = groundSpriteSize * minGroundNumber;\n\nexport const config = {\n  type: Phaser.AUTO,\n  parent: \"game-box\",\n  width: size,\n  height: size,\n  scene: [DefaultScene],\n  backgroundColor: 0x14003b,\n  // transparent: true\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      // debug: true,\n    },\n  },\n};\n","import React, { useEffect, useLayoutEffect } from \"react\";\nimport { renderGame } from \"../../game-modules\";\nimport css from \"./style.module.scss\";\n\nlet game: Phaser.Game | null = null;\n\nexport const Game = () => {\n  useLayoutEffect(() => {\n    game = renderGame();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      game?.destroy(true, true);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"game-box\"></div>\n    </div>\n  );\n};\n","import Phaser from \"phaser\";\n\nimport { config } from \"./service/config\";\n\nexport const renderGame = () => new Phaser.Game(config);\n","import \"./App.css\";\nimport { Game } from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
{"version":3,"sources":["game-modules/game/create/character.ts","game-modules/game/create/enemy/index.ts","game-modules/game/create/player/index.ts","game-modules/game/create/world.ts","game-modules/game/create/animation.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/load/preload.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations/settings.ts","game-modules/service/scenes/DefaultScene/configs/animations/index.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/preloadSettings.ts","game-modules/service/scenes/DefaultScene/configs/preloadData/index.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/scenes/DefaultScene/configs/enemy.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["CreateCharacter","scene","x","y","spriteSheet","textureFrame","origin","actor","params","health","armor","attack","mortal","isActive","sword","collision","top","calc","blocked","bottom","left","right","this","physics","add","sprite","setOrigin","world","Object","entries","key","value","valueLine","worldIndex","getTileAtWorldXY","index","id","indexOf","direction","coordinates","speed","accuracy","xSide","ySide","setVelocityX","setVelocityY","side","movement","anims","isPaused","play","currentAnim","pause","frames","createEnemy","animations","CreateEnemy","Animation","visionDistance","vision","char","enemies","target","undefined","find","enemy","xDifference","Math","abs","yDifference","checkCollision","createCollision","movementAnimation","originX","originY","destroy","createPlayer","CreatePlayer","cursor","creator","showWorld","gridName","imgName","size","gridTileMap","make","tilemap","tileHeight","tileWidth","gridTileSet","addTilesetImage","createStaticLayer","World","objects","call","configs","forEach","config","name","image","createWorld","createAnimation","frame","create","generateFrameNumbers","ways","frameRate","repeat","createCamera","camera","cameras","main","setBounds","Number","width","height","startFollow","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","fehlerX","fehlerY","scrollX","scrollY","restart","preloadData","data","unit","method","content","load","Game","preload","bind","animation","player","ui","event","callBack","goingFrames","start","end","animationList","collisionCellIds","enemyList","characterData","frameWidth","frameHeight","startFrame","endFrame","zombie","fightEffects","path","claws","sword_1","DefaultScene","engine","state","addSimpleObjects","addListeners","move","watching","enemyMovement","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","game","useLayoutEffect","useEffect","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.04be0b35.chunk.js","sourcesContent":["import { Scene } from \"phaser\";\r\nimport { AnimationsListType } from \"../../service/scenes/DefaultScene/configs/types\";\r\nimport { MortalTypes, Sides } from \"../types\";\r\n\r\nexport default class CreateCharacter {\r\n  actor;\r\n  scene: Scene;\r\n  params = {\r\n    health: 100,\r\n    armor: 10,\r\n    attack: 10,\r\n  };\r\n  mortal: MortalTypes = {\r\n    isActive: false,\r\n    sword: null,\r\n  };\r\n\r\n  collision = {\r\n    top: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    bottom: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n    left: {\r\n      calc: -15,\r\n      blocked: false,\r\n    },\r\n    right: {\r\n      calc: 15,\r\n      blocked: false,\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    origin?: number[]\r\n  ) {\r\n    this.scene = scene;\r\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\r\n\r\n    if (origin) {\r\n      this.actor.setOrigin(...origin);\r\n    }\r\n  }\r\n\r\n  checkCollision(x: number, y: number, world: any, collision: number[]) {\r\n    for (const [key, value] of Object.entries(this.collision)) {\r\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\r\n\r\n      const worldIndex = world.getTileAtWorldXY(\r\n        valueLine === \"x\" ? x + value.calc : x,\r\n        valueLine === \"y\" ? y + value.calc : y,\r\n        false\r\n      )?.index;\r\n\r\n      const id = collision.indexOf(worldIndex ? worldIndex : 0);\r\n\r\n      if (!id || id !== -1) {\r\n        value.blocked = true;\r\n      } else {\r\n        value.blocked = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  createCollision(params: {\r\n    direction: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    coordinates: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n  }) {\r\n    if (this.collision.right.blocked) {\r\n      if (params.direction.x > 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    } else if (this.collision.left.blocked) {\r\n      if (params.direction.x < 0) {\r\n        params.coordinates.x = this.actor.x;\r\n      }\r\n    }\r\n\r\n    if (this.collision.bottom.blocked) {\r\n      if (params.direction.y > 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    } else if (this.collision.top.blocked) {\r\n      if (params.direction.y < 0) {\r\n        params.coordinates.y = this.actor.y;\r\n      }\r\n    }\r\n  }\r\n\r\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\r\n    const xSide =\r\n      this.actor.x - x < -accuracy\r\n        ? \"right\"\r\n        : this.actor.x - x > accuracy\r\n        ? \"left\"\r\n        : \"stop\";\r\n    const ySide =\r\n      this.actor.y - y < -accuracy\r\n        ? \"bottom\"\r\n        : this.actor.y - y > accuracy\r\n        ? \"top\"\r\n        : \"stop\";\r\n\r\n    if (xSide === \"right\") {\r\n      this.actor.setVelocityX(speed);\r\n    } else if (xSide === \"left\") {\r\n      this.actor.setVelocityX(-speed);\r\n    } else {\r\n      this.actor.setVelocityX(0);\r\n    }\r\n\r\n    if (ySide === \"bottom\") {\r\n      this.actor.setVelocityY(speed);\r\n    } else if (ySide === \"top\") {\r\n      this.actor.setVelocityY(-speed);\r\n    } else {\r\n      this.actor.setVelocityY(0);\r\n    }\r\n\r\n    return [xSide, ySide];\r\n  }\r\n\r\n  movementAnimation(side: Sides[], movement: AnimationsListType) {\r\n    const [xSide, ySide] = side;\r\n\r\n    if (xSide !== \"stop\") {\r\n      if (this.actor.anims.isPaused) {\r\n        this.actor.anims.play(this.actor.anims.currentAnim);\r\n      }\r\n\r\n      if (this.actor.anims.currentAnim?.key !== movement[xSide]) {\r\n        this.actor.anims.play(movement[xSide]);\r\n      }\r\n    } else if (ySide !== \"stop\") {\r\n      if (this.actor.anims.isPaused) {\r\n        this.actor.anims.play(this.actor.anims.currentAnim);\r\n      }\r\n\r\n      if (this.actor.anims.currentAnim?.key !== movement[ySide]) {\r\n        this.actor.anims.play(movement[ySide]);\r\n      }\r\n    } else {\r\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport {\r\n  AnimationsListType,\r\n  EnemyAnimationTypes,\r\n} from \"../../../service/scenes/DefaultScene/configs/types\";\r\nimport CreateCharacter from \".././character\";\r\nimport { EnemyAnimationsList } from \"./types\";\r\n\r\ntype Actor = Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\r\n\r\nexport function createEnemy(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  animations: EnemyAnimationTypes,\r\n  params?: {\r\n    origin?: number[];\r\n    vision?: number;\r\n    speed?: number;\r\n    char?: {\r\n      health: number;\r\n      armor: number;\r\n      attack: number;\r\n    };\r\n  }\r\n) {\r\n  return new CreateEnemy(\r\n    this,\r\n    x,\r\n    y,\r\n    spriteSheet,\r\n    textureFrame,\r\n    animations,\r\n    params\r\n  );\r\n}\r\n\r\nexport default class CreateEnemy extends CreateCharacter {\r\n  scene: DefaultScene;\r\n  visionDistance = 100;\r\n  speed = 100;\r\n  animations: EnemyAnimationsList;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    animations: EnemyAnimationTypes,\r\n\r\n    params?: {\r\n      origin?: number[];\r\n      vision?: number;\r\n      speed?: number;\r\n      char?: {\r\n        health: number;\r\n        armor: number;\r\n        attack: number;\r\n      };\r\n    }\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, params?.origin);\r\n    this.scene = scene;\r\n    this.visionDistance = params?.vision || this.visionDistance;\r\n    this.speed = params?.speed || this.speed;\r\n    this.animations = animations;\r\n\r\n    if (params?.char) {\r\n      this.params = params.char;\r\n    }\r\n  }\r\n\r\n  watching(enemies: Actor[], collision?: number[]) {\r\n    let accuracy = 15;\r\n    const fightDistance = 16;\r\n\r\n    let target: Actor | undefined = undefined;\r\n\r\n    if (!target) {\r\n      target = enemies.find((enemy) => {\r\n        const xDifference = Math.abs(enemy.x - this.actor.x);\r\n        const yDifference = Math.abs(enemy.y - this.actor.y);\r\n\r\n        if (\r\n          xDifference < this.visionDistance ||\r\n          yDifference < this.visionDistance\r\n        ) {\r\n          return enemy;\r\n        }\r\n      });\r\n    }\r\n    if (target) {\r\n      const params = {\r\n        direction: {\r\n          x: target.x - this.actor.x,\r\n          y: target.y - this.actor.y,\r\n        },\r\n        coordinates: {\r\n          x: target.x,\r\n          y: target.y,\r\n        },\r\n      };\r\n      if (collision) {\r\n        this.checkCollision(\r\n          this.actor.x,\r\n          this.actor.y,\r\n          this.scene.world.world,\r\n          collision\r\n        );\r\n        this.createCollision(params);\r\n      }\r\n      const side = super.move(\r\n        params.coordinates.x,\r\n        params.coordinates.y,\r\n        this.speed,\r\n        accuracy\r\n      );\r\n\r\n      if (this.animations.movement) {\r\n        const movement = this.animations.movement;\r\n\r\n        this.movementAnimation(side, movement);\r\n      }\r\n\r\n      if (\r\n        Math.abs(params.direction.x) <= fightDistance &&\r\n        Math.abs(params.direction.y) <= fightDistance\r\n      ) {\r\n        if (!this.mortal.isActive) {\r\n          this.mortal.isActive = true;\r\n\r\n          this.mortal.sword = this.scene.add\r\n            .sprite(this.actor.x, this.actor.y, \"\")\r\n            .setOrigin(this.actor.originX, this.actor.originY);\r\n\r\n          if (this.animations.sword) {\r\n            this.mortal.sword.play(this.animations.sword);\r\n          }\r\n        } else {\r\n          if (this.mortal.sword) {\r\n            this.mortal.sword.x = this.actor.x;\r\n            this.mortal.sword.y = this.actor.y;\r\n          }\r\n        }\r\n      } else {\r\n        if (this.mortal.isActive) {\r\n          this.mortal.isActive = false;\r\n        }\r\n        if (this.mortal.sword) {\r\n          this.mortal.sword.destroy();\r\n          this.mortal.sword = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\r\nimport CreateCharacter from \"../character\";\r\n\r\nenum Animation {\r\n  \"left\" = \"playerGoLeft\",\r\n  \"right\" = \"playerGoRight\",\r\n  \"top\" = \"playerGoUp\",\r\n  \"bottom\" = \"playerGoDown\",\r\n}\r\n\r\nexport function createPlayer(\r\n  this: DefaultScene,\r\n  x: number,\r\n  y: number,\r\n  spriteSheet: string,\r\n  textureFrame: string | number | undefined,\r\n  origin?: number[]\r\n) {\r\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, origin);\r\n}\r\n\r\nexport default class CreatePlayer extends CreateCharacter {\r\n  scene: DefaultScene;\r\n\r\n  constructor(\r\n    scene: DefaultScene,\r\n    x: number,\r\n    y: number,\r\n    spriteSheet: string,\r\n    textureFrame: string | number | undefined,\r\n    origin?: number[]\r\n  ) {\r\n    super(scene, x, y, spriteSheet, textureFrame, origin);\r\n    this.scene = scene;\r\n  }\r\n\r\n  //@ts-ignore\r\n  move(cursor: any, world: any, collision: number[]) {\r\n    let speed = 100;\r\n    let accuracy = 5;\r\n\r\n    this.checkCollision(this.actor.x, this.actor.y, world, collision);\r\n    const params = {\r\n      direction: {\r\n        x: cursor.x - this.actor.x,\r\n        y: cursor.y - this.actor.y,\r\n      },\r\n      coordinates: {\r\n        x: cursor.x,\r\n        y: cursor.y,\r\n      },\r\n    };\r\n\r\n    this.createCollision(params);\r\n\r\n    const side = super.move(\r\n      params.coordinates.x,\r\n      params.coordinates.y,\r\n      speed,\r\n      accuracy\r\n    );\r\n\r\n    this.movementAnimation(side, Animation);\r\n\r\n    return side;\r\n  }\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { SimpleObject } from \"../types\";\r\nexport function creator(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  const gridTileMap = this.make.tilemap({\r\n    key: gridName,\r\n    tileHeight: size,\r\n    tileWidth: size,\r\n  });\r\n\r\n  const gridTileSet = showWorld\r\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\r\n    : null;\r\n\r\n  // @ts-ignore\r\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\r\n\r\n  return tileLayer;\r\n}\r\n\r\nexport default class World {\r\n  world: any;\r\n  scene: Scene;\r\n  objects: {\r\n    [key: string]: Phaser.GameObjects.Image;\r\n  };\r\n\r\n  constructor(\r\n    scene: Scene,\r\n    showWorld: boolean,\r\n    gridName: string,\r\n    imgName: string,\r\n    size: number\r\n  ) {\r\n    this.scene = scene;\r\n    this.world = creator.call(scene, showWorld, gridName, imgName, size);\r\n    this.objects = {};\r\n  }\r\n\r\n  addSimpleObjects(configs: SimpleObject[]) {\r\n    configs.forEach((config) => {\r\n      const { x, y, imgName, name } = config;\r\n      this.objects[name] = this.scene.add.image(x, y, imgName);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createWorld(\r\n  this: Scene,\r\n  showWorld: boolean,\r\n  gridName: string,\r\n  imgName: string,\r\n  size: number\r\n) {\r\n  return new World(this, showWorld, gridName, imgName, size);\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { AnimationConfig } from \"../types\";\r\n\r\nexport default function createAnimation(\r\n  this: Scene,\r\n  configs: AnimationConfig[]\r\n) {\r\n  configs.forEach((config) => {\r\n    const { key, frame } = config;\r\n    this.anims.create({\r\n      key,\r\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\r\n      frameRate: frame.frameRate,\r\n      repeat: frame.repeat,\r\n    });\r\n  });\r\n}\r\n","import { Scene } from \"phaser\";\r\n\r\nexport default function createCamera(\r\n  this: Scene,\r\n  actor: Phaser.GameObjects.GameObject | Object,\r\n  world: any\r\n) {\r\n  const camera = this.cameras.main;\r\n\r\n  camera\r\n    .setBounds(0, 0, Number(world.width), Number(world.height))\r\n    .startFollow(actor, true, 1, 1, 0, 0);\r\n\r\n  return camera;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { CursorBorderType } from \"../../../types\";\r\n\r\nexport default function createCursor(\r\n  this: Scene,\r\n  x: number,\r\n  y: number,\r\n  size: number,\r\n  scale: number,\r\n  background: number,\r\n  border?: CursorBorderType | null,\r\n  camera?: Phaser.Cameras.Scene2D.Camera\r\n) {\r\n  const circle = this.add.circle(x, y, size, background);\r\n\r\n  if (border) {\r\n    const { color, size } = border;\r\n    circle.setStrokeStyle(size, color);\r\n  }\r\n\r\n  const tween = this.tweens.add({\r\n    delay: 0.1,\r\n    targets: circle,\r\n    scale: scale,\r\n    yoyo: false,\r\n    repeat: 0,\r\n    alpha: 0,\r\n    ease: \"Sine.easeInOut\",\r\n  });\r\n\r\n  this.input.on(\"pointerdown\", () => {\r\n    let fehlerX = 0,\r\n      fehlerY = 0;\r\n\r\n    if (camera) {\r\n      fehlerX = camera.scrollX;\r\n      fehlerY = camera.scrollY;\r\n    }\r\n\r\n    circle.x = this.input.x + fehlerX;\r\n    circle.y = this.input.y + fehlerY;\r\n    tween.restart();\r\n  });\r\n\r\n  return circle;\r\n}\r\n","import { Scene } from \"phaser\";\r\nimport { PreloadTypes } from \"../types\";\r\n\r\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\r\n  data.forEach((unit) => {\r\n    const { method, data } = unit;\r\n\r\n    data.forEach((content) => {\r\n      // @ts-ignore: Unreachable code error\r\n      const result = this.load[method](...content);\r\n    });\r\n  });\r\n}\r\n","import {\r\n  createAnimation,\r\n  createCamera,\r\n  createCursor,\r\n  createEnemy,\r\n  createPlayer,\r\n  createWorld,\r\n} from \"./create\";\r\nimport { CreateGameTypes, LoadGameTypes } from \"./types\";\r\nimport { preloadData } from \"./load/preload\";\r\nimport DefaultScene from \"../service/scenes/DefaultScene\";\r\n\r\nexport default class Game {\r\n  scene: DefaultScene;\r\n  load: LoadGameTypes;\r\n  create: CreateGameTypes;\r\n\r\n  constructor(scene: DefaultScene) {\r\n    this.scene = scene;\r\n    this.load = {\r\n      preload: preloadData.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n    };\r\n    this.create = {\r\n      world: createWorld.bind(this.scene),\r\n      player: createPlayer.bind(this.scene),\r\n      enemy: createEnemy.bind(this.scene),\r\n      animation: createAnimation.bind(this.scene),\r\n      camera: createCamera.bind(this.scene),\r\n\r\n      ui: {\r\n        cursor: createCursor.bind(this.scene),\r\n      },\r\n    };\r\n  }\r\n\r\n  addListeners(event: string | symbol, callBack: () => void) {\r\n    this.scene.input.on(event, callBack);\r\n  }\r\n}\r\n","export const goingFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 3,\r\n  },\r\n  frameRate: 6,\r\n  repeat: -1,\r\n};\r\n\r\nexport const fightFrames = {\r\n  ways: {\r\n    start: 0,\r\n    end: 22,\r\n  },\r\n  frameRate: 15,\r\n  repeat: -1,\r\n};\r\n","import { AnimationConfig } from \"../../../../../game/types\";\r\nimport { fightFrames, goingFrames } from \"./settings\";\r\n\r\nexport const animationList: AnimationConfig[] = [\r\n  {\r\n    key: \"playerGoUp\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoDown\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoLeft\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"playerGoRight\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"playerRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieU\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieUp\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieD\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieDown\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieL\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieLeft\",\r\n    },\r\n  },\r\n  {\r\n    key: \"zombieR\",\r\n    frame: {\r\n      ...goingFrames,\r\n      name: \"zombieRight\",\r\n    },\r\n  },\r\n  {\r\n    key: \"clawsFight\",\r\n    frame: {\r\n      ...fightFrames,\r\n      name: \"claws\",\r\n    },\r\n  },\r\n];\r\n","import { EnemyListConfig } from \"./types\";\r\nimport { animationList } from \"./animations\";\r\n\r\nexport const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\r\n\r\nexport const enemyList: EnemyListConfig[] = [\r\n  {\r\n    name: \"zombie\",\r\n    config: {\r\n      x: 300,\r\n      y: 300,\r\n      spriteSheet: \"zombieDown\",\r\n      textureFrame: 1,\r\n      origin: [0.5, 0.8],\r\n    },\r\n    animations: {\r\n      movement: {\r\n        top: \"zombieU\", //animationList > key\r\n        bottom: \"zombieD\",\r\n        left: \"zombieL\",\r\n        right: \"zombieR\",\r\n      },\r\n      sword: \"clawsFight\",\r\n    },\r\n  },\r\n];\r\n","import { SimpleObject } from \"../../../../game/types\";\r\n\r\nexport const objects: SimpleObject[] = [];\r\n","export const characterData = {\r\n  frame: {\r\n    frameWidth: 20,\r\n    frameHeight: 45,\r\n    startFrame: 0,\r\n    endFrame: 3,\r\n  },\r\n  player: \"game/assets/img/DefaultScene/characters/player/\",\r\n  zombie: \"game/assets/img/DefaultScene/characters/enemies/zombie/\",\r\n};\r\n\r\nconst effectsPath = \"game/assets/img/DefaultScene/effects/\";\r\n\r\nexport const fightEffects = {\r\n  path: `${effectsPath}fight/`,\r\n  claws: {\r\n    name: \"claws.png\",\r\n    frame: {\r\n      frameWidth: 80,\r\n      frameHeight: 80,\r\n      startFrame: 0,\r\n      endFrame: 22,\r\n    },\r\n  },\r\n  sword_1: {\r\n    name: \"sword_1.png\",\r\n    frame: {\r\n      frameWidth: 192,\r\n      frameHeight: 192,\r\n      startFrame: 0,\r\n      endFrame: 23,\r\n    },\r\n  },\r\n};\r\n","import { PreloadTypes } from \"../../../../../game/types\";\r\nimport { characterData, fightEffects } from \"./preloadSettings\";\r\n\r\nconst data: PreloadTypes[] = [\r\n  {\r\n    method: \"image\",\r\n    data: [\r\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\r\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\r\n      [\"empty\", \"game/assets/img/general/emptyLayers.png\"],\r\n    ],\r\n  },\r\n  {\r\n    method: \"tilemapCSV\",\r\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\r\n  },\r\n  {\r\n    method: \"spritesheet\",\r\n    data: [\r\n      [\"playerLeft\", `${characterData.player}p_left.png`, characterData.frame],\r\n      [\r\n        \"playerRight\",\r\n        `${characterData.player}p_right.png`,\r\n        characterData.frame,\r\n      ],\r\n      [\r\n        \"playerDown\",\r\n        `${characterData.player}p_down.png`,\r\n        { ...characterData.frame, frameHeight: 44 },\r\n      ],\r\n      [\r\n        \"playerUp\",\r\n        `${characterData.player}p_up.png`,\r\n        { ...characterData.frame, frameHeight: 44, frameWidth: 19 },\r\n      ],\r\n\r\n      [\r\n        \"zombieLeft\",\r\n        `${characterData.zombie}p_left.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\r\n        \"zombieRight\",\r\n        `${characterData.zombie}p_right.png`,\r\n        { ...characterData.frame, frameHeight: 41, frameWidth: 22 },\r\n      ],\r\n      [\"zombieUp\", `${characterData.zombie}p_up.png`, characterData.frame],\r\n      [\"zombieDown\", `${characterData.zombie}p_down.png`, characterData.frame],\r\n      [\r\n        \"claws\",\r\n        `${fightEffects.path}${fightEffects.claws.name}`,\r\n        fightEffects.claws.frame,\r\n      ],\r\n      [\r\n        \"sword_1\",\r\n        `${fightEffects.path}${fightEffects.sword_1.name}`,\r\n        fightEffects.sword_1.frame,\r\n      ],\r\n    ],\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import { Scene } from \"phaser\";\r\nimport Game from \"../../../game\";\r\nimport CreatePlayer from \"../../../game/create/player\";\r\nimport World from \"../../../game/create/world\";\r\nimport { EnemyListType } from \"../../../game/types\";\r\nimport { animationList } from \"./configs/animations\";\r\nimport { collisionCellIds } from \"./configs/config\";\r\nimport enemyCreator, {\r\n  movementWatching as enemyMovement,\r\n} from \"./configs/enemy\";\r\nimport { objects } from \"./configs/objects\";\r\nimport preloadData from \"./configs/preloadData\";\r\n\r\nexport default class DefaultScene extends Scene {\r\n  engine: Game;\r\n  player: CreatePlayer;\r\n  world: World;\r\n  enemy: EnemyListType = {};\r\n\r\n  state: {\r\n    cursor?: Phaser.GameObjects.Arc;\r\n    camera?: Phaser.Cameras.Scene2D.Camera;\r\n  };\r\n\r\n  constructor(config: string) {\r\n    super(config);\r\n    this.engine = new Game(this);\r\n    this.state = {};\r\n  }\r\n\r\n  preload() {\r\n    this.engine.load.preload(preloadData);\r\n  }\r\n  create() {\r\n    this.engine.load.animation(animationList);\r\n    this.world = this.engine.create.world(\r\n      true,\r\n      \"exampleGrid\",\r\n      \"exampleGrassTile\",\r\n      32\r\n    );\r\n    this.world.addSimpleObjects(objects);\r\n\r\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, [0.5, 0.8]);\r\n    enemyCreator(this);\r\n\r\n    this.state.camera = this.engine.create.camera(\r\n      this.player.actor,\r\n      this.world.world\r\n    );\r\n\r\n    this.state.cursor = this.engine.create.ui.cursor(\r\n      100,\r\n      100,\r\n      1,\r\n      25,\r\n      0xffffff,\r\n      null,\r\n      this.state.camera\r\n    );\r\n\r\n    this.engine.addListeners(\"pointerup\", () => {});\r\n  }\r\n  update() {\r\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\r\n\r\n    enemyMovement(this);\r\n  }\r\n}\r\n","import DefaultScene from \"..\";\r\nimport { collisionCellIds, enemyList } from \"./config\";\r\n\r\nexport default function create(scene: DefaultScene) {\r\n  enemyList.forEach((unit) => {\r\n    const { name, config, animations } = unit;\r\n    scene.enemy[name] = scene.engine.create.enemy(\r\n      config.x,\r\n      config.y,\r\n      config.spriteSheet,\r\n      config.textureFrame,\r\n      animations,\r\n      {\r\n        origin: config.origin,\r\n        vision: 50,\r\n        speed: 100,\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport function movementWatching(scene: DefaultScene) {\r\n  for (const [name, character] of Object.entries(scene.enemy)) {\r\n    character.watching([scene.player.actor], collisionCellIds);\r\n  }\r\n}\r\n","import DefaultScene from './scenes/DefaultScene'\r\n\r\nconst groundSpriteSize = 32\r\nconst minGroundNumber = 15\r\nconst size = groundSpriteSize * minGroundNumber\r\n\r\nexport const config = {\r\n  type: Phaser.AUTO,\r\n  parent: 'game-box',\r\n  width: size,\r\n  height: size,\r\n  scene: [DefaultScene],\r\n  backgroundColor: 0x14003b,\r\n  // transparent: true\r\n  physics: {\r\n    default: 'arcade',\r\n    arcade: {\r\n      // debug: true,\r\n    },\r\n  },\r\n}\r\n","import React, { useEffect, useLayoutEffect } from \"react\";\r\nimport { renderGame } from \"../../game-modules\";\r\nimport css from \"./style.module.scss\";\r\n\r\nlet game: Phaser.Game | null = null;\r\n\r\nexport const Game = () => {\r\n  useLayoutEffect(() => {\r\n    game = renderGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      game?.destroy(true, true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"game-box\"></div>\r\n    </div>\r\n  );\r\n};\r\n","import Phaser from \"phaser\";\r\n\r\nimport { config } from \"./service/config\";\r\n\r\nexport const renderGame = () => new Phaser.Game(config);\r\n","import \"./App.css\";\r\nimport { Game } from \"./components/Game\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}
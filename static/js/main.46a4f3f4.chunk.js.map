{"version":3,"sources":["game-modules/game/create/world.ts","game-modules/game/load/preload.ts","game-modules/game/create/animation.ts","game-modules/game/create/player/index.ts","game-modules/game/create/character.ts","game-modules/game/create/camera.ts","game-modules/game/create/UI/cursor/index.ts","game-modules/game/add/collision.ts","game-modules/game/index.ts","game-modules/service/scenes/DefaultScene/configs/animations.ts","game-modules/service/scenes/DefaultScene/configs/config.ts","game-modules/service/scenes/DefaultScene/configs/objects.ts","game-modules/service/scenes/DefaultScene/configs/preloadData.ts","game-modules/service/scenes/DefaultScene/index.ts","game-modules/service/config.ts","components/Game/index.tsx","game-modules/index.ts","App.js","index.js"],"names":["creator","showWorld","gridName","imgName","size","collision","gridTileMap","this","make","tilemap","key","tileHeight","tileWidth","gridTileSet","addTilesetImage","undefined","tileLayer","createStaticLayer","setCollisionByExclusion","World","scene","world","objects","call","configs","forEach","config","x","y","name","add","image","console","log","createWorld","preloadData","data","unit","method","content","load","createAnimation","frame","anims","create","frames","generateFrameNumbers","ways","frameRate","repeat","Animation","CreateCharacter","spriteSheet","textureFrame","origin","actor","top","calc","blocked","bottom","left","right","physics","sprite","setOrigin","Object","entries","value","valueLine","id","indexOf","getTileAtWorldXY","index","speed","accuracy","xSide","ySide","setVelocityX","setVelocityY","createPlayer","CreatePlayer","isCollisionCreated","cursor","checkCollision","directionX","directionY","coordinateX","coordinateY","side","isPaused","play","currentAnim","pause","createCamera","camera","cameras","main","setBounds","Number","width","height","startFollow","createCursor","scale","background","border","circle","color","setStrokeStyle","tween","tweens","delay","targets","yoyo","alpha","ease","input","on","fehlerX","fehlerY","scrollX","scrollY","restart","addCollision","el_1","el_2","collider","Game","bind","player","animation","ui","preload","event","callBack","playerGoFrames","start","end","playerAnims","collisionCellIds","playerData","frameWidth","frameHeight","startFrame","endFrame","path","DefaultScene","engine","state","addSimpleObjects","addAnimation","check","addListeners","move","Scene","type","Phaser","AUTO","parent","groundSpriteSize","backgroundColor","default","arcade","debug","game","useLayoutEffect","useEffect","destroy","App","className","render","document","getElementById"],"mappings":"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","file":"static/js/main.46a4f3f4.chunk.js","sourcesContent":["import { Scene } from \"phaser\";\nimport { SimpleObject } from \"../types\";\nexport function creator(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number,\n  collision?: number[]\n) {\n  const gridTileMap = this.make.tilemap({\n    key: gridName,\n    tileHeight: size,\n    tileWidth: size,\n  });\n\n  const gridTileSet = showWorld\n    ? gridTileMap.addTilesetImage(imgName, undefined, size, size)\n    : null;\n\n  // @ts-ignore\n  const tileLayer = gridTileMap.createStaticLayer(0, gridTileSet, 0, 0); //createStaticLayer exists but is not described\n\n  if (collision) {\n    tileLayer.setCollisionByExclusion(collision);\n  }\n\n  return tileLayer;\n}\n\nexport default class World {\n  world: any;\n  scene: Scene;\n  objects: {\n    [key: string]: Phaser.GameObjects.Image;\n  };\n\n  constructor(\n    scene: Scene,\n    showWorld: boolean,\n    gridName: string,\n    imgName: string,\n    size: number,\n    collision?: number[]\n  ) {\n    this.scene = scene;\n    this.world = creator.call(\n      scene,\n      showWorld,\n      gridName,\n      imgName,\n      size,\n      collision\n    );\n    this.objects = {};\n  }\n\n  addSimpleObjects(configs: SimpleObject[]) {\n    configs.forEach((config) => {\n      const { x, y, imgName, name } = config;\n      this.objects[name] = this.scene.add.image(x, y, imgName);\n    });\n  }\n\n  show() {\n    console.log(\"🚀 ~> \", this);\n  }\n}\n\nexport function createWorld(\n  this: Scene,\n  showWorld: boolean,\n  gridName: string,\n  imgName: string,\n  size: number,\n  collision?: number[]\n) {\n  return new World(this, showWorld, gridName, imgName, size, collision);\n}\n","import { Scene } from \"phaser\";\nimport { PreloadTypes } from \"../types\";\n\nexport function preloadData(this: Scene, data: PreloadTypes[]) {\n  data.forEach((unit) => {\n    const { method, data } = unit;\n\n    data.forEach((content) => {\n      // @ts-ignore: Unreachable code error\n      const result = this.load[method](...content);\n    });\n  });\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig } from \"../types\";\n\nexport default function createAnimation(\n  this: Scene,\n  configs: AnimationConfig[]\n) {\n  configs.forEach((config) => {\n    const { key, frame } = config;\n    this.anims.create({\n      key,\n      frames: this.anims.generateFrameNumbers(frame.name, frame.ways),\n      frameRate: frame.frameRate,\n      repeat: frame.repeat,\n    });\n  });\n}\n","import DefaultScene from \"../../../service/scenes/DefaultScene\";\nimport CreateCharacter from \"../character\";\n\nenum Animation {\n  \"left\" = \"playerGoLeft\",\n  \"right\" = \"playerGoRight\",\n  \"top\" = \"playerGoUp\",\n  \"bottom\" = \"playerGoDown\",\n}\n\nexport function createPlayer(\n  this: DefaultScene,\n  x: number,\n  y: number,\n  spriteSheet: string,\n  textureFrame: string | number | undefined,\n  origin?: number[]\n) {\n  return new CreatePlayer(this, x, y, spriteSheet, textureFrame, origin);\n}\n\nexport default class CreatePlayer extends CreateCharacter {\n  scene: DefaultScene;\n\n  isCollisionCreated = false;\n\n  constructor(\n    scene: DefaultScene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    origin?: number[]\n  ) {\n    super(scene, x, y, spriteSheet, textureFrame, origin);\n    this.scene = scene;\n  }\n  check() {\n    console.log(\"actor: \", this);\n  }\n\n  //@ts-ignore\n  move(cursor: any, world: any, collision: number[]) {\n    let speed = 100;\n    let accuracy = 5;\n\n    this.checkCollision(this.actor.x, this.actor.y, world, collision);\n    const directionX = cursor.x - this.actor.x; // +right -left\n    const directionY = cursor.y - this.actor.y; // -top +bottom\n\n    let coordinateX = cursor.x;\n    let coordinateY = cursor.y;\n\n    if (this.collision.right.blocked) {\n      if (directionX > 0) {\n        coordinateX = this.actor.x;\n      }\n    } else if (this.collision.left.blocked) {\n      if (directionX < 0) {\n        coordinateX = this.actor.x;\n      }\n    }\n\n    if (this.collision.bottom.blocked) {\n      if (directionY > 0) {\n        coordinateY = this.actor.y;\n      }\n    } else if (this.collision.top.blocked) {\n      if (directionY < 0) {\n        coordinateY = this.actor.y;\n      }\n    }\n\n    const side = super.move(coordinateX, coordinateY, speed, accuracy);\n\n    const [xSide, ySide] = side;\n\n    if (xSide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== Animation[xSide]) {\n        this.actor.anims.play(Animation[xSide]);\n      }\n    } else if (ySide !== \"stop\") {\n      if (this.actor.anims.isPaused) {\n        this.actor.anims.play(this.actor.anims.currentAnim);\n      }\n\n      if (this.actor.anims.currentAnim?.key !== Animation[ySide]) {\n        this.actor.anims.play(Animation[ySide]);\n      }\n    } else {\n      this.actor.anims.pause(this.actor.anims.currentAnim?.frames[1]);\n    }\n\n    return side;\n  }\n}\n","import { Scene } from \"phaser\";\nimport { AnimationConfig, Sides } from \"../types\";\nimport createAnimation from \"./animation\";\n\nexport default class CreateCharacter {\n  actor;\n  scene: Scene;\n\n  collision = {\n    top: {\n      calc: -15,\n      blocked: false,\n    },\n    bottom: {\n      calc: 15,\n      blocked: false,\n    },\n    left: {\n      calc: -15,\n      blocked: false,\n    },\n    right: {\n      calc: 15,\n      blocked: false,\n    },\n  };\n\n  constructor(\n    scene: Scene,\n    x: number,\n    y: number,\n    spriteSheet: string,\n    textureFrame: string | number | undefined,\n    origin?: number[]\n  ) {\n    this.scene = scene;\n    this.actor = scene.physics.add.sprite(x, y, spriteSheet, textureFrame);\n\n    if (origin) {\n      this.actor.setOrigin(...origin);\n    }\n  }\n\n  addAnimation(configs: AnimationConfig[]) {\n    createAnimation.call(this.scene, configs);\n  }\n\n  checkCollision(x: number, y: number, world: any, collision: number[]) {\n    for (const [key, value] of Object.entries(this.collision)) {\n      const valueLine = key === \"top\" || key === \"bottom\" ? \"y\" : \"x\";\n\n      const id = collision.indexOf(\n        world.getTileAtWorldXY(\n          valueLine === \"x\" ? x + value.calc : x,\n          valueLine === \"y\" ? y + value.calc : y,\n          false\n        )?.index\n      );\n\n      if (!id || id !== -1) {\n        value.blocked = true;\n      } else {\n        value.blocked = false;\n      }\n    }\n  }\n\n  move(x: number, y: number, speed = 100, accuracy = 10): Sides[] {\n    const xSide =\n      this.actor.x - x < -accuracy\n        ? \"right\"\n        : this.actor.x - x > accuracy\n        ? \"left\"\n        : \"stop\";\n    const ySide =\n      this.actor.y - y < -accuracy\n        ? \"bottom\"\n        : this.actor.y - y > accuracy\n        ? \"top\"\n        : \"stop\";\n\n    if (xSide === \"right\") {\n      this.actor.setVelocityX(speed);\n    } else if (xSide === \"left\") {\n      this.actor.setVelocityX(-speed);\n    } else {\n      this.actor.setVelocityX(0);\n    }\n\n    if (ySide === \"bottom\") {\n      this.actor.setVelocityY(speed);\n    } else if (ySide === \"top\") {\n      this.actor.setVelocityY(-speed);\n    } else {\n      this.actor.setVelocityY(0);\n    }\n\n    return [xSide, ySide];\n  }\n}\n","import { Scene } from \"phaser\";\n\nexport default function createCamera(\n  this: Scene,\n  actor: Phaser.GameObjects.GameObject | Object,\n  world: any\n) {\n  const camera = this.cameras.main;\n  debugger;\n  camera\n    .setBounds(0, 0, Number(world.width), Number(world.height))\n    .startFollow(actor, true, 1, 1, 0, 0);\n\n  return camera;\n}\n","import { Scene } from \"phaser\";\nimport { CursorBorderType } from \"../../../types\";\n\nexport default function createCursor(\n  this: Scene,\n  x: number,\n  y: number,\n  size: number,\n  scale: number,\n  background: number,\n  border?: CursorBorderType | null,\n  camera?: Phaser.Cameras.Scene2D.Camera\n) {\n  const circle = this.add.circle(x, y, size, background);\n\n  if (border) {\n    const { color, size } = border;\n    circle.setStrokeStyle(size, color);\n  }\n\n  const tween = this.tweens.add({\n    delay: 0.1,\n    targets: circle,\n    scale: scale,\n    yoyo: false,\n    repeat: 0,\n    alpha: 0,\n    ease: \"Sine.easeInOut\",\n  });\n\n  this.input.on(\"pointerdown\", () => {\n    let fehlerX = 0,\n      fehlerY = 0;\n\n    if (camera) {\n      fehlerX = camera.scrollX;\n      fehlerY = camera.scrollY;\n    }\n\n    circle.x = this.input.x + fehlerX;\n    circle.y = this.input.y + fehlerY;\n    tween.restart();\n  });\n\n  return circle;\n}\n","import { Scene } from \"phaser\";\nimport { ColliderObject } from \"../types\";\n\nexport default function addCollision(\n  this: Scene,\n  el_1: ColliderObject,\n  el_2: ColliderObject\n) {\n  this.physics.add.collider(el_1, el_2);\n}\n","import { createWorld } from \"./create/world\";\nimport { preloadData } from \"./load/preload\";\nimport { AddGameTypes, CreateGameTypes, LoadGameTypes } from \"./types\";\nimport { createPlayer } from \"./create/player\";\nimport createAnimation from \"./create/animation\";\nimport createCamera from \"./create/camera\";\nimport DefaultScene from \"../service/scenes/DefaultScene\";\nimport createCursor from \"./create/UI/cursor\";\nimport addCollision from \"./add/collision\";\n\nexport default class Game {\n  scene: DefaultScene;\n  create: CreateGameTypes;\n  load: LoadGameTypes;\n  add: AddGameTypes;\n\n  constructor(scene: DefaultScene) {\n    this.scene = scene;\n    this.create = {\n      world: createWorld.bind(this.scene),\n      player: createPlayer.bind(this.scene),\n      animation: createAnimation.bind(this.scene),\n      camera: createCamera.bind(this.scene),\n\n      ui: {\n        cursor: createCursor.bind(this.scene),\n      },\n    };\n    this.load = {\n      preload: preloadData.bind(this.scene),\n    };\n    this.add = {\n      collision: addCollision.bind(this.scene),\n    };\n  }\n\n  addListeners(event: string | symbol, callBack: () => void) {\n    this.scene.input.on(event, callBack);\n  }\n}\n","import { AnimationConfig } from \"../../../../game/types\";\n\nconst playerGoFrames = {\n  ways: {\n    start: 0,\n    end: 3,\n  },\n  frameRate: 6,\n  repeat: -1,\n};\n\nexport const playerAnims: AnimationConfig[] = [\n  {\n    key: \"playerGoUp\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerUp\",\n    },\n  },\n  {\n    key: \"playerGoDown\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerDown\",\n    },\n  },\n  {\n    key: \"playerGoLeft\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerLeft\",\n    },\n  },\n  {\n    key: \"playerGoRight\",\n    frame: {\n      ...playerGoFrames,\n      name: \"playerRight\",\n    },\n  },\n];\n","export const collisionCellIds = [0, 2, 3, 4, 5, 7, 8, 9, 10];\n","import { SimpleObject } from \"../../../../game/types\";\n\nexport const objects: SimpleObject[] = [];\n","import { PreloadTypes } from \"../../../../game/types\";\n\nconst playerData = {\n  frame: {\n    frameWidth: 20,\n    frameHeight: 45,\n    startFrame: 0,\n    endFrame: 3,\n  },\n  path: \"game/assets/img/DefaultScene/characters/player/\",\n};\n\nconst data: PreloadTypes[] = [\n  {\n    method: \"image\",\n    data: [\n      [\"exampleGrassTile\", \"game/assets/img/DefaultScene/grass.png\"],\n      [\"cursor\", \"game/assets/img/general/cursor.png\"],\n      [\"empty\", \"game/assets/img/general/emptyLayers.png\"],\n    ],\n  },\n  {\n    method: \"tilemapCSV\",\n    data: [[\"exampleGrid\", \"game/assets/grids/DefaultScene/grass.csv\"]],\n  },\n  {\n    method: \"spritesheet\",\n    data: [\n      [\"playerLeft\", `${playerData.path}p_left.png`, playerData.frame],\n      [\"playerRight\", `${playerData.path}p_right.png`, playerData.frame],\n      [\n        \"playerDown\",\n        `${playerData.path}p_down.png`,\n        { ...playerData.frame, frameHeight: 44 },\n      ],\n      [\n        \"playerUp\",\n        `${playerData.path}p_up.png`,\n        { ...playerData.frame, frameHeight: 44, frameWidth: 19 },\n      ],\n    ],\n  },\n];\n\nexport default data;\n","import { Scene } from \"phaser\";\nimport Game from \"../../../game\";\nimport CreatePlayer from \"../../../game/create/player\";\nimport World from \"../../../game/create/world\";\nimport { playerAnims } from \"./configs/animations\";\nimport { collisionCellIds } from \"./configs/config\";\nimport { objects } from \"./configs/objects\";\nimport preloadData from \"./configs/preloadData\";\n\nexport default class DefaultScene extends Scene {\n  engine: Game;\n  player: CreatePlayer;\n  world: World;\n\n  state: {\n    cursor?: Phaser.GameObjects.Arc;\n    camera?: Phaser.Cameras.Scene2D.Camera;\n  };\n\n  constructor(config: string) {\n    super(config);\n    this.engine = new Game(this);\n    this.state = {};\n  }\n\n  preload() {\n    this.engine.load.preload(preloadData);\n  }\n  create() {\n    this.world = this.engine.create.world(\n      true,\n      \"exampleGrid\",\n      \"exampleGrassTile\",\n      32,\n      [0]\n    );\n    this.world.addSimpleObjects(objects);\n\n    this.player = this.engine.create.player(64, 64, \"playerUp\", 1, [0.5, 0.8]);\n    this.player.addAnimation(playerAnims);\n    this.player.check();\n\n    this.state.camera = this.engine.create.camera(\n      this.player.actor,\n      this.world.world\n    );\n\n    this.state.cursor = this.engine.create.ui.cursor(\n      100,\n      100,\n      1,\n      25,\n      0xffffff,\n      null,\n      this.state.camera\n    );\n\n    this.engine.addListeners(\"pointerup\", () => {});\n  }\n  update() {\n    this.player.move(this.state.cursor, this.world.world, collisionCellIds);\n  }\n}\n","import DefaultScene from \"./scenes/DefaultScene\";\n\nconst groundSpriteSize = 32;\nconst minGroundNumber = 15;\nconst size = groundSpriteSize * minGroundNumber;\n\nexport const config = {\n  type: Phaser.AUTO,\n  parent: \"game-box\",\n  width: size,\n  height: size,\n  scene: [DefaultScene],\n  backgroundColor: 0x14003b,\n  // transparent: true\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      debug: true,\n    },\n  },\n};\n","import React, { useEffect, useLayoutEffect } from \"react\";\nimport { renderGame } from \"../../game-modules\";\nimport css from \"./style.module.scss\";\n\nlet game: Phaser.Game | null = null;\n\nexport const Game = () => {\n  useLayoutEffect(() => {\n    game = renderGame();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      game?.destroy(true, true);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"game-box\"></div>\n    </div>\n  );\n};\n","import Phaser from \"phaser\";\n\nimport { config } from \"./service/config\";\n\nexport const renderGame = () => new Phaser.Game(config);\n","import \"./App.css\";\nimport { Game } from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}